[{"D:\\Fullstack\\online-store\\client\\src\\reportWebVitals.js":"1","D:\\Fullstack\\online-store\\client\\src\\index.tsx":"2","D:\\Fullstack\\online-store\\client\\src\\App.tsx":"3","D:\\Fullstack\\online-store\\client\\src\\components\\Header.tsx":"4","D:\\Fullstack\\online-store\\client\\src\\router\\MyRouter.tsx":"5","D:\\Fullstack\\online-store\\client\\src\\pages\\Content.tsx":"6","D:\\Fullstack\\online-store\\client\\src\\components\\Logout.tsx":"7","D:\\Fullstack\\online-store\\client\\src\\components\\TypeBar.tsx":"8","D:\\Fullstack\\online-store\\client\\src\\components\\Device.tsx":"9","D:\\Fullstack\\online-store\\client\\src\\store\\store.ts":"10","D:\\Fullstack\\online-store\\client\\src\\store\\reducer\\authReducer.ts":"11","D:\\Fullstack\\online-store\\client\\src\\pages\\AuthContainer.tsx":"12","D:\\Fullstack\\online-store\\client\\src\\action\\authAction.ts":"13","D:\\Fullstack\\online-store\\client\\src\\components\\Copyright.tsx":"14","D:\\Fullstack\\online-store\\client\\src\\components\\FormLogin.tsx":"15","D:\\Fullstack\\online-store\\client\\src\\constants\\url.ts":"16","D:\\Fullstack\\online-store\\client\\src\\components\\DeviceContainer.tsx":"17","D:\\Fullstack\\online-store\\client\\src\\store\\reducer\\deviceReducer.ts":"18","D:\\Fullstack\\online-store\\client\\src\\action\\deviceAction.ts":"19","D:\\Fullstack\\online-store\\client\\src\\pages\\AddDevicesContainer.tsx":"20","D:\\Fullstack\\online-store\\client\\src\\components\\DeviceData.tsx":"21","D:\\Fullstack\\online-store\\client\\src\\components\\DeviceProperty.tsx":"22","D:\\Fullstack\\online-store\\client\\src\\components\\DevicePicture.tsx":"23","D:\\Fullstack\\online-store\\client\\src\\components\\ModalWindow.tsx":"24","D:\\Fullstack\\online-store\\client\\src\\components\\TypeListDelete.tsx":"25","D:\\Fullstack\\online-store\\client\\src\\components\\BrandListDelete.tsx":"26","D:\\Fullstack\\online-store\\client\\src\\components\\AlertMessage.tsx":"27","D:\\Fullstack\\online-store\\client\\src\\pages\\ProfileDevice.tsx":"28","D:\\Fullstack\\online-store\\client\\src\\components\\ImageList.tsx":"29","D:\\Fullstack\\online-store\\client\\src\\components\\Footer.tsx":"30","D:\\Fullstack\\online-store\\client\\src\\components\\ActiveLastBreadcrumb.tsx":"31"},{"size":362,"mtime":499162500000,"results":"32","hashOfConfig":"33"},{"size":578,"mtime":1635882955665,"results":"34","hashOfConfig":"33"},{"size":250,"mtime":1635081268369,"results":"35","hashOfConfig":"33"},{"size":4343,"mtime":1639729700043,"results":"36","hashOfConfig":"33"},{"size":1027,"mtime":1639575297175,"results":"37","hashOfConfig":"33"},{"size":9662,"mtime":1639643392289,"results":"38","hashOfConfig":"33"},{"size":1958,"mtime":1636313847964,"results":"39","hashOfConfig":"33"},{"size":7437,"mtime":1639336872336,"results":"40","hashOfConfig":"33"},{"size":2017,"mtime":1639637623444,"results":"41","hashOfConfig":"33"},{"size":577,"mtime":1636569802182,"results":"42","hashOfConfig":"33"},{"size":2592,"mtime":1636311069632,"results":"43","hashOfConfig":"33"},{"size":4129,"mtime":1636396393919,"results":"44","hashOfConfig":"33"},{"size":2414,"mtime":1636312765156,"results":"45","hashOfConfig":"33"},{"size":472,"mtime":1635964667548,"results":"46","hashOfConfig":"33"},{"size":4318,"mtime":1636300420944,"results":"47","hashOfConfig":"33"},{"size":278,"mtime":1638980936816,"results":"48","hashOfConfig":"33"},{"size":1523,"mtime":1639501566095,"results":"49","hashOfConfig":"33"},{"size":9646,"mtime":1639501467253,"results":"50","hashOfConfig":"33"},{"size":7603,"mtime":1639474615829,"results":"51","hashOfConfig":"33"},{"size":9485,"mtime":1638980708921,"results":"52","hashOfConfig":"33"},{"size":7704,"mtime":1638894665555,"results":"53","hashOfConfig":"33"},{"size":5578,"mtime":1638626418261,"results":"54","hashOfConfig":"33"},{"size":4036,"mtime":1638612168447,"results":"55","hashOfConfig":"33"},{"size":3995,"mtime":1638981175473,"results":"56","hashOfConfig":"33"},{"size":2771,"mtime":1639146160556,"results":"57","hashOfConfig":"33"},{"size":2757,"mtime":1639336268829,"results":"58","hashOfConfig":"33"},{"size":806,"mtime":1639337002959,"results":"59","hashOfConfig":"33"},{"size":3265,"mtime":1639729700049,"results":"60","hashOfConfig":"33"},{"size":1466,"mtime":1639729700048,"results":"61","hashOfConfig":"33"},{"size":3357,"mtime":1639729700043,"results":"62","hashOfConfig":"33"},{"size":968,"mtime":1639729700043,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"rlz3tn",{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"69"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"69"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Fullstack\\online-store\\client\\src\\reportWebVitals.js",[],["136","137"],"D:\\Fullstack\\online-store\\client\\src\\index.tsx",[],["138","139"],"D:\\Fullstack\\online-store\\client\\src\\App.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\components\\Header.tsx",["140"],"import React, { useEffect } from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Button from '@material-ui/core/Button';\r\nimport ShoppingCart from '@material-ui/icons/ShoppingCart';\r\nimport Logout from './Logout';\r\nimport {\r\n  setAuth, //записть авторизации в стор\r\n  setIsAuth, // маркер авторизации\r\n  setLogout, // выход из авторизации\r\n  AuthReducerType, //типизация авторизации\r\n  SetAuthActionType, // типизация экшена авторизации\r\n  SetLogoutActionType, // типизация экшена выхода из авторизации\r\n  SetIsAuthActionType, // типизация экшена маркера типизации\r\n} from '../store/reducer/authReducer';\r\nimport { getBrands, getTypes } from '../action/deviceAction'; //запрос на получениe типов устройств\r\nimport { RootStateType } from '../store/store';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\n//типизация--------------------------------\r\ntype MapStateToPropsType = { isAuth: boolean; auth: AuthReducerType };\r\ntype MapDispathPropsType = {\r\n  setAuth: (value: AuthReducerType) => SetAuthActionType;\r\n  setIsAuth: (value: boolean) => SetIsAuthActionType;\r\n  setLogout: () => SetLogoutActionType;\r\n  getTypes: () => void;\r\n  getBrands: () => void;\r\n};\r\ntype PropsType = MapDispathPropsType & MapStateToPropsType;\r\n//-----------------------------------------\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  login: {\r\n    ...theme.typography.button,\r\n  },\r\n}));\r\n\r\nconst Header: React.FC<PropsType> = ({\r\n  auth,\r\n  isAuth,\r\n  setAuth,\r\n  setLogout,\r\n  setIsAuth,\r\n  getTypes,\r\n  getBrands,\r\n}) => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  useEffect(() => {\r\n    setIsAuth(!!sessionStorage.getItem('token')); //берём токен из sessionStorage и приводим его к булевому значению\r\n\r\n    const authorizationData: AuthReducerType = {\r\n      //берём данные из sessionStorage и записываем в стор\r\n      token: sessionStorage.getItem('token'),\r\n      email: sessionStorage.getItem('email'),\r\n      role: sessionStorage.getItem('role'),\r\n    };\r\n    setAuth(authorizationData);\r\n    // загрузка типов устройств\r\n    getTypes();\r\n    // загрузка брендов\r\n    getBrands();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <AppBar position=\"static\" color=\"secondary\">\r\n      <Toolbar>\r\n        <Typography\r\n          className={classes.title}\r\n          variant=\"h6\"\r\n          color=\"inherit\"\r\n          noWrap\r\n        >\r\n          OnlineStore\r\n        </Typography>\r\n        {isAuth && auth.role === 'ADMIN' && (\r\n          <Button\r\n            color=\"inherit\"\r\n            onClick={() => {\r\n              history.push('/addDevicesContainer');\r\n            }}\r\n          >\r\n            Админ панель\r\n          </Button>\r\n        )}\r\n        {isAuth ? (\r\n          <>\r\n            <IconButton color=\"inherit\">\r\n              <Badge badgeContent={0} color=\"secondary\">\r\n                <ShoppingCart />\r\n              </Badge>\r\n            </IconButton>\r\n            <Logout setLogout={setLogout} />\r\n          </>\r\n        ) : (\r\n          <Button color=\"inherit\" onClick={() => history.push('/login')}>\r\n            Войти\r\n          </Button>\r\n        )}\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n  return {\r\n    isAuth: state.auth.isAuth, //  маркер авторизации\r\n    auth: state.auth.auth, //авторизация для role\r\n  };\r\n};\r\nexport default connect<\r\n  MapStateToPropsType,\r\n  MapDispathPropsType,\r\n  unknown, // личные пропсы\r\n  RootStateType\r\n>(mapStateToProps, { setAuth, setLogout, setIsAuth, getTypes, getBrands })(\r\n  Header\r\n);\r\n","D:\\Fullstack\\online-store\\client\\src\\router\\MyRouter.tsx",["141"],"import React from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Header from '../components/Header';\r\nimport AuthContainer from '../pages/AuthContainer';\r\nimport Content from '../pages/Content';\r\nimport AddDevicesContainer from '../pages/AddDevicesContainer';\r\nimport ProfileDevice from '../pages/ProfileDevice';\r\nimport Footer from '../components/Footer';\r\n\r\nconst MyRouter: React.FC = () => {\r\n  return (\r\n    <Grid container direction=\"column\">\r\n      <Header />\r\n      <Switch>\r\n        <Route component={Content} path=\"/\" exact />\r\n        <Route component={AuthContainer} path=\"/login\" exact />\r\n        <Route component={AuthContainer} path=\"/registration\" exact />\r\n        <Route\r\n          component={AddDevicesContainer}\r\n          path=\"/addDevicesContainer\"\r\n          exact\r\n        />\r\n        <Route component={ProfileDevice} path=\"/profile/:id\" />\r\n      </Switch>\r\n      <Footer />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default MyRouter;\r\n","D:\\Fullstack\\online-store\\client\\src\\pages\\Content.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\components\\Logout.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\components\\TypeBar.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\components\\Device.tsx",["142"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { DeviceType } from '../store/reducer/deviceReducer';\r\nimport { ROOT_URL } from '../constants/url';\r\nimport { AuthReducerType } from '../store/reducer/authReducer';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n//типизация----------------------\r\n\r\ntype PropsType = {\r\n  item: DeviceType;\r\n  auth: AuthReducerType;\r\n  isAuth: boolean;\r\n  removeDevice: (id: string | undefined) => void;\r\n};\r\n//---------------------------------\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 250,\r\n  },\r\n  media: {\r\n    height: 100,\r\n    width: 'auto',\r\n    padding: 15,\r\n    cursor: 'pointer',\r\n  },\r\n  cardActions: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n  },\r\n});\r\n\r\nconst Device: React.FC<PropsType> = ({ item, auth, isAuth, removeDevice }) => {\r\n  const { name, picture, price } = item;\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <img\r\n        src={`${ROOT_URL}/${picture[0]}`}\r\n        className={classes.media}\r\n        onClick={() => {\r\n          history.push(`/profile/${item._id}`);\r\n        }}\r\n      />\r\n\r\n      <Typography gutterBottom variant=\"h6\" component=\"div\">\r\n        {price} p\r\n      </Typography>\r\n      <Typography variant=\"body2\" color=\"textSecondary\" component=\"div\">\r\n        {name}\r\n      </Typography>\r\n\r\n      <div className={classes.cardActions}>\r\n        <Button size=\"small\" color=\"primary\">\r\n          Купить\r\n        </Button>\r\n        {isAuth && auth.role === 'ADMIN' && (\r\n          <Button\r\n            size=\"small\"\r\n            color=\"secondary\"\r\n            onClick={() => {\r\n              removeDevice(item._id);\r\n            }}\r\n          >\r\n            Удалить\r\n          </Button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Device;\r\n","D:\\Fullstack\\online-store\\client\\src\\store\\store.ts",[],"D:\\Fullstack\\online-store\\client\\src\\store\\reducer\\authReducer.ts",[],"D:\\Fullstack\\online-store\\client\\src\\pages\\AuthContainer.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\action\\authAction.ts",[],"D:\\Fullstack\\online-store\\client\\src\\components\\Copyright.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\components\\FormLogin.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\constants\\url.ts",[],"D:\\Fullstack\\online-store\\client\\src\\components\\DeviceContainer.tsx",["143"],"import React from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Masonry from 'react-masonry-css'; // контейнерный компонент для стиля(расположение элементов)\r\nimport Device from './Device';\r\nimport { DeviceType } from '../store/reducer/deviceReducer';\r\nimport { AuthReducerType } from '../store/reducer/authReducer';\r\n\r\n//----типизация пропсов----\r\ntype PropsType = {\r\n  devices: DeviceType[];\r\n  auth: AuthReducerType;\r\n  isAuth: boolean;\r\n  removeDevice: (id: string | undefined) => void;\r\n};\r\n//-------------------------\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst breakpoints = {\r\n  default: 5,\r\n  1100: 2,\r\n  700: 1,\r\n}; // это для Masonry,компонент регулирет расположение карточек(отдельно установлен)\r\nconst DeviceContainer: React.FC<PropsType> = ({\r\n  devices,\r\n  auth,\r\n  isAuth,\r\n  removeDevice,\r\n}) => {\r\n  return (\r\n    <Masonry\r\n      breakpointCols={breakpoints}\r\n      className=\"my-masonry-grid\"\r\n      columnClassName=\"my-masonry-grid_column\"\r\n    >\r\n      {devices.map((item) => {\r\n        return (\r\n          <Device\r\n            item={item}\r\n            key={Math.random()}\r\n            auth={auth}\r\n            isAuth={isAuth}\r\n            removeDevice={removeDevice}\r\n          />\r\n        );\r\n      })}\r\n    </Masonry>\r\n  );\r\n};\r\n\r\nexport default DeviceContainer;\r\n","D:\\Fullstack\\online-store\\client\\src\\store\\reducer\\deviceReducer.ts",[],"D:\\Fullstack\\online-store\\client\\src\\action\\deviceAction.ts",["144","145"],"import {\r\n  setIsLoadinDevice, //крутилка для устройств\r\n  setIsLoadinTypes, //крутилка для типов\r\n  setFetchErrorDevice, //ошибка для устройств\r\n  setFetchErrorTypes, //ошибка для типов\r\n  setDevices, // запись устройств в стейт\r\n  setSelectedDevice, // запись выбранного устройства в стейт\r\n  setTypes, // запись типов в стейт\r\n  setBrands, // запись брэндов\r\n  setPageQty, // запись количества страниц в стейт\r\n  addedDeviceType, //типизация добавленного устройства\r\n  setAddedDevice, // запись добавленного устройства в стейт\r\n  setAddedDeviceError, // изменения статуса ошибки добавленного устройства\r\n  setAlertMessage, // изменения маркера получения сообщения о невозможности удаления типа/брэнда устройства\r\n} from './../store/reducer/deviceReducer';\r\nimport axios from 'axios';\r\nimport { ThunkAction } from 'redux-thunk'; // для типизации санки\r\nimport { RootStateType } from '../store/store'; //типизация всего стора\r\nimport { ModelUrls } from '../constants/url';\r\nimport { DeviceAtionType } from '../store/reducer/deviceReducer'; //типизация экшенов устройств\r\n\r\n// типизация санки\r\nexport type ThunkType = ThunkAction<\r\n  Promise<void>,\r\n  RootStateType,\r\n  unknown, //extraArgument\r\n  DeviceAtionType\r\n>;\r\n// получение выбранных устройств и запись в стейт\r\nexport const getDevices = (\r\n  typeId: string | null,\r\n  brandId: string | null,\r\n  limit: number,\r\n  page: number,\r\n  setPage: React.Dispatch<React.SetStateAction<number>>,\r\n  history: any\r\n): ThunkType => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch(setIsLoadinDevice(true));\r\n      const response = await axios.get(`${ModelUrls.DEVICES}`, {\r\n        params: {\r\n          typeId,\r\n          brandId,\r\n          limit,\r\n          page,\r\n        },\r\n      });\r\n      // console.log(response);\r\n      //если число страниц меньше активной страницы,текущую страницу ставим 1\r\n      if (response.data.pageQty < page) {\r\n        setPage(1); //записываем текущую страницу в локальный стейт,(в Content)\r\n        history.replace('/');\r\n      }\r\n      //запись в стейт\r\n      dispatch(setDevices(response.data.device));\r\n      dispatch(setPageQty(response.data.pageQty));\r\n    } catch (e) {\r\n      console.log(e);\r\n      dispatch(setFetchErrorDevice(true));\r\n      dispatch(setIsLoadinDevice(false));\r\n    }\r\n  };\r\n};\r\n// получение выбранного устройства\r\nexport const getSelectedDevice = (id: string): ThunkType => {\r\n  //console.log(id);\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch(setIsLoadinDevice(true));\r\n      const response = await axios.get(ModelUrls.DEVICES + '/' + id);\r\n      //запись в стейт\r\n      dispatch(setSelectedDevice(response.data));\r\n    } catch (e) {\r\n      console.log(e);\r\n      dispatch(setFetchErrorDevice(true));\r\n      dispatch(setIsLoadinDevice(false));\r\n    }\r\n  };\r\n};\r\n\r\n// получение типов устройств и запись в стейт\r\nexport const getTypes = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch(setIsLoadinTypes(true));\r\n      const response = await axios.get(ModelUrls.TYPES);\r\n      // console.log(response);\r\n      //запись в стейт\r\n      dispatch(setTypes(response.data));\r\n    } catch (e) {\r\n      console.log(e);\r\n      dispatch(setFetchErrorTypes(true));\r\n      dispatch(setIsLoadinTypes(false));\r\n    }\r\n  };\r\n};\r\n// получение брэндов и запись в стейт\r\nexport const getBrands = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.get(ModelUrls.BRANDS);\r\n      // console.log(response);\r\n      //запись в стейт\r\n      dispatch(setBrands(response.data));\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n};\r\n// добавление устройства в базу данных ,обнуление стейта addedDevice,переход на главную страницу\r\nexport const addDevice = (data: any, history: any): ThunkType => {\r\n  //чтобы обнулить стейт\r\n  const copyAddedDevice: addedDeviceType = {\r\n    name: '',\r\n    price: '',\r\n    picture: [],\r\n    info: [],\r\n    typeId: '',\r\n    brandId: '',\r\n  };\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.post(ModelUrls.DEVICES, data);\r\n      // console.log(response);\r\n      dispatch(setAddedDeviceError(false));\r\n      //обнуляем добавленное устройство в стейте\r\n      dispatch(setAddedDevice(copyAddedDevice));\r\n      dispatch(getTypes());\r\n      history.push('/');\r\n    } catch (e) {\r\n      console.log(e);\r\n      dispatch(setAddedDeviceError(true));\r\n    }\r\n  };\r\n};\r\n// добавление типа устройства в базу данных\r\nexport const addType = (\r\n  data: { name: string },\r\n  handleClose: () => void\r\n): ThunkType => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.post(ModelUrls.TYPES, data);\r\n      dispatch(setAddedDeviceError(false));\r\n      console.log(response);\r\n      dispatch(getTypes());\r\n      handleClose();\r\n    } catch (e) {\r\n      console.log(e);\r\n      dispatch(setAddedDeviceError(true));\r\n    }\r\n  };\r\n};\r\n// добавление брэнда устройства в базу данных\r\nexport const addBrand = (\r\n  data: { name: string },\r\n  handleClose: () => void\r\n): ThunkType => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.post(ModelUrls.BRANDS, data);\r\n      dispatch(setAddedDeviceError(false));\r\n      console.log(response);\r\n      dispatch(getBrands());\r\n      handleClose();\r\n    } catch (e) {\r\n      console.log(e);\r\n      dispatch(setAddedDeviceError(true));\r\n    }\r\n  };\r\n};\r\n// удаление  устройства\r\nexport const removeDevice = (id: string | undefined): ThunkType => {\r\n  console.log(id);\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.delete(ModelUrls.DEVICES + '/' + id);\r\n      window.location.reload();\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n};\r\n// удаление типа устройства\r\nexport const removeType = (id: string): ThunkType => {\r\n  console.log(id);\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.delete(ModelUrls.TYPES + '/' + id);\r\n      // console.log(response);\r\n      if (response.data.message) {\r\n        dispatch(setAlertMessage(response.data.message));\r\n      }\r\n      dispatch(getTypes());\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n};\r\n// удаление брэнда устройства\r\nexport const removeBrand = (id: string): ThunkType => {\r\n  console.log(id);\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.delete(ModelUrls.BRANDS + '/' + id);\r\n      // console.log(response);\r\n      if (response.data.message) {\r\n        dispatch(setAlertMessage(response.data.message));\r\n      }\r\n      dispatch(getBrands());\r\n      dispatch(getTypes());\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n};\r\n","D:\\Fullstack\\online-store\\client\\src\\pages\\AddDevicesContainer.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\components\\DeviceData.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\components\\DeviceProperty.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\components\\DevicePicture.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\components\\ModalWindow.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\components\\TypeListDelete.tsx",["146"],"import React, { useState } from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport { TypeDeviceType } from '../store/reducer/deviceReducer'; //типизация\r\n\r\n//----типизация пропсов----\r\ntype PropsType = {\r\n  types: TypeDeviceType[];\r\n\r\n  removeType: (id: string) => void;\r\n};\r\n//-------------------------\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    marginTop: 20,\r\n    padding: '0px 5px',\r\n  },\r\n  list: { paddingLeft: theme.spacing(2) },\r\n\r\n  listType: {\r\n    paddingLeft: theme.spacing(9),\r\n    color: '#9e9e9e',\r\n  },\r\n}));\r\n\r\nconst TypeListDelete: React.FC<PropsType> = ({ types, removeType }) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n  return (\r\n    <List component=\"nav\" className={classes.root}>\r\n      <ListItem className={classes.list} button onClick={handleClick}>\r\n        <ListItemText\r\n          disableTypography\r\n          primary={\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              удалить тип товара\r\n            </Typography>\r\n          }\r\n        />\r\n        {open ? <ExpandLess /> : <ExpandMore />}\r\n      </ListItem>\r\n\r\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n        <List component=\"div\">\r\n          {types.map((item) => {\r\n            return (\r\n              <div key={item._id}>\r\n                <ListItem\r\n                  button\r\n                  className={classes.listType}\r\n                  onClick={() => {\r\n                    removeType(item._id);\r\n                  }}\r\n                >\r\n                  <ListItemText\r\n                    disableTypography\r\n                    primary={\r\n                      <Typography variant=\"subtitle2\" gutterBottom>\r\n                        {item.name}\r\n                      </Typography>\r\n                    }\r\n                  />\r\n                  <ListItemIcon style={{ color: 'red' }}>\r\n                    <HighlightOffIcon />\r\n                  </ListItemIcon>\r\n                </ListItem>\r\n              </div>\r\n            );\r\n          })}\r\n        </List>\r\n      </Collapse>\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default TypeListDelete;\r\n","D:\\Fullstack\\online-store\\client\\src\\components\\BrandListDelete.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\components\\AlertMessage.tsx",["147"],"import React from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\n//----типизация пропсов----\r\ntype PropsType = {\r\n  setAlertMessage: (data: string | null) => void;\r\n  alertMessage: string | null;\r\n};\r\n//-------------------------\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nconst AlertMessage: React.FC<PropsType> = ({\r\n  setAlertMessage,\r\n  alertMessage,\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Alert\r\n      severity=\"error\"\r\n      onClose={() => {\r\n        setAlertMessage(null);\r\n      }}\r\n    >\r\n      {alertMessage}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default AlertMessage;\r\n","D:\\Fullstack\\online-store\\client\\src\\pages\\ProfileDevice.tsx",["148","149","150","151"],"import React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { RootStateType } from '../store/store'; // типизация всего стейта( для типизации state)\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Box, Container } from '@material-ui/core';\r\nimport { getSelectedDevice } from '../action/deviceAction';\r\nimport { DeviceType, InfoType } from '../store/reducer/deviceReducer';\r\nimport { ROOT_URL } from '../constants/url';\r\nimport ImageList from '../components/ImageList';\r\nimport ActiveLastBreadcrumb from '../components/ActiveLastBreadcrumb';\r\nimport { connect } from 'react-redux';\r\n\r\n//типизация---------------------------------------------------------------------\r\ntype MapStateToPropsType = {\r\n  selectedDevice: DeviceType;\r\n};\r\ntype MapDispathPropsType = {\r\n  getSelectedDevice: (id: string) => void;\r\n};\r\ntype PropsType = MapStateToPropsType & MapDispathPropsType;\r\ntype ParamsType = {\r\n  id: string;\r\n};\r\n//-----------------------------------------------------------------\r\nconst useStyles = makeStyles((theme) => ({\r\n  breadcrumb: {\r\n    marginTop: 15,\r\n  },\r\n  grid_container: {\r\n    marginTop: 25,\r\n  },\r\n  name: {\r\n    fontSize: '1.2rem',\r\n    '@media (min-width:600px)': {\r\n      fontSize: '1.5rem',\r\n    },\r\n    [theme.breakpoints.up('md')]: {\r\n      fontSize: '2rem',\r\n    },\r\n    marginTop: 35,\r\n  },\r\n  listImage: {\r\n    display: 'flex',\r\n    flexWrap: 'nowrap',\r\n    overflow: 'auto',\r\n    marginTop: 5,\r\n    padding: 5,\r\n  },\r\n  image: {\r\n    height: 50,\r\n    width: 'auto',\r\n    margin: 5,\r\n    cursor: 'pointer',\r\n  },\r\n}));\r\n\r\nconst ProfileDevice: React.FC<PropsType> = ({\r\n  getSelectedDevice,\r\n  selectedDevice,\r\n}) => {\r\n  const classes = useStyles();\r\n  const { id } = useParams<ParamsType>(); //  хук роутера ,который помогает получить значение params\r\n  console.log(selectedDevice);\r\n  useEffect(() => {\r\n    getSelectedDevice(id);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  const { name, picture, price, info } = selectedDevice;\r\n\r\n  let params: InfoType[];\r\n  info ? (params = [...info]) : (params = []);\r\n  //console.log(params[0]);\r\n  let image: string[];\r\n  picture ? (image = [...picture]) : (image = []);\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Box className={classes.breadcrumb}>\r\n        <ActiveLastBreadcrumb name={name} />\r\n      </Box>\r\n      <Typography className={classes.name} variant=\"h3\">\r\n        {name}\r\n      </Typography>\r\n      <Grid container spacing={2} className={classes.grid_container}>\r\n        <Grid item xs={12} sm={4}>\r\n          <ImageList image={image} />\r\n        </Grid>\r\n        <Grid item xs={12} sm={5}></Grid>\r\n        <Grid item xs={12} sm={2}></Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n  return {\r\n    selectedDevice: state.devices.selectedDevice,\r\n  };\r\n};\r\nexport default connect<\r\n  MapStateToPropsType,\r\n  MapDispathPropsType,\r\n  unknown, // первичные пропсы\r\n  RootStateType\r\n>(mapStateToProps, { getSelectedDevice })(ProfileDevice);\r\n","D:\\Fullstack\\online-store\\client\\src\\components\\ImageList.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\components\\Footer.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\components\\ActiveLastBreadcrumb.tsx",[],{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","replacedBy":"155"},{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","severity":1,"message":"157","line":3,"column":8,"nodeType":"158","messageId":"159","endLine":3,"endColumn":12},{"ruleId":"156","severity":1,"message":"160","line":2,"column":25,"nodeType":"158","messageId":"159","endLine":2,"endColumn":33},{"ruleId":"161","severity":1,"message":"162","line":43,"column":7,"nodeType":"163","endLine":49,"endColumn":9},{"ruleId":"156","severity":1,"message":"164","line":17,"column":7,"nodeType":"158","messageId":"159","endLine":17,"endColumn":16},{"ruleId":"156","severity":1,"message":"165","line":124,"column":13,"nodeType":"158","messageId":"159","endLine":124,"endColumn":21},{"ruleId":"156","severity":1,"message":"165","line":178,"column":13,"nodeType":"158","messageId":"159","endLine":178,"endColumn":21},{"ruleId":"156","severity":1,"message":"166","line":1,"column":17,"nodeType":"158","messageId":"159","endLine":1,"endColumn":25},{"ruleId":"156","severity":1,"message":"167","line":25,"column":9,"nodeType":"158","messageId":"159","endLine":25,"endColumn":16},{"ruleId":"156","severity":1,"message":"168","line":3,"column":22,"nodeType":"158","messageId":"159","endLine":3,"endColumn":27},{"ruleId":"156","severity":1,"message":"169","line":10,"column":10,"nodeType":"158","messageId":"159","endLine":10,"endColumn":18},{"ruleId":"156","severity":1,"message":"170","line":70,"column":26,"nodeType":"158","messageId":"159","endLine":70,"endColumn":31},{"ruleId":"156","severity":1,"message":"171","line":73,"column":34,"nodeType":"158","messageId":"159","endLine":73,"endColumn":40},"no-native-reassign",["172"],"no-negated-in-lhs",["173"],"@typescript-eslint/no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useStyles' is assigned a value but never used.","'response' is assigned a value but never used.","'useState' is defined but never used.","'classes' is assigned a value but never used.","'Theme' is defined but never used.","'ROOT_URL' is defined but never used.","'price' is assigned a value but never used.","'params' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]