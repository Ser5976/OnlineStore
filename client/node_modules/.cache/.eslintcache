[{"D:\\Fullstack\\online-store\\client\\src\\reportWebVitals.js":"1","D:\\Fullstack\\online-store\\client\\src\\index.tsx":"2","D:\\Fullstack\\online-store\\client\\src\\App.tsx":"3","D:\\Fullstack\\online-store\\client\\src\\components\\Header.tsx":"4","D:\\Fullstack\\online-store\\client\\src\\router\\MyRouter.tsx":"5","D:\\Fullstack\\online-store\\client\\src\\pages\\Content.tsx":"6","D:\\Fullstack\\online-store\\client\\src\\components\\Logout.tsx":"7","D:\\Fullstack\\online-store\\client\\src\\components\\TypeBar.tsx":"8","D:\\Fullstack\\online-store\\client\\src\\components\\Device.tsx":"9","D:\\Fullstack\\online-store\\client\\src\\store\\store.ts":"10","D:\\Fullstack\\online-store\\client\\src\\store\\reducer\\authReducer.ts":"11","D:\\Fullstack\\online-store\\client\\src\\pages\\AuthContainer.tsx":"12","D:\\Fullstack\\online-store\\client\\src\\action\\authAction.ts":"13","D:\\Fullstack\\online-store\\client\\src\\components\\Copyright.tsx":"14","D:\\Fullstack\\online-store\\client\\src\\components\\FormLogin.tsx":"15","D:\\Fullstack\\online-store\\client\\src\\constants\\url.ts":"16","D:\\Fullstack\\online-store\\client\\src\\components\\DeviceContainer.tsx":"17","D:\\Fullstack\\online-store\\client\\src\\store\\reducer\\deviceReducer.ts":"18","D:\\Fullstack\\online-store\\client\\src\\action\\deviceAction.ts":"19","D:\\Fullstack\\online-store\\client\\src\\pages\\AddDevicesContainer.tsx":"20","D:\\Fullstack\\online-store\\client\\src\\components\\DeviceData.tsx":"21","D:\\Fullstack\\online-store\\client\\src\\components\\DeviceProperty.tsx":"22","D:\\Fullstack\\online-store\\client\\src\\components\\DevicePicture.tsx":"23","D:\\Fullstack\\online-store\\client\\src\\components\\SaveDevice.tsx":"24"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"26"},{"size":578,"mtime":1635882955665,"results":"27","hashOfConfig":"26"},{"size":250,"mtime":1635081268369,"results":"28","hashOfConfig":"26"},{"size":4427,"mtime":1637504514978,"results":"29","hashOfConfig":"26"},{"size":847,"mtime":1637480737260,"results":"30","hashOfConfig":"26"},{"size":7494,"mtime":1637503810627,"results":"31","hashOfConfig":"26"},{"size":1958,"mtime":1636313847964,"results":"32","hashOfConfig":"26"},{"size":6494,"mtime":1637089059668,"results":"33","hashOfConfig":"26"},{"size":1663,"mtime":1637403983924,"results":"34","hashOfConfig":"26"},{"size":577,"mtime":1636569802182,"results":"35","hashOfConfig":"26"},{"size":2592,"mtime":1636311069632,"results":"36","hashOfConfig":"26"},{"size":4129,"mtime":1636396393919,"results":"37","hashOfConfig":"26"},{"size":2414,"mtime":1636312765156,"results":"38","hashOfConfig":"26"},{"size":472,"mtime":1635964667548,"results":"39","hashOfConfig":"26"},{"size":4318,"mtime":1636300420944,"results":"40","hashOfConfig":"26"},{"size":278,"mtime":1637504217882,"results":"41","hashOfConfig":"26"},{"size":1163,"mtime":1637089470525,"results":"42","hashOfConfig":"26"},{"size":7549,"mtime":1638127831607,"results":"43","hashOfConfig":"26"},{"size":3268,"mtime":1637504625950,"results":"44","hashOfConfig":"26"},{"size":6209,"mtime":1638612881485,"results":"45","hashOfConfig":"26"},{"size":7459,"mtime":1638612134410,"results":"46","hashOfConfig":"26"},{"size":5578,"mtime":1638626418261,"results":"47","hashOfConfig":"26"},{"size":4036,"mtime":1638612168447,"results":"48","hashOfConfig":"26"},{"size":1772,"mtime":1638612791187,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"rlz3tn",{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"55"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"55"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"55"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"55"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Fullstack\\online-store\\client\\src\\reportWebVitals.js",[],["104","105"],"D:\\Fullstack\\online-store\\client\\src\\index.tsx",[],["106","107"],"D:\\Fullstack\\online-store\\client\\src\\App.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\components\\Header.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\router\\MyRouter.tsx",["108"],"import React from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Header from '../components/Header';\r\nimport AuthContainer from '../pages/AuthContainer';\r\nimport Content from '../pages/Content';\r\nimport AddDevicesContainer from '../pages/AddDevicesContainer';\r\n\r\nconst MyRouter: React.FC = () => {\r\n  return (\r\n    <Grid container direction=\"column\">\r\n      <Header />\r\n      <Switch>\r\n        <Route component={Content} path=\"/\" exact />\r\n        <Route component={AuthContainer} path=\"/login\" exact />\r\n        <Route component={AuthContainer} path=\"/registration\" exact />\r\n        <Route\r\n          component={AddDevicesContainer}\r\n          path=\"/addDevicesContainer\"\r\n          exact\r\n        />\r\n      </Switch>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default MyRouter;\r\n","D:\\Fullstack\\online-store\\client\\src\\pages\\Content.tsx",["109"],"import React, { useEffect, useState } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Box } from '@material-ui/core';\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\nimport { useLocation, useHistory } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport PaginationItem from '@material-ui/lab/PaginationItem';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport TypeBar from '../components/TypeBar';\r\nimport DeviceContainer from '../components/DeviceContainer';\r\nimport { RootStateType } from '../store/store'; //типизиция всего стора\r\nimport {\r\n  setTypeId, //запись выбранного типа устройства\r\n  setBrandId, //запись выбранного  брэнда устройства\r\n} from '../store/reducer/deviceReducer';\r\nimport {\r\n  setTypeIdActionType,\r\n  setBrandIdActionType,\r\n} from '../store/reducer/deviceReducer'; // типизация экшенов\r\nimport { DeviceType, TypeDeviceType } from '../store/reducer/deviceReducer'; //типизация данных\r\nimport { getDevices, getTypes } from '../action/deviceAction'; //запрос на получение устройств  и типов устройств\r\nimport { connect } from 'react-redux';\r\n\r\n//типизация--------------------------------\r\ntype MapStateToPropsType = {\r\n  devices: DeviceType[];\r\n  types: TypeDeviceType[];\r\n  pageQty: number;\r\n  limit: number;\r\n  typeId: string | null;\r\n  brandId: string | null;\r\n  isLoadinDevice: boolean;\r\n  isFetchErrorDevice: boolean;\r\n  isLoadinTypes: boolean;\r\n  isFetchErrorTypes: boolean;\r\n};\r\ntype MapDispathPropsType = {\r\n  getDevices: (\r\n    typeId: string | null,\r\n    brandId: string | null,\r\n    limit: number,\r\n    page: number,\r\n    setPage: React.Dispatch<React.SetStateAction<number>>,\r\n    history: any\r\n  ) => void;\r\n  setTypeId: (data: string | null) => setTypeIdActionType;\r\n  setBrandId: (data: string | null) => setBrandIdActionType;\r\n};\r\n\r\ntype PropsType = MapDispathPropsType & MapStateToPropsType;\r\n//-----------------------------------------\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root: {\r\n      '& > *': {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      justifyContent: 'center',\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n    grid: {\r\n      width: '100%',\r\n      height: '100%',\r\n      overflow: 'auto',\r\n    },\r\n    textTitle: {\r\n      marginTop: '25px',\r\n    },\r\n  })\r\n);\r\n\r\nconst Content: React.FC<PropsType> = ({\r\n  getDevices,\r\n  setTypeId,\r\n  setBrandId,\r\n  devices,\r\n  types,\r\n  pageQty,\r\n  limit,\r\n  typeId,\r\n  brandId,\r\n  isLoadinDevice,\r\n  isFetchErrorDevice,\r\n  isLoadinTypes,\r\n  isFetchErrorTypes,\r\n}) => {\r\n  const classes = useStyles();\r\n  const searchPage = useLocation(); // для получения строки запроса\r\n  const history = useHistory(); //для изменения строки запроса\r\n  //console.log(search);\r\n  // пагинация, данные о текущей странице( по умолчанию: 1 или, если есть ,информация о текущей странице в адресной строке )\r\n  const [page, setPage] = useState(\r\n    parseInt(searchPage.search?.split('=')[1] || '1')\r\n  );\r\n  // изменения текущей страницы\r\n  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n    setPage(value);\r\n  };\r\n  // запрос на сервак для получения устройств(фильтруем устройства по типу и бренду,а также пагинация)\r\n  useEffect(() => {\r\n    getDevices(typeId, brandId, limit, page, setPage, history);\r\n    // eslint-disable-next-line\r\n  }, [typeId, brandId, page]);\r\n\r\n  console.log(devices);\r\n  return (\r\n    <Grid item container>\r\n      <Grid item xs={12} sm={2} className={classes.grid}>\r\n        {isFetchErrorTypes ? (\r\n          <Typography\r\n            align=\"center\"\r\n            color=\"error\"\r\n            className={classes.textTitle}\r\n          >\r\n            Что-то пошло не так!\r\n          </Typography>\r\n        ) : isLoadinTypes ? (\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            style={{ height: window.innerHeight - 65.6 }}\r\n          >\r\n            <CircularProgress />\r\n          </Box>\r\n        ) : types.length === 0 ? (\r\n          <Typography align=\"center\" className={classes.textTitle}>\r\n            Пока типов товаров нет!\r\n          </Typography>\r\n        ) : (\r\n          <TypeBar\r\n            types={types}\r\n            setTypeId={setTypeId}\r\n            setBrandId={setBrandId}\r\n          />\r\n        )}\r\n      </Grid>\r\n      <Grid item xs={12} sm={10}>\r\n        {isFetchErrorDevice ? (\r\n          <Typography\r\n            align=\"center\"\r\n            color=\"error\"\r\n            className={classes.textTitle}\r\n          >\r\n            Что-то пошло не так!\r\n          </Typography>\r\n        ) : isLoadinDevice ? (\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            style={{ height: window.innerHeight - 65.6 }}\r\n          >\r\n            <CircularProgress />\r\n          </Box>\r\n        ) : devices.length === 0 ? (\r\n          <Typography align=\"center\" className={classes.textTitle}>\r\n            Пока товаров нет!\r\n          </Typography>\r\n        ) : (\r\n          <>\r\n            <DeviceContainer devices={devices} />\r\n            {!!pageQty && (\r\n              <Pagination\r\n                className={classes.root}\r\n                count={pageQty}\r\n                page={page}\r\n                showFirstButton\r\n                showLastButton\r\n                onChange={handleChange}\r\n                // интегрируем роутер\r\n                renderItem={(item) => (\r\n                  <PaginationItem\r\n                    component={Link}\r\n                    to={`/?page=${item.page}`}\r\n                    {...item}\r\n                  />\r\n                )}\r\n              />\r\n            )}\r\n          </>\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n  return {\r\n    devices: state.devices.devices, //устройства\r\n    types: state.devices.types, //типы устройств\r\n    pageQty: state.devices.pageQty, //количества страниц\r\n    limit: state.devices.limit, //сколько устройств на странице\r\n    typeId: state.devices.typeId, // айдишник типа\r\n    brandId: state.devices.brandId, // айдишник брэнда\r\n    isLoadinDevice: state.devices.isLoadinDevice, //крутилка у стройств\r\n    isLoadinTypes: state.devices.isLoadinTypes, //крутилка типов\r\n    isFetchErrorDevice: state.devices.isFetchErrorDevice, //ошибка устройств\r\n    isFetchErrorTypes: state.devices.isFetchErrorTypes, //ошибка типов\r\n  };\r\n};\r\nexport default connect<\r\n  MapStateToPropsType,\r\n  MapDispathPropsType,\r\n  unknown, // личные пропсы\r\n  RootStateType\r\n>(mapStateToProps, {\r\n  getDevices,\r\n  setTypeId,\r\n  setBrandId,\r\n})(Content);\r\n","D:\\Fullstack\\online-store\\client\\src\\components\\Logout.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\components\\TypeBar.tsx",["110"],"import React, { useState } from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport {\r\n  TypeDeviceType,\r\n  setTypeIdActionType,\r\n  setBrandIdActionType,\r\n} from '../store/reducer/deviceReducer'; //типизация\r\n\r\n//----типизация пропсов----\r\ntype PropsType = {\r\n  types: TypeDeviceType[];\r\n  setTypeId: (data: string | null) => setTypeIdActionType;\r\n  setBrandId: (data: string | null) => setBrandIdActionType;\r\n};\r\n//-------------------------\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    marginTop: 20,\r\n    padding: '0px 5px',\r\n  },\r\n  listType: { paddingLeft: theme.spacing(5) },\r\n  activListType: { paddingLeft: theme.spacing(5), backgroundColor: '#e0e0e0' },\r\n  listBrand: {\r\n    paddingLeft: theme.spacing(9),\r\n    color: '#9e9e9e',\r\n  },\r\n  activListBrand: {\r\n    color: theme.palette.primary.main,\r\n  },\r\n}));\r\n\r\nconst TypeBar: React.FC<PropsType> = ({ types, setTypeId, setBrandId }) => {\r\n  const classes = useStyles();\r\n  //создаём объект с булевыми значениями для управления элементами списка(открытие закрытие)(чтобы реагировать на каждый элемент)\r\n  let objType = {} as any;\r\n  for (let i = 0; i < types.length; i++) {\r\n    objType[i] = false;\r\n    // console.log(objType);\r\n  }\r\n\r\n  const [open, setOpen] = useState(objType); // открытие вложенного списа\r\n  const [activType, setActivType] = useState<null | number>(null); // выделение типа\r\n  const [activBrand, setActivBrand] = useState<null | string>(null); //выделение бренда\r\n  const [allDevice, setAllDevice] = useState(true); //выделение всех товаров\r\n  // console.log(open);\r\n  // выбор типа,открытие  вложенного спиская,снятие выбранного брэнда\r\n  const handleType = (index: number) => {\r\n    setActivType(index);\r\n    setOpen({ ...open, [index]: !open[index] }); //изменяем булевое значение для каждого элемента\r\n    setActivBrand(null); // снятие выбранного бренда\r\n  }; // выбор брэнда\r\n  const handleBrand = (id: string, index: number) => {\r\n    setActivBrand(id);\r\n    setActivType(index);\r\n  };\r\n\r\n  return (\r\n    <List component=\"nav\" className={classes.root}>\r\n      <ListItem\r\n        button\r\n        className={allDevice ? classes.activListType : classes.listType}\r\n        onClick={() => {\r\n          setTypeId(null); //удаление из стейта существующего типа\r\n          setBrandId(null); // удаление из стейта существующего брэнда\r\n          setOpen(objType); //закрытие списка\r\n          setActivType(null); //удаление выделения типа\r\n          setAllDevice(true); //выделение всех товаров\r\n        }}\r\n      >\r\n        <ListItemText\r\n          disableTypography\r\n          primary={\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              все товары\r\n            </Typography>\r\n          }\r\n        />\r\n      </ListItem>\r\n      <Divider />\r\n      {types.map((type, indexType) => {\r\n        return (\r\n          <div key={type._id}>\r\n            <ListItem\r\n              className={\r\n                activType === indexType\r\n                  ? classes.activListType\r\n                  : classes.listType\r\n              }\r\n              button\r\n              onClick={() => {\r\n                handleType(indexType); //управление типом\r\n                setTypeId(type._id); //запись в стейт выбранного типа\r\n                setBrandId(null); // удаление из стейта существующего брэнда\r\n                setAllDevice(false); // удаление выделения всех товаров\r\n              }}\r\n            >\r\n              <ListItemText\r\n                disableTypography\r\n                primary={\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    {type.name}\r\n                  </Typography>\r\n                }\r\n              />\r\n              {open[indexType] ? <ExpandLess /> : <ExpandMore />}\r\n            </ListItem>\r\n            <Divider />\r\n            <Collapse in={open[indexType]} timeout=\"auto\" unmountOnExit>\r\n              <List component=\"div\">\r\n                {type.brands.map((brand) => {\r\n                  return (\r\n                    <div key={brand._id}>\r\n                      <ListItem\r\n                        button\r\n                        className={classes.listBrand}\r\n                        onClick={() => {\r\n                          handleBrand(brand._id, indexType); //управление брэндом\r\n                          setTypeId(type._id); //запись в стейт выбранного типа\r\n                          setBrandId(brand._id); //запись в стейт выбранного брэнда\r\n                        }}\r\n                      >\r\n                        <ListItemText\r\n                          disableTypography\r\n                          className={\r\n                            activBrand === brand._id && activType === indexType\r\n                              ? classes.activListBrand\r\n                              : undefined\r\n                          }\r\n                          primary={\r\n                            <Typography variant=\"subtitle2\" gutterBottom>\r\n                              {brand.name}\r\n                            </Typography>\r\n                          }\r\n                        />\r\n                      </ListItem>\r\n                      <Divider />\r\n                    </div>\r\n                  );\r\n                })}\r\n              </List>\r\n            </Collapse>\r\n          </div>\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default TypeBar;\r\n","D:\\Fullstack\\online-store\\client\\src\\components\\Device.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\store\\store.ts",[],"D:\\Fullstack\\online-store\\client\\src\\store\\reducer\\authReducer.ts",[],"D:\\Fullstack\\online-store\\client\\src\\pages\\AuthContainer.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\action\\authAction.ts",[],"D:\\Fullstack\\online-store\\client\\src\\components\\Copyright.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\components\\FormLogin.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\constants\\url.ts",[],"D:\\Fullstack\\online-store\\client\\src\\components\\DeviceContainer.tsx",["111"],"import React from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Masonry from 'react-masonry-css'; // контейнерный компонент для стиля(расположение элементов)\r\nimport Device from './Device';\r\nimport { DeviceType } from '../store/reducer/deviceReducer';\r\n\r\n//----типизация пропсов----\r\ntype PropsType = {\r\n  devices: DeviceType[];\r\n};\r\n//-------------------------\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst breakpoints = {\r\n  default: 4,\r\n  1100: 2,\r\n  700: 1,\r\n}; // это для Masonry,компонент регулирет расположение карточек(отдельно установлен)\r\nconst DeviceContainer: React.FC<PropsType> = ({ devices }) => {\r\n  return (\r\n    <Masonry\r\n      breakpointCols={breakpoints}\r\n      className=\"my-masonry-grid\"\r\n      columnClassName=\"my-masonry-grid_column\"\r\n    >\r\n      {devices.map((item) => {\r\n        return <Device item={item} key={Math.random()} />;\r\n      })}\r\n    </Masonry>\r\n  );\r\n};\r\n\r\nexport default DeviceContainer;\r\n","D:\\Fullstack\\online-store\\client\\src\\store\\reducer\\deviceReducer.ts",[],"D:\\Fullstack\\online-store\\client\\src\\action\\deviceAction.ts",[],"D:\\Fullstack\\online-store\\client\\src\\pages\\AddDevicesContainer.tsx",["112"],"D:\\Fullstack\\online-store\\client\\src\\components\\DeviceData.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\components\\DeviceProperty.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\components\\DevicePicture.tsx",[],"D:\\Fullstack\\online-store\\client\\src\\components\\SaveDevice.tsx",["113","114","115","116","117","118","119","120","121","122","123","124","125"],{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":2,"column":25,"nodeType":"132","messageId":"133","endLine":2,"endColumn":33},{"ruleId":"130","severity":1,"message":"134","line":23,"column":22,"nodeType":"132","messageId":"133","endLine":23,"endColumn":30},{"ruleId":"130","severity":1,"message":"135","line":3,"column":8,"nodeType":"132","messageId":"133","endLine":3,"endColumn":12},{"ruleId":"130","severity":1,"message":"136","line":13,"column":7,"nodeType":"132","messageId":"133","endLine":13,"endColumn":16},{"ruleId":"130","severity":1,"message":"137","line":3,"column":8,"nodeType":"132","messageId":"133","endLine":3,"endColumn":13},{"ruleId":"130","severity":1,"message":"138","line":2,"column":10,"nodeType":"132","messageId":"133","endLine":2,"endColumn":17},{"ruleId":"130","severity":1,"message":"139","line":2,"column":19,"nodeType":"132","messageId":"133","endLine":2,"endColumn":32},{"ruleId":"130","severity":1,"message":"140","line":2,"column":34,"nodeType":"132","messageId":"133","endLine":2,"endColumn":44},{"ruleId":"130","severity":1,"message":"141","line":4,"column":8,"nodeType":"132","messageId":"133","endLine":4,"endColumn":18},{"ruleId":"130","severity":1,"message":"142","line":5,"column":8,"nodeType":"132","messageId":"133","endLine":5,"endColumn":29},{"ruleId":"130","severity":1,"message":"143","line":6,"column":8,"nodeType":"132","messageId":"133","endLine":6,"endColumn":26},{"ruleId":"130","severity":1,"message":"144","line":7,"column":8,"nodeType":"132","messageId":"133","endLine":7,"endColumn":24},{"ruleId":"130","severity":1,"message":"145","line":8,"column":8,"nodeType":"132","messageId":"133","endLine":8,"endColumn":17},{"ruleId":"130","severity":1,"message":"146","line":9,"column":10,"nodeType":"132","messageId":"133","endLine":9,"endColumn":21},{"ruleId":"130","severity":1,"message":"147","line":10,"column":13,"nodeType":"132","messageId":"133","endLine":10,"endColumn":16},{"ruleId":"130","severity":1,"message":"135","line":11,"column":8,"nodeType":"132","messageId":"133","endLine":11,"endColumn":12},{"ruleId":"130","severity":1,"message":"148","line":12,"column":8,"nodeType":"132","messageId":"133","endLine":12,"endColumn":14},{"ruleId":"130","severity":1,"message":"149","line":45,"column":9,"nodeType":"132","messageId":"133","endLine":45,"endColumn":16},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'getTypes' is defined but never used.","'Grid' is defined but never used.","'useStyles' is assigned a value but never used.","'Paper' is defined but never used.","'useForm' is defined but never used.","'useFieldArray' is defined but never used.","'Controller' is defined but never used.","'IconButton' is defined but never used.","'ArrowForwardSharpIcon' is defined but never used.","'ArrowBackSharpIcon' is defined but never used.","'HighlightOffIcon' is defined but never used.","'TextField' is defined but never used.","'yupResolver' is defined but never used.","'yup' is defined but never used.","'Button' is defined but never used.","'classes' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]