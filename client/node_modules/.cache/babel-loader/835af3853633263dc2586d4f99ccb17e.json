{"ast":null,"code":"import { setIsLoadinDevice, //крутилка для устройств\nsetIsLoadinTypes, //крутилка для типов\nsetFetchErrorDevice, //ошибка для устройств\nsetFetchErrorTypes //ошибка для типов\n} from './../store/reducer/deviceReducer';\nimport axios from 'axios';\n//типизация всего стора\nimport { ModelUrls } from '../constants/url';\n//типизация экшенов устройств\nimport { setDevices, // запись устройств в стейт\nsetTypes, // запись типов в стейт\nsetPageQty // запись количества страниц в стейт\n} from '../store/reducer/deviceReducer'; // типизация санки\n\n// получение выбранных устройств и запись в стейт\nexport const getDevices = (typeId, brandId, limit, page, setPage, history) => {\n  return async dispatch => {\n    try {\n      dispatch(setIsLoadinDevice(true));\n      const response = await axios.get(`${ModelUrls.DEVICES}`, {\n        params: {\n          typeId,\n          brandId,\n          limit,\n          page\n        }\n      });\n      console.log(response); //если число страниц меньше активной страницы,текущую страницу ставим 1\n\n      if (response.data.pageQty < page) {\n        setPage(1); //записываем текущую страницу в локальный стейт,(в Content)\n\n        history.replace('/');\n      } //запись в стейт\n\n\n      dispatch(setDevices(response.data.device));\n      dispatch(setPageQty(response.data.pageQty));\n    } catch (e) {\n      console.log(e);\n      dispatch(setFetchErrorDevice(true));\n      dispatch(setIsLoadinDevice(false));\n    }\n  };\n}; // получение выбранных устройств и запись в стейт\n\nexport const getTypes = () => {\n  return async dispatch => {\n    try {\n      dispatch(setIsLoadinTypes(true));\n      const response = await axios.get(ModelUrls.TYPES);\n      console.log(response); //запись в стейт\n\n      dispatch(setTypes(response.data));\n    } catch (e) {\n      console.log(e);\n      dispatch(setFetchErrorTypes(true));\n      dispatch(setIsLoadinTypes(false));\n    }\n  };\n};","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/action/deviceAction.ts"],"names":["setIsLoadinDevice","setIsLoadinTypes","setFetchErrorDevice","setFetchErrorTypes","axios","ModelUrls","setDevices","setTypes","setPageQty","getDevices","typeId","brandId","limit","page","setPage","history","dispatch","response","get","DEVICES","params","console","log","data","pageQty","replace","device","e","getTypes","TYPES"],"mappings":"AAAA,SACEA,iBADF,EACqB;AACnBC,gBAFF,EAEoB;AAClBC,mBAHF,EAGuB;AACrBC,kBAJF,CAIsB;AAJtB,OAKO,kCALP;AAMA,OAAOC,KAAP,MAAkB,OAAlB;AAEgD;AAChD,SAASC,SAAT,QAA0B,kBAA1B;AACkE;AAClE,SACEC,UADF,EACc;AACZC,QAFF,EAEY;AACVC,UAHF,CAGc;AAHd,OAIO,gCAJP,C,CAMA;;AAOA;AACA,OAAO,MAAMC,UAAU,GAAG,CACxBC,MADwB,EAExBC,OAFwB,EAGxBC,KAHwB,EAIxBC,IAJwB,EAKxBC,OALwB,EAMxBC,OANwB,KAOV;AACd,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACFA,MAAAA,QAAQ,CAAChB,iBAAiB,CAAC,IAAD,CAAlB,CAAR;AACA,YAAMiB,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAW,GAAEb,SAAS,CAACc,OAAQ,EAA/B,EAAkC;AACvDC,QAAAA,MAAM,EAAE;AACNV,UAAAA,MADM;AAENC,UAAAA,OAFM;AAGNC,UAAAA,KAHM;AAINC,UAAAA;AAJM;AAD+C,OAAlC,CAAvB;AAQAQ,MAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ,EAVE,CAWF;;AACA,UAAIA,QAAQ,CAACM,IAAT,CAAcC,OAAd,GAAwBX,IAA5B,EAAkC;AAChCC,QAAAA,OAAO,CAAC,CAAD,CAAP,CADgC,CACpB;;AACZC,QAAAA,OAAO,CAACU,OAAR,CAAgB,GAAhB;AACD,OAfC,CAgBF;;;AACAT,MAAAA,QAAQ,CAACV,UAAU,CAACW,QAAQ,CAACM,IAAT,CAAcG,MAAf,CAAX,CAAR;AACAV,MAAAA,QAAQ,CAACR,UAAU,CAACS,QAAQ,CAACM,IAAT,CAAcC,OAAf,CAAX,CAAR;AACD,KAnBD,CAmBE,OAAOG,CAAP,EAAU;AACVN,MAAAA,OAAO,CAACC,GAAR,CAAYK,CAAZ;AACAX,MAAAA,QAAQ,CAACd,mBAAmB,CAAC,IAAD,CAApB,CAAR;AACAc,MAAAA,QAAQ,CAAChB,iBAAiB,CAAC,KAAD,CAAlB,CAAR;AACD;AACF,GAzBD;AA0BD,CAlCM,C,CAmCP;;AACA,OAAO,MAAM4B,QAAQ,GAAG,MAAiB;AACvC,SAAO,MAAOZ,QAAP,IAAoB;AACzB,QAAI;AACFA,MAAAA,QAAQ,CAACf,gBAAgB,CAAC,IAAD,CAAjB,CAAR;AACA,YAAMgB,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUb,SAAS,CAACwB,KAApB,CAAvB;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ,EAHE,CAIF;;AACAD,MAAAA,QAAQ,CAACT,QAAQ,CAACU,QAAQ,CAACM,IAAV,CAAT,CAAR;AACD,KAND,CAME,OAAOI,CAAP,EAAU;AACVN,MAAAA,OAAO,CAACC,GAAR,CAAYK,CAAZ;AACAX,MAAAA,QAAQ,CAACb,kBAAkB,CAAC,IAAD,CAAnB,CAAR;AACAa,MAAAA,QAAQ,CAACf,gBAAgB,CAAC,KAAD,CAAjB,CAAR;AACD;AACF,GAZD;AAaD,CAdM","sourcesContent":["import {\r\n  setIsLoadinDevice, //крутилка для устройств\r\n  setIsLoadinTypes, //крутилка для типов\r\n  setFetchErrorDevice, //ошибка для устройств\r\n  setFetchErrorTypes, //ошибка для типов\r\n} from './../store/reducer/deviceReducer';\r\nimport axios from 'axios';\r\nimport { ThunkAction } from 'redux-thunk'; // для типизации санки\r\nimport { RootStateType } from '../store/store'; //типизация всего стора\r\nimport { ModelUrls } from '../constants/url';\r\nimport { DeviceAtionType } from '../store/reducer/deviceReducer'; //типизация экшенов устройств\r\nimport {\r\n  setDevices, // запись устройств в стейт\r\n  setTypes, // запись типов в стейт\r\n  setPageQty, // запись количества страниц в стейт\r\n} from '../store/reducer/deviceReducer';\r\n\r\n// типизация санки\r\nexport type ThunkType = ThunkAction<\r\n  Promise<void>,\r\n  RootStateType,\r\n  unknown, //extraArgument\r\n  DeviceAtionType\r\n>;\r\n// получение выбранных устройств и запись в стейт\r\nexport const getDevices = (\r\n  typeId: string | null,\r\n  brandId: string | null,\r\n  limit: number,\r\n  page: number,\r\n  setPage: React.Dispatch<React.SetStateAction<number>>,\r\n  history: any\r\n): ThunkType => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch(setIsLoadinDevice(true));\r\n      const response = await axios.get(`${ModelUrls.DEVICES}`, {\r\n        params: {\r\n          typeId,\r\n          brandId,\r\n          limit,\r\n          page,\r\n        },\r\n      });\r\n      console.log(response);\r\n      //если число страниц меньше активной страницы,текущую страницу ставим 1\r\n      if (response.data.pageQty < page) {\r\n        setPage(1); //записываем текущую страницу в локальный стейт,(в Content)\r\n        history.replace('/');\r\n      }\r\n      //запись в стейт\r\n      dispatch(setDevices(response.data.device));\r\n      dispatch(setPageQty(response.data.pageQty));\r\n    } catch (e) {\r\n      console.log(e);\r\n      dispatch(setFetchErrorDevice(true));\r\n      dispatch(setIsLoadinDevice(false));\r\n    }\r\n  };\r\n};\r\n// получение выбранных устройств и запись в стейт\r\nexport const getTypes = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch(setIsLoadinTypes(true));\r\n      const response = await axios.get(ModelUrls.TYPES);\r\n      console.log(response);\r\n      //запись в стейт\r\n      dispatch(setTypes(response.data));\r\n    } catch (e) {\r\n      console.log(e);\r\n      dispatch(setFetchErrorTypes(true));\r\n      dispatch(setIsLoadinTypes(false));\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}