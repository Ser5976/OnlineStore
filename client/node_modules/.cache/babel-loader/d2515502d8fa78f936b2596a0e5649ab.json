{"ast":null,"code":"const SET_DEVICES = 'SET_DEVICES';\nconst SET_TYPES = 'SET_TYPE';\nconst SET_BRANDS = 'SET_BRANDS';\nconst SET_PAGE_QTY = 'SET_PAGE_QTY';\nconst SET_TYPE_ID = 'SET_TYPE_ID';\nconst SET_BRAND_ID = 'SET_BRAND_ID'; //типизация--------------------------------\n//----------стейта-------------------------\n\n//-----------------------------------------\nconst initialState = {\n  devices: [],\n  //массив устройств\n  types: [],\n  //массив типов устройств\n  brands: [],\n  // массив брэндов устройств\n  //---пагинация----\n  pageQty: 0,\n  // общее количество страниц(для пагинации)\n  limit: 3,\n  // количество устройств на станице\n  //----для фильтрации---\n  typeId: null,\n  // выбранный тип устройства\n  brandId: null // выбранный брэнд устройства\n\n};\nexport const deviceReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_DEVICES:\n      return { ...state,\n        devices: action.payload\n      };\n\n    case SET_TYPES:\n      return { ...state,\n        types: action.payload\n      };\n\n    case SET_BRANDS:\n      return { ...state,\n        brands: action.payload\n      };\n\n    case SET_PAGE_QTY:\n      return { ...state,\n        pageQty: action.payload\n      };\n\n    case SET_TYPE_ID:\n      return { ...state,\n        typeId: action.payload\n      };\n\n    case SET_BRAND_ID:\n      return { ...state,\n        brandId: action.payload\n      };\n\n    default:\n      return state;\n  }\n}; // записывает устройства\n\nexport const setDevices = data => ({\n  type: SET_DEVICES,\n  payload: data\n}); // записываем общее количество страниц (вычисляем на бэке,для пагинации)\n\nexport const setPageQty = data => ({\n  type: SET_PAGE_QTY,\n  payload: data\n}); // записываем типы устройств\n\nexport const setTypes = data => ({\n  type: SET_TYPES,\n  payload: data\n}); // записываем бренды устройств\n\nexport const setBrands = data => ({\n  type: SET_BRANDS,\n  payload: data\n}); // записываем выбранный тип\n\nexport const setTypeId = data => ({\n  type: SET_TYPE_ID,\n  payload: data\n}); // записываем выбранный брэнд\n\nexport const setBrandId = data => ({\n  type: SET_BRAND_ID,\n  payload: data\n});","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/store/reducer/deviceReducer.ts"],"names":["SET_DEVICES","SET_TYPES","SET_BRANDS","SET_PAGE_QTY","SET_TYPE_ID","SET_BRAND_ID","initialState","devices","types","brands","pageQty","limit","typeId","brandId","deviceReducer","state","action","type","payload","setDevices","data","setPageQty","setTypes","setBrands","setTypeId","setBrandId"],"mappings":"AAAA,MAAMA,WAAW,GAAG,aAApB;AACA,MAAMC,SAAS,GAAG,UAAlB;AACA,MAAMC,UAAU,GAAG,YAAnB;AACA,MAAMC,YAAY,GAAG,cAArB;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,YAAY,GAAG,cAArB,C,CAEA;AACA;;AA2EA;AAEA,MAAMC,YAA8B,GAAG;AACrCC,EAAAA,OAAO,EAAE,EAD4B;AACxB;AACbC,EAAAA,KAAK,EAAE,EAF8B;AAE1B;AACXC,EAAAA,MAAM,EAAE,EAH6B;AAGzB;AACZ;AACAC,EAAAA,OAAO,EAAE,CAL4B;AAKzB;AACZC,EAAAA,KAAK,EAAE,CAN8B;AAM3B;AACV;AACAC,EAAAA,MAAM,EAAE,IAR6B;AAQvB;AACdC,EAAAA,OAAO,EAAE,IAT4B,CAStB;;AATsB,CAAvC;AAYA,OAAO,MAAMC,aAAa,GAAG,CAC3BC,KAAK,GAAGT,YADmB,EAE3BU,MAF2B,KAGxB;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKjB,WAAL;AACE,aAAO,EACL,GAAGe,KADE;AAELR,QAAAA,OAAO,EAAES,MAAM,CAACE;AAFX,OAAP;;AAIF,SAAKjB,SAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELP,QAAAA,KAAK,EAAEQ,MAAM,CAACE;AAFT,OAAP;;AAIF,SAAKhB,UAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELN,QAAAA,MAAM,EAAEO,MAAM,CAACE;AAFV,OAAP;;AAIF,SAAKf,YAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELL,QAAAA,OAAO,EAAEM,MAAM,CAACE;AAFX,OAAP;;AAIF,SAAKd,WAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELH,QAAAA,MAAM,EAAEI,MAAM,CAACE;AAFV,OAAP;;AAIF,SAAKb,YAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELF,QAAAA,OAAO,EAAEG,MAAM,CAACE;AAFX,OAAP;;AAKF;AACE,aAAOH,KAAP;AAjCJ;AAmCD,CAvCM,C,CAwCP;;AACA,OAAO,MAAMI,UAAU,GAAIC,IAAD,KAA+C;AACvEH,EAAAA,IAAI,EAAEjB,WADiE;AAEvEkB,EAAAA,OAAO,EAAEE;AAF8D,CAA/C,CAAnB,C,CAIP;;AACA,OAAO,MAAMC,UAAU,GAAID,IAAD,KAAyC;AACjEH,EAAAA,IAAI,EAAEd,YAD2D;AAEjEe,EAAAA,OAAO,EAAEE;AAFwD,CAAzC,CAAnB,C,CAIP;;AACA,OAAO,MAAME,QAAQ,GAAIF,IAAD,KAAiD;AACvEH,EAAAA,IAAI,EAAEhB,SADiE;AAEvEiB,EAAAA,OAAO,EAAEE;AAF8D,CAAjD,CAAjB,C,CAIP;;AACA,OAAO,MAAMG,SAAS,GAAIH,IAAD,KAA6C;AACpEH,EAAAA,IAAI,EAAEf,UAD8D;AAEpEgB,EAAAA,OAAO,EAAEE;AAF2D,CAA7C,CAAlB,C,CAIP;;AACA,OAAO,MAAMI,SAAS,GAAIJ,IAAD,KAA+C;AACtEH,EAAAA,IAAI,EAAEb,WADgE;AAEtEc,EAAAA,OAAO,EAAEE;AAF6D,CAA/C,CAAlB,C,CAIP;;AACA,OAAO,MAAMK,UAAU,GAAIL,IAAD,KAAgD;AACxEH,EAAAA,IAAI,EAAEZ,YADkE;AAExEa,EAAAA,OAAO,EAAEE;AAF+D,CAAhD,CAAnB","sourcesContent":["const SET_DEVICES = 'SET_DEVICES';\r\nconst SET_TYPES = 'SET_TYPE';\r\nconst SET_BRANDS = 'SET_BRANDS';\r\nconst SET_PAGE_QTY = 'SET_PAGE_QTY';\r\nconst SET_TYPE_ID = 'SET_TYPE_ID';\r\nconst SET_BRAND_ID = 'SET_BRAND_ID';\r\n\r\n//типизация--------------------------------\r\n//----------стейта-------------------------\r\nexport type Brands = {\r\n  _id: string;\r\n  name: string;\r\n  __v: number;\r\n};\r\nexport type TypeDeviceType = {\r\n  _id: string;\r\n  name: string;\r\n  brands: Brands[];\r\n  __v: number;\r\n};\r\nexport type InfoType = {\r\n  title: string;\r\n  discription: string;\r\n  __v: number;\r\n};\r\nexport type DeviceType = {\r\n  _id: string;\r\n  name: string;\r\n  price: number;\r\n  picture: string;\r\n  info: InfoType[];\r\n  typeId: string;\r\n  brandId: string;\r\n  __v: number;\r\n};\r\nexport type BrandType = {\r\n  _id: string;\r\n  name: string;\r\n  __v: number;\r\n};\r\n\r\nexport type InitialStateType = {\r\n  devices: DeviceType[];\r\n  brands: BrandType[];\r\n  types: TypeDeviceType[];\r\n  pageQty: number;\r\n  limit: number;\r\n  typeId: string | null;\r\n  brandId: string | null;\r\n};\r\n//------- action---------------------------\r\nexport type setDevicesActionType = {\r\n  type: typeof SET_DEVICES;\r\n  payload: DeviceType[];\r\n};\r\nexport type setTypesActionType = {\r\n  type: typeof SET_TYPES;\r\n  payload: TypeDeviceType[];\r\n};\r\nexport type setBrandsActionType = {\r\n  type: typeof SET_BRANDS;\r\n  payload: BrandType[];\r\n};\r\nexport type setPageQtyActionType = {\r\n  type: typeof SET_PAGE_QTY;\r\n  payload: number;\r\n};\r\nexport type setTypeIdActionType = {\r\n  type: typeof SET_TYPE_ID;\r\n  payload: string | null;\r\n};\r\nexport type setBrandIdActionType = {\r\n  type: typeof SET_BRAND_ID;\r\n  payload: string | null;\r\n};\r\nexport type DeviceAtionType =\r\n  | setDevicesActionType\r\n  | setTypesActionType\r\n  | setBrandsActionType\r\n  | setPageQtyActionType\r\n  | setTypeIdActionType\r\n  | setBrandIdActionType;\r\n\r\n//-----------------------------------------\r\n\r\nconst initialState: InitialStateType = {\r\n  devices: [], //массив устройств\r\n  types: [], //массив типов устройств\r\n  brands: [], // массив брэндов устройств\r\n  //---пагинация----\r\n  pageQty: 0, // общее количество страниц(для пагинации)\r\n  limit: 3, // количество устройств на станице\r\n  //----для фильтрации---\r\n  typeId: null, // выбранный тип устройства\r\n  brandId: null, // выбранный брэнд устройства\r\n};\r\n\r\nexport const deviceReducer = (\r\n  state = initialState,\r\n  action: DeviceAtionType\r\n) => {\r\n  switch (action.type) {\r\n    case SET_DEVICES:\r\n      return {\r\n        ...state,\r\n        devices: action.payload,\r\n      };\r\n    case SET_TYPES:\r\n      return {\r\n        ...state,\r\n        types: action.payload,\r\n      };\r\n    case SET_BRANDS:\r\n      return {\r\n        ...state,\r\n        brands: action.payload,\r\n      };\r\n    case SET_PAGE_QTY:\r\n      return {\r\n        ...state,\r\n        pageQty: action.payload,\r\n      };\r\n    case SET_TYPE_ID:\r\n      return {\r\n        ...state,\r\n        typeId: action.payload,\r\n      };\r\n    case SET_BRAND_ID:\r\n      return {\r\n        ...state,\r\n        brandId: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// записывает устройства\r\nexport const setDevices = (data: DeviceType[]): setDevicesActionType => ({\r\n  type: SET_DEVICES,\r\n  payload: data,\r\n});\r\n// записываем общее количество страниц (вычисляем на бэке,для пагинации)\r\nexport const setPageQty = (data: number): setPageQtyActionType => ({\r\n  type: SET_PAGE_QTY,\r\n  payload: data,\r\n});\r\n// записываем типы устройств\r\nexport const setTypes = (data: TypeDeviceType[]): setTypesActionType => ({\r\n  type: SET_TYPES,\r\n  payload: data,\r\n});\r\n// записываем бренды устройств\r\nexport const setBrands = (data: BrandType[]): setBrandsActionType => ({\r\n  type: SET_BRANDS,\r\n  payload: data,\r\n});\r\n// записываем выбранный тип\r\nexport const setTypeId = (data: string | null): setTypeIdActionType => ({\r\n  type: SET_TYPE_ID,\r\n  payload: data,\r\n});\r\n// записываем выбранный брэнд\r\nexport const setBrandId = (data: string | null): setBrandIdActionType => ({\r\n  type: SET_BRAND_ID,\r\n  payload: data,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}