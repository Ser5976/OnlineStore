{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\pages\\\\ProfileDevice.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\n// типизация всего стейта( для типизации state)\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Box, Container, Button } from '@material-ui/core';\nimport { getSelectedDevice } from '../action/deviceAction';\nimport ImageList from '../components/ImageList';\nimport ActiveLastBreadcrumb from '../components/ActiveLastBreadcrumb';\nimport { connect } from 'react-redux'; //типизация---------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n//-----------------------------------------------------------------\nconst useStyles = makeStyles(theme => ({\n  breadcrumb: {\n    marginTop: 15\n  },\n  grid_container: {\n    marginTop: 25\n  },\n  name: {\n    fontSize: '1.2rem',\n    '@media (min-width:600px)': {\n      fontSize: '1.5rem'\n    },\n    [theme.breakpoints.up('md')]: {\n      fontSize: '2rem'\n    },\n    marginTop: 35\n  },\n  listImage: {\n    display: 'flex',\n    flexWrap: 'nowrap',\n    overflow: 'auto',\n    marginTop: 5,\n    padding: 5\n  },\n  image: {\n    height: 50,\n    width: 'auto',\n    margin: 5,\n    cursor: 'pointer'\n  },\n  italic: {\n    fontStyle: 'italic'\n  },\n  bold: {\n    fontWeight: 'bold'\n  },\n  textTitle: {\n    marginTop: '25px'\n  }\n}));\n\nconst ProfileDevice = ({\n  getSelectedDevice,\n  selectedDevice,\n  isFetchErrorSelectedDevice,\n  isLoadinSelectedDevice\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    id\n  } = useParams(); //  хук роутера ,который помогает получить значение params\n\n  console.log(selectedDevice);\n  useEffect(() => {\n    getSelectedDevice(id); // eslint-disable-next-line\n  }, []);\n  const {\n    name,\n    picture,\n    price,\n    info\n  } = selectedDevice;\n  let params;\n  info ? params = [...info] : params = []; //console.log(params[0]);\n\n  let image;\n  picture ? image = [...picture] : image = [];\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: classes.breadcrumb,\n      children: /*#__PURE__*/_jsxDEV(ActiveLastBreadcrumb, {\n        name: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), isFetchErrorSelectedDevice ? /*#__PURE__*/_jsxDEV(Typography, {\n      align: \"center\",\n      color: \"error\",\n      className: classes.textTitle,\n      children: \"\\u0427\\u0442\\u043E-\\u0442\\u043E \\u043F\\u043E\\u0448\\u043B\\u043E \\u043D\\u0435 \\u0442\\u0430\\u043A!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this) : isLoadinSelectedDevice ? /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      style: {\n        height: window.innerHeight - 65.6\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.name,\n        variant: \"h3\",\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        className: classes.grid_container,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          children: [/*#__PURE__*/_jsxDEV(ImageList, {\n            image: image\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            component: \"h6\",\n            align: \"center\",\n            className: classes.bold,\n            children: [\"\\u0426\\u0435\\u043D\\u0430: \", price, \" p\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            style: {\n              marginTop: '25px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                color: \"primary\",\n                fullWidth: true,\n                style: {\n                  marginBottom: 15,\n                  fontSize: 12\n                },\n                onClick: () => {},\n                children: \"\\u041A\\u0443\\u043F\\u0438\\u0442\\u044C\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                color: \"primary\",\n                fullWidth: true,\n                style: {\n                  marginBottom: 15,\n                  fontSize: 12\n                },\n                onClick: () => {},\n                children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0432 \\u043A\\u043E\\u0440\\u0437\\u0438\\u043D\\u0443\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          children: params.length !== 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              component: \"h6\",\n              align: \"center\",\n              children: \"\\u0425\\u0430\\u0440\\u0430\\u043A\\u0442\\u0435\\u0440\\u0438\\u0441\\u0442\\u0438\\u043A\\u0438\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 19\n            }, this), params.map((item, index) => {\n              return /*#__PURE__*/_jsxDEV(Typography, {\n                style: {\n                  marginLeft: '25px'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: classes.bold,\n                  children: item.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 25\n                }, this), \":\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: classes.italic,\n                  children: [' ', item.description]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 25\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 23\n              }, this);\n            })]\n          }, void 0, true) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProfileDevice, \"73SEqc3PxR30cJdZ/9QZxhpi9/I=\", false, function () {\n  return [useStyles, useParams];\n});\n\n_c = ProfileDevice;\n\nconst mapStateToProps = state => {\n  return {\n    selectedDevice: state.devices.selectedDevice,\n    isLoadinSelectedDevice: state.devices.isLoadinSelectedDevice,\n    isFetchErrorSelectedDevice: state.devices.isFetchErrorSelectedDevice\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getSelectedDevice\n})(ProfileDevice);\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileDevice\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/pages/ProfileDevice.tsx"],"names":["React","useEffect","useParams","makeStyles","Grid","Typography","CircularProgress","Box","Container","Button","getSelectedDevice","ImageList","ActiveLastBreadcrumb","connect","useStyles","theme","breadcrumb","marginTop","grid_container","name","fontSize","breakpoints","up","listImage","display","flexWrap","overflow","padding","image","height","width","margin","cursor","italic","fontStyle","bold","fontWeight","textTitle","ProfileDevice","selectedDevice","isFetchErrorSelectedDevice","isLoadinSelectedDevice","classes","id","console","log","picture","price","info","params","window","innerHeight","marginBottom","length","map","item","index","marginLeft","title","description","mapStateToProps","state","devices"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { RootStateType } from '../store/store'; // типизация всего стейта( для типизации state)\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { Box, Container, Button } from '@material-ui/core';\r\nimport { getSelectedDevice } from '../action/deviceAction';\r\nimport { DeviceType, InfoType } from '../store/reducer/deviceReducer';\r\nimport ImageList from '../components/ImageList';\r\nimport ActiveLastBreadcrumb from '../components/ActiveLastBreadcrumb';\r\nimport { connect } from 'react-redux';\r\n\r\n//типизация---------------------------------------------------------------------\r\ntype MapStateToPropsType = {\r\n  selectedDevice: DeviceType;\r\n  isLoadinSelectedDevice: boolean;\r\n  isFetchErrorSelectedDevice: boolean;\r\n};\r\ntype MapDispathPropsType = {\r\n  getSelectedDevice: (id: string) => void;\r\n};\r\ntype PropsType = MapStateToPropsType & MapDispathPropsType;\r\ntype ParamsType = {\r\n  id: string;\r\n};\r\n//-----------------------------------------------------------------\r\nconst useStyles = makeStyles((theme) => ({\r\n  breadcrumb: {\r\n    marginTop: 15,\r\n  },\r\n  grid_container: {\r\n    marginTop: 25,\r\n  },\r\n  name: {\r\n    fontSize: '1.2rem',\r\n    '@media (min-width:600px)': {\r\n      fontSize: '1.5rem',\r\n    },\r\n    [theme.breakpoints.up('md')]: {\r\n      fontSize: '2rem',\r\n    },\r\n    marginTop: 35,\r\n  },\r\n  listImage: {\r\n    display: 'flex',\r\n    flexWrap: 'nowrap',\r\n    overflow: 'auto',\r\n    marginTop: 5,\r\n    padding: 5,\r\n  },\r\n  image: {\r\n    height: 50,\r\n    width: 'auto',\r\n    margin: 5,\r\n    cursor: 'pointer',\r\n  },\r\n  italic: {\r\n    fontStyle: 'italic',\r\n  },\r\n  bold: {\r\n    fontWeight: 'bold',\r\n  },\r\n  textTitle: {\r\n    marginTop: '25px',\r\n  },\r\n}));\r\n\r\nconst ProfileDevice: React.FC<PropsType> = ({\r\n  getSelectedDevice,\r\n  selectedDevice,\r\n  isFetchErrorSelectedDevice,\r\n  isLoadinSelectedDevice,\r\n}) => {\r\n  const classes = useStyles();\r\n  const { id } = useParams<ParamsType>(); //  хук роутера ,который помогает получить значение params\r\n  console.log(selectedDevice);\r\n  useEffect(() => {\r\n    getSelectedDevice(id);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  const { name, picture, price, info } = selectedDevice;\r\n\r\n  let params: InfoType[];\r\n  info ? (params = [...info]) : (params = []);\r\n  //console.log(params[0]);\r\n  let image: string[];\r\n  picture ? (image = [...picture]) : (image = []);\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Box className={classes.breadcrumb}>\r\n        <ActiveLastBreadcrumb name={name} />\r\n      </Box>\r\n\r\n      {isFetchErrorSelectedDevice ? (\r\n        <Typography align=\"center\" color=\"error\" className={classes.textTitle}>\r\n          Что-то пошло не так!\r\n        </Typography>\r\n      ) : isLoadinSelectedDevice ? (\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          style={{ height: window.innerHeight - 65.6 }}\r\n        >\r\n          <CircularProgress />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Typography className={classes.name} variant=\"h3\">\r\n            {name}\r\n          </Typography>\r\n          <Grid container spacing={2} className={classes.grid_container}>\r\n            <Grid item xs={12} sm={6}>\r\n              <ImageList image={image} />\r\n              <Typography\r\n                variant=\"h5\"\r\n                component=\"h6\"\r\n                align=\"center\"\r\n                className={classes.bold}\r\n              >\r\n                Цена: {price} p\r\n              </Typography>\r\n              <Grid container spacing={2} style={{ marginTop: '25px' }}>\r\n                <Grid item xs={12} sm={6}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    style={{ marginBottom: 15, fontSize: 12 }}\r\n                    onClick={() => {}}\r\n                  >\r\n                    Купить\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    style={{ marginBottom: 15, fontSize: 12 }}\r\n                    onClick={() => {}}\r\n                  >\r\n                    Добавить в корзину\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={6}>\r\n              {params.length !== 0 ? (\r\n                <>\r\n                  <Typography variant=\"h5\" component=\"h6\" align=\"center\">\r\n                    Характеристики\r\n                  </Typography>\r\n                  {params.map((item: InfoType, index: number) => {\r\n                    return (\r\n                      <Typography style={{ marginLeft: '25px' }} key={index}>\r\n                        <span className={classes.bold}>{item.title}</span>:\r\n                        <span className={classes.italic}>\r\n                          {' '}\r\n                          {item.description}\r\n                        </span>\r\n                      </Typography>\r\n                    );\r\n                  })}\r\n                </>\r\n              ) : null}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n      <hr />\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n  return {\r\n    selectedDevice: state.devices.selectedDevice,\r\n    isLoadinSelectedDevice: state.devices.isLoadinSelectedDevice,\r\n    isFetchErrorSelectedDevice: state.devices.isFetchErrorSelectedDevice,\r\n  };\r\n};\r\nexport default connect<\r\n  MapStateToPropsType,\r\n  MapDispathPropsType,\r\n  unknown, // первичные пропсы\r\n  RootStateType\r\n>(mapStateToProps, { getSelectedDevice })(ProfileDevice);\r\n"]},"metadata":{},"sourceType":"module"}