{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\components\\\\FormLogin.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useHistory } from 'react-router-dom'; //схема валидации---------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schema = yup.object().shape({\n  email: yup.string().required('Поле обязательное для заполнения'),\n  password: yup.string().required('Поле обязательное для заполнения')\n}); //-----------------------------------------\n// типизация пропсов\n\n//--------------------------------------------\nconst useStyles = makeStyles(theme => ({\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(1)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  }\n}));\n\nconst FormLogin = ({\n  authorization\n}) => {\n  _s();\n\n  const history = useHistory();\n  const classes = useStyles();\n  const {\n    handleSubmit,\n    control,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(schema),\n    mode: 'onChange'\n  }); // получение данных из форма и отправка на сервак\n\n  const onSubmit = data => {\n    console.log('Отправлено:', data);\n    authorization(data); //передача данных из формы авторизации на сервак(data),history нужно для того, чтобы вернуться на страницу, по последнему клику\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    noValidate: true,\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(Controller, {\n      name: \"email\",\n      control: control,\n      defaultValue: \"\",\n      render: ({\n        field\n      }) => {\n        var _errors$email;\n\n        return /*#__PURE__*/_jsxDEV(TextField, { ...field,\n          variant: \"outlined\",\n          margin: \"normal\",\n          required: true,\n          fullWidth: true,\n          id: \"login\",\n          label: \"Email\",\n          autoComplete: \"text\",\n          autoFocus: true,\n          error: !!errors.email,\n          helperText: errors.email ? (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controller, {\n      name: \"password\",\n      control: control,\n      defaultValue: \"\",\n      render: ({\n        field\n      }) => {\n        var _errors$password;\n\n        return /*#__PURE__*/_jsxDEV(TextField, { ...field,\n          variant: \"outlined\",\n          margin: \"normal\",\n          required: true,\n          fullWidth: true,\n          label: \"Password\",\n          type: \"password\",\n          id: \"password\",\n          autoComplete: \"current-password\",\n          error: !!errors.password,\n          helperText: errors.password ? (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      fullWidth: true,\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.submit,\n      children: \"\\u0412\\u043E\\u0439\\u0442\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          href: \"#\",\n          variant: \"body2\",\n          onClick: () => history.push('/registration'),\n          children: 'Нет учетной записи? Зарегистрироваться'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FormLogin, \"+subwwM9quOtnqPjB4Z7lxksjKU=\", false, function () {\n  return [useHistory, useStyles, useForm];\n});\n\n_c = FormLogin;\nexport default FormLogin;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormLogin\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/components/FormLogin.tsx"],"names":["React","useForm","Controller","yupResolver","yup","Button","TextField","Link","Grid","makeStyles","useHistory","schema","object","shape","email","string","required","password","useStyles","theme","form","width","marginTop","spacing","submit","margin","FormLogin","authorization","history","classes","handleSubmit","control","formState","errors","resolver","mode","onSubmit","data","console","log","field","message","push"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useForm, SubmitHandler, Controller } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { AuthType } from '../action/authAction';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n//схема валидации---------------------\r\nconst schema = yup.object().shape({\r\n  email: yup.string().required('Поле обязательное для заполнения'),\r\n  password: yup.string().required('Поле обязательное для заполнения'),\r\n});\r\n//-----------------------------------------\r\n// типизация пропсов\r\ntype PropsType = {\r\n  authorization: (value: AuthType) => void;\r\n};\r\n//--------------------------------------------\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  form: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nconst FormLogin: React.FC<PropsType> = ({ authorization }) => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const {\r\n    handleSubmit,\r\n    control,\r\n    formState: { errors },\r\n  } = useForm<AuthType>({\r\n    resolver: yupResolver(schema),\r\n    mode: 'onChange',\r\n  });\r\n  // получение данных из форма и отправка на сервак\r\n  const onSubmit: SubmitHandler<AuthType> = (data: AuthType): void => {\r\n    console.log('Отправлено:', data);\r\n    authorization(data); //передача данных из формы авторизации на сервак(data),history нужно для того, чтобы вернуться на страницу, по последнему клику\r\n  };\r\n\r\n  return (\r\n    <form className={classes.form} noValidate onSubmit={handleSubmit(onSubmit)}>\r\n      <Controller\r\n        name=\"email\"\r\n        control={control}\r\n        defaultValue=\"\"\r\n        render={({ field }) => (\r\n          <TextField\r\n            {...field}\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"login\"\r\n            label=\"Email\"\r\n            autoComplete=\"text\"\r\n            autoFocus\r\n            error={!!errors.email}\r\n            helperText={errors.email ? errors.email?.message : null}\r\n          />\r\n        )}\r\n      />\r\n      <Controller\r\n        name=\"password\"\r\n        control={control}\r\n        defaultValue=\"\"\r\n        render={({ field }) => (\r\n          <TextField\r\n            {...field}\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            error={!!errors.password}\r\n            helperText={errors.password ? errors.password?.message : null}\r\n          />\r\n        )}\r\n      />\r\n\r\n      <Button\r\n        type=\"submit\"\r\n        fullWidth\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className={classes.submit}\r\n      >\r\n        Войти\r\n      </Button>\r\n      <Grid container>\r\n        <Grid item>\r\n          <Link\r\n            href=\"#\"\r\n            variant=\"body2\"\r\n            onClick={() => history.push('/registration')}\r\n          >\r\n            {'Нет учетной записи? Зарегистрироваться'}\r\n          </Link>\r\n        </Grid>\r\n      </Grid>\r\n    </form>\r\n  );\r\n};\r\nexport default FormLogin;\r\n"]},"metadata":{},"sourceType":"module"}