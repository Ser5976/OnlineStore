{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\components\\\\ModalWindow.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport { Divider } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Modal from '@material-ui/core/Modal'; //схема валидации---------------------\n\n/* const schema = yup.object().shape({\r\n   \r\n    name: yup.string().required('Поле обязательное для заполнения')\r\n  }); */\n//-----------------------------------------\n//-----------------------------------------\n// типизация пропсов\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//--------------------------------------------\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    // position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    // border: '2px solid #000',\n    boxShadow: theme.shadows[5] // padding: theme.spacing(2, 4, 3),\n\n    /* [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n      width: '75%',\r\n      marginLeft: 'auto',\r\n      marginRight: 'auto',\r\n    }, */\n\n  },\n  modal: {\n    display: 'flex',\n    //padding: theme.spacing(1),\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  buttons: {\n    display: 'flex',\n    justifyContent: 'flex-end'\n  }\n}));\nexport const ModalWindow = ({\n  handleClose,\n  open,\n  title\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    handleSubmit,\n    control,\n    formState: {\n      errors\n    }\n  } = useForm({});\n  console.log(errors);\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    open: open,\n    onClose: handleClose,\n    className: classes.modal,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.paper,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        component: \"h1\",\n        variant: \"h6\",\n        style: {\n          padding: 15\n        },\n        children: [\"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \", title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        style: {\n          padding: 15\n        },\n        onSubmit: () => {},\n        children: [/*#__PURE__*/_jsxDEV(Controller, {\n          name: \"name\",\n          control: control,\n          defaultValue: \"\",\n          rules: {\n            required: true\n          },\n          render: ({\n            field\n          }) => {\n            var _errors$name;\n\n            return /*#__PURE__*/_jsxDEV(TextField, { ...field,\n              // variant=\"outlined\"\n              margin: \"normal\",\n              fullWidth: true,\n              label: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0442\\u0438\\u043F\\u0430\",\n              error: !!errors.name,\n              helperText: errors.name ? (_errors$name = errors.name) === null || _errors$name === void 0 ? void 0 : _errors$name.message : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.buttons,\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            color: \"primary\",\n            style: {\n              margin: 5,\n              fontSize: 12\n            },\n            onClick: handleClose,\n            children: \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            color: \"primary\",\n            type: \"submit\",\n            style: {\n              margin: 5,\n              fontSize: 12\n            },\n            onClick: () => {},\n            children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ModalWindow, \"oq2ykN0sRHtlaTwkxo2o+HBEj+Q=\", false, function () {\n  return [useStyles, useForm];\n});\n\n_c = ModalWindow;\nexport default ModalWindow;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalWindow\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/components/ModalWindow.tsx"],"names":["React","useForm","Controller","makeStyles","Typography","TextField","Divider","Button","Modal","useStyles","theme","paper","width","backgroundColor","palette","background","boxShadow","shadows","modal","display","alignItems","justifyContent","buttons","ModalWindow","handleClose","open","title","classes","handleSubmit","control","formState","errors","console","log","padding","required","field","name","message","margin","fontSize"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Divider } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Modal from '@material-ui/core/Modal';\r\n\r\n//схема валидации---------------------\r\n/* const schema = yup.object().shape({\r\n   \r\n    name: yup.string().required('Поле обязательное для заполнения')\r\n  }); */\r\n//-----------------------------------------\r\n//-----------------------------------------\r\n// типизация пропсов\r\ntype PropsType = {\r\n  handleClose: () => void;\r\n  open: boolean;\r\n  title: string;\r\n};\r\n//--------------------------------------------\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    // position: 'absolute',\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    // border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    // padding: theme.spacing(2, 4, 3),\r\n    /* [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n      width: '75%',\r\n      marginLeft: 'auto',\r\n      marginRight: 'auto',\r\n    }, */\r\n  },\r\n  modal: {\r\n    display: 'flex',\r\n    //padding: theme.spacing(1),\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  buttons: {\r\n    display: 'flex',\r\n    justifyContent: 'flex-end',\r\n  },\r\n}));\r\n\r\nexport const ModalWindow: React.FC<PropsType> = ({\r\n  handleClose,\r\n  open,\r\n  title,\r\n}) => {\r\n  const classes = useStyles();\r\n  const {\r\n    handleSubmit,\r\n    control,\r\n    formState: { errors },\r\n  } = useForm({});\r\n  console.log(errors);\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.modal}>\r\n      <div className={classes.paper}>\r\n        <Typography component=\"h1\" variant=\"h6\" style={{ padding: 15 }}>\r\n          Добавить {title}\r\n        </Typography>\r\n        <Divider />\r\n        <form style={{ padding: 15 }} onSubmit={() => {}}>\r\n          <Controller\r\n            name=\"name\"\r\n            control={control}\r\n            defaultValue=\"\"\r\n            rules={{ required: true }}\r\n            render={({ field }) => (\r\n              <TextField\r\n                {...field}\r\n                // variant=\"outlined\"\r\n                margin=\"normal\"\r\n                fullWidth\r\n                label=\"Введите название типа\"\r\n                error={!!errors.name}\r\n                helperText={errors.name ? errors.name?.message : null}\r\n              />\r\n            )}\r\n          />\r\n\r\n          <div className={classes.buttons}>\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              style={{ margin: 5, fontSize: 12 }}\r\n              onClick={handleClose}\r\n            >\r\n              Закрыть\r\n            </Button>\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n              style={{ margin: 5, fontSize: 12 }}\r\n              onClick={() => {}}\r\n            >\r\n              Добавить\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ModalWindow;\r\n"]},"metadata":{},"sourceType":"module"}