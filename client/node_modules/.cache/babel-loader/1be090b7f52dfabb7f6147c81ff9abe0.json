{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\pages\\\\ProfileType.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { Box, Container } from '@material-ui/core';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport { useLocation, useHistory, useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport Pagination from '@material-ui/lab/Pagination';\nimport PaginationItem from '@material-ui/lab/PaginationItem';\nimport { ROOT_URL } from '../constants/url';\nimport ActiveLastBreadcrumb from '../components/ActiveLastBreadcrumb';\n//типизиция всего стора\nimport { setTypeId, //запись выбранного типа устройства\nsetBrandId //запись выбранного  брэнда устройства\n} from '../store/reducer/deviceReducer';\n//типизация данных\nimport { getDevices, //запрос на получение устройств\ngetSelectedType //запрос на получение выбранного типа устройства\n} from '../action/deviceAction';\nimport { connect } from 'react-redux'; //типизация--------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n//-----------------------------------------\nconst useStyles = makeStyles(theme => createStyles({\n  breadcrumb: {\n    marginTop: 15\n  },\n  root1: {\n    '& > *': {\n      marginTop: theme.spacing(2)\n    },\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginBottom: theme.spacing(2)\n  },\n  grid: {\n    width: '100%',\n    height: 650,\n    overflow: 'auto'\n  },\n  textTitle: {\n    marginTop: '25px'\n  },\n  root: {\n    maxWidth: 250\n  },\n  media: {\n    height: 100,\n    width: 'auto',\n    padding: 15,\n    cursor: 'pointer'\n  },\n  cardActions: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  }\n}));\n\nconst ProfileType = ({\n  getDevices,\n  getSelectedType,\n  setTypeId,\n  setBrandId,\n  devices,\n  selectedType,\n  pageQty,\n  limit,\n  typeId,\n  brandId,\n  isLoadinDevice,\n  isFetchErrorDevice,\n  isLoadinTypes,\n  isFetchErrorTypes\n}) => {\n  _s();\n\n  var _searchPage$search;\n\n  const classes = useStyles();\n  const {\n    id\n  } = useParams(); //  хук роутера ,который помогает получить значение params(это выбранный typeId)\n\n  const searchPage = useLocation(); // для получения строки запроса\n\n  const history = useHistory(); //для изменения строки запроса\n  //console.log(search);\n  // пагинация, данные о текущей странице( по умолчанию: 1 или, если есть ,информация о текущей странице в адресной строке )\n\n  const [page, setPage] = useState(parseInt(((_searchPage$search = searchPage.search) === null || _searchPage$search === void 0 ? void 0 : _searchPage$search.split('=')[1]) || '1')); // изменения текущей страницы\n\n  const handleChange = (event, value) => {\n    setPage(value);\n  }; // запрос на сервак для получения устройств(фильтруем устройства по типу и бренду,а также пагинация)\n\n\n  useEffect(() => {\n    getDevices(typeId, brandId, limit, page, setPage, history); // eslint-disable-next-line\n  }, [typeId, brandId, page]); // запрос на сервак для получения выбранного типа с брэндами\n\n  useEffect(() => {\n    getSelectedType(id); // eslint-disable-next-line\n  }, []);\n  console.log(selectedType); // console.log(info);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        className: classes.breadcrumb,\n        children: /*#__PURE__*/_jsxDEV(ActiveLastBreadcrumb, {\n          name: selectedType.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        align: \"center\",\n        children: selectedType.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 3,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            children: \"\\u041F\\u0440\\u043E\\u0438\\u0437\\u0432\\u043E\\u0434\\u0438\\u0442\\u0435\\u043B\\u0438\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(List, {\n            component: \"nav\",\n            children: selectedType.brands && selectedType.brands.map(brand => {\n              return /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(ListItem, {\n                  button: true,\n                  children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                    primary: brand.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 172,\n                    columnNumber: 25\n                  }, this)\n                }, brand._id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          container: true,\n          xs: 12,\n          sm: 9,\n          children: devices.map(item => {\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 4,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.root,\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: `${ROOT_URL}/${item.picture[0]}`,\n                  className: classes.media,\n                  onClick: () => {\n                    history.push(`/profileDevice/${item._id}`);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  gutterBottom: true,\n                  variant: \"h6\",\n                  component: \"div\",\n                  children: [item.price, \" p\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 193,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  color: \"textSecondary\",\n                  component: \"div\",\n                  children: item.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 21\n                }, this)]\n              }, item._id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), !!pageQty && /*#__PURE__*/_jsxDEV(Pagination, {\n      className: classes.root,\n      count: pageQty,\n      page: page,\n      showFirstButton: true,\n      showLastButton: true,\n      onChange: handleChange // интегрируем роутер\n      ,\n      renderItem: item => /*#__PURE__*/_jsxDEV(PaginationItem, {\n        component: Link,\n        to: `/profileType/${id}?page=${item.page}`,\n        ...item\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ProfileType, \"9cUZSn/U2v0SWLwfy2tyZKAjgjY=\", false, function () {\n  return [useStyles, useParams, useLocation, useHistory];\n});\n\n_c = ProfileType;\n\nconst mapStateToProps = state => {\n  return {\n    devices: state.devices.devices,\n    //устройства\n    selectedType: state.devices.selectedType,\n    //выбранный тип устройства\n    pageQty: state.devices.pageQty,\n    //количества страниц\n    limit: state.devices.limit,\n    //сколько устройств на странице\n    typeId: state.devices.typeId,\n    // айдишник типа\n    brandId: state.devices.brandId,\n    // айдишник брэнда\n    isLoadinDevice: state.devices.isLoadinDevice,\n    //крутилка у стройств\n    isLoadinTypes: state.devices.isLoadinTypes,\n    //крутилка типов\n    isFetchErrorDevice: state.devices.isFetchErrorDevice,\n    //ошибка устройств\n    isFetchErrorTypes: state.devices.isFetchErrorTypes //ошибка типов\n\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getDevices,\n  getSelectedType,\n  setTypeId,\n  setBrandId\n})(ProfileType);\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileType\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/pages/ProfileType.tsx"],"names":["React","useEffect","useState","Grid","Typography","Box","Container","List","ListItem","ListItemText","Divider","makeStyles","createStyles","useLocation","useHistory","useParams","Link","Pagination","PaginationItem","ROOT_URL","ActiveLastBreadcrumb","setTypeId","setBrandId","getDevices","getSelectedType","connect","useStyles","theme","breadcrumb","marginTop","root1","spacing","display","flexDirection","justifyContent","marginBottom","grid","width","height","overflow","textTitle","root","maxWidth","media","padding","cursor","cardActions","ProfileType","devices","selectedType","pageQty","limit","typeId","brandId","isLoadinDevice","isFetchErrorDevice","isLoadinTypes","isFetchErrorTypes","classes","id","searchPage","history","page","setPage","parseInt","search","split","handleChange","event","value","console","log","name","brands","map","brand","_id","item","picture","push","price","mapStateToProps","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,GAAT,EAAcC,SAAd,QAA+B,mBAA/B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,0BAAzC;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,SAAlC,QAAmD,cAAnD;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AAEA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,oBAAP,MAAiC,oCAAjC;AACgD;AAEhD,SACEC,SADF,EACa;AACXC,UAFF,CAEc;AAFd,OAGO,gCAHP;AAYyC;AACzC,SACEC,UADF,EACc;AACZC,eAFF,CAEmB;AAFnB,OAGO,wBAHP;AAIA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;;;;AA+BA;AACA,MAAMC,SAAS,GAAGf,UAAU,CAAEgB,KAAD,IAC3Bf,YAAY,CAAC;AACXgB,EAAAA,UAAU,EAAE;AACVC,IAAAA,SAAS,EAAE;AADD,GADD;AAIXC,EAAAA,KAAK,EAAE;AACL,aAAS;AACPD,MAAAA,SAAS,EAAEF,KAAK,CAACI,OAAN,CAAc,CAAd;AADJ,KADJ;AAILC,IAAAA,OAAO,EAAE,MAJJ;AAKLC,IAAAA,aAAa,EAAE,KALV;AAMLC,IAAAA,cAAc,EAAE,QANX;AAOLC,IAAAA,YAAY,EAAER,KAAK,CAACI,OAAN,CAAc,CAAd;AAPT,GAJI;AAaXK,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,MADH;AAEJC,IAAAA,MAAM,EAAE,GAFJ;AAGJC,IAAAA,QAAQ,EAAE;AAHN,GAbK;AAkBXC,EAAAA,SAAS,EAAE;AACTX,IAAAA,SAAS,EAAE;AADF,GAlBA;AAsBXY,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE;AADN,GAtBK;AAyBXC,EAAAA,KAAK,EAAE;AACLL,IAAAA,MAAM,EAAE,GADH;AAELD,IAAAA,KAAK,EAAE,MAFF;AAGLO,IAAAA,OAAO,EAAE,EAHJ;AAILC,IAAAA,MAAM,EAAE;AAJH,GAzBI;AA+BXC,EAAAA,WAAW,EAAE;AACXd,IAAAA,OAAO,EAAE,MADE;AAEXE,IAAAA,cAAc,EAAE;AAFL;AA/BF,CAAD,CADc,CAA5B;;AAuCA,MAAMa,WAAgC,GAAG,CAAC;AACxCxB,EAAAA,UADwC;AAExCC,EAAAA,eAFwC;AAGxCH,EAAAA,SAHwC;AAIxCC,EAAAA,UAJwC;AAKxC0B,EAAAA,OALwC;AAMxCC,EAAAA,YANwC;AAOxCC,EAAAA,OAPwC;AAQxCC,EAAAA,KARwC;AASxCC,EAAAA,MATwC;AAUxCC,EAAAA,OAVwC;AAWxCC,EAAAA,cAXwC;AAYxCC,EAAAA,kBAZwC;AAaxCC,EAAAA,aAbwC;AAcxCC,EAAAA;AAdwC,CAAD,KAenC;AAAA;;AAAA;;AACJ,QAAMC,OAAO,GAAGhC,SAAS,EAAzB;AACA,QAAM;AAAEiC,IAAAA;AAAF,MAAS5C,SAAS,EAAxB,CAFI,CAEoC;;AACxC,QAAM6C,UAAU,GAAG/C,WAAW,EAA9B,CAHI,CAG8B;;AAClC,QAAMgD,OAAO,GAAG/C,UAAU,EAA1B,CAJI,CAI0B;AAC9B;AACA;;AACA,QAAM,CAACgD,IAAD,EAAOC,OAAP,IAAkB7D,QAAQ,CAC9B8D,QAAQ,CAAC,uBAAAJ,UAAU,CAACK,MAAX,0EAAmBC,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,MAAoC,GAArC,CADsB,CAAhC,CAPI,CAUJ;;AACA,QAAMC,YAAY,GAAG,CAACC,KAAD,EAAoCC,KAApC,KAAsD;AACzEN,IAAAA,OAAO,CAACM,KAAD,CAAP;AACD,GAFD,CAXI,CAcJ;;;AACApE,EAAAA,SAAS,CAAC,MAAM;AACdsB,IAAAA,UAAU,CAAC6B,MAAD,EAASC,OAAT,EAAkBF,KAAlB,EAAyBW,IAAzB,EAA+BC,OAA/B,EAAwCF,OAAxC,CAAV,CADc,CAEd;AACD,GAHQ,EAGN,CAACT,MAAD,EAASC,OAAT,EAAkBS,IAAlB,CAHM,CAAT,CAfI,CAmBJ;;AACA7D,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,eAAe,CAACmC,EAAD,CAAf,CADc,CAEd;AACD,GAHQ,EAGN,EAHM,CAAT;AAKAW,EAAAA,OAAO,CAACC,GAAR,CAAYtB,YAAZ,EAzBI,CA2BJ;;AACA,sBACE;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAC,IAApB;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,SAAS,EAAES,OAAO,CAAC9B,UAAxB;AAAA,+BACE,QAAC,oBAAD;AAAsB,UAAA,IAAI,EAAEqB,YAAY,CAACuB;AAAzC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAME,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAC,IAApB;AAAA,8BACE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,IAApB;AAAyB,QAAA,KAAK,EAAC,QAA/B;AAAA,kBACGvB,YAAY,CAACuB;AADhB;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,OAAO,EAAE,CAAzB;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE,EAAf;AAAmB,UAAA,EAAE,EAAE,CAAvB;AAAA,kCACE,QAAC,UAAD;AAAY,YAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,IAAD;AAAM,YAAA,SAAS,EAAC,KAAhB;AAAA,sBACGvB,YAAY,CAACwB,MAAb,IACCxB,YAAY,CAACwB,MAAb,CAAoBC,GAApB,CAAyBC,KAAD,IAAW;AACjC,kCACE;AAAA,wCACE,QAAC,QAAD;AAAU,kBAAA,MAAM,MAAhB;AAAA,yCACE,QAAC,YAAD;AAAc,oBAAA,OAAO,EAAEA,KAAK,CAACH;AAA7B;AAAA;AAAA;AAAA;AAAA;AADF,mBAAsBG,KAAK,CAACC,GAA5B;AAAA;AAAA;AAAA;AAAA,wBADF,eAIE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,wBAJF;AAAA,8BADF;AAQD,aATD;AAFJ;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAiBE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,SAAS,MAApB;AAAqB,UAAA,EAAE,EAAE,EAAzB;AAA6B,UAAA,EAAE,EAAE,CAAjC;AAAA,oBACG5B,OAAO,CAAC0B,GAAR,CAAaG,IAAD,IAAU;AACrB,gCACE,QAAC,IAAD;AAAM,cAAA,IAAI,MAAV;AAAW,cAAA,EAAE,EAAE,EAAf;AAAmB,cAAA,EAAE,EAAE,CAAvB;AAAA,qCACE;AAAK,gBAAA,SAAS,EAAEnB,OAAO,CAACjB,IAAxB;AAAA,wCACE;AACE,kBAAA,GAAG,EAAG,GAAEtB,QAAS,IAAG0D,IAAI,CAACC,OAAL,CAAa,CAAb,CAAgB,EADtC;AAEE,kBAAA,SAAS,EAAEpB,OAAO,CAACf,KAFrB;AAGE,kBAAA,OAAO,EAAE,MAAM;AACbkB,oBAAAA,OAAO,CAACkB,IAAR,CAAc,kBAAiBF,IAAI,CAACD,GAAI,EAAxC;AACD;AALH;AAAA;AAAA;AAAA;AAAA,wBADF,eASE,QAAC,UAAD;AAAY,kBAAA,YAAY,MAAxB;AAAyB,kBAAA,OAAO,EAAC,IAAjC;AAAsC,kBAAA,SAAS,EAAC,KAAhD;AAAA,6BACGC,IAAI,CAACG,KADR;AAAA;AAAA;AAAA;AAAA;AAAA,wBATF,eAYE,QAAC,UAAD;AACE,kBAAA,OAAO,EAAC,OADV;AAEE,kBAAA,KAAK,EAAC,eAFR;AAGE,kBAAA,SAAS,EAAC,KAHZ;AAAA,4BAKGH,IAAI,CAACL;AALR;AAAA;AAAA;AAAA;AAAA,wBAZF;AAAA,iBAAmCK,IAAI,CAACD,GAAxC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBADF;AAwBD,WAzBA;AADH;AAAA;AAAA;AAAA;AAAA,gBAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,EA0DG,CAAC,CAAC1B,OAAF,iBACC,QAAC,UAAD;AACE,MAAA,SAAS,EAAEQ,OAAO,CAACjB,IADrB;AAEE,MAAA,KAAK,EAAES,OAFT;AAGE,MAAA,IAAI,EAAEY,IAHR;AAIE,MAAA,eAAe,MAJjB;AAKE,MAAA,cAAc,MALhB;AAME,MAAA,QAAQ,EAAEK,YANZ,CAOE;AAPF;AAQE,MAAA,UAAU,EAAGU,IAAD,iBACV,QAAC,cAAD;AACE,QAAA,SAAS,EAAE7D,IADb;AAEE,QAAA,EAAE,EAAG,gBAAe2C,EAAG,SAAQkB,IAAI,CAACf,IAAK,EAF3C;AAAA,WAGMe;AAHN;AAAA;AAAA;AAAA;AAAA;AATJ;AAAA;AAAA;AAAA;AAAA,YA3DJ;AAAA,kBADF;AA+ED,CA1HD;;GAAM9B,W;UAgBYrB,S,EACDX,S,EACIF,W,EACHC,U;;;KAnBZiC,W;;AA2HN,MAAMkC,eAAe,GAAIC,KAAD,IAA+C;AACrE,SAAO;AACLlC,IAAAA,OAAO,EAAEkC,KAAK,CAAClC,OAAN,CAAcA,OADlB;AAC2B;AAChCC,IAAAA,YAAY,EAAEiC,KAAK,CAAClC,OAAN,CAAcC,YAFvB;AAEqC;AAC1CC,IAAAA,OAAO,EAAEgC,KAAK,CAAClC,OAAN,CAAcE,OAHlB;AAG2B;AAChCC,IAAAA,KAAK,EAAE+B,KAAK,CAAClC,OAAN,CAAcG,KAJhB;AAIuB;AAC5BC,IAAAA,MAAM,EAAE8B,KAAK,CAAClC,OAAN,CAAcI,MALjB;AAKyB;AAC9BC,IAAAA,OAAO,EAAE6B,KAAK,CAAClC,OAAN,CAAcK,OANlB;AAM2B;AAChCC,IAAAA,cAAc,EAAE4B,KAAK,CAAClC,OAAN,CAAcM,cAPzB;AAOyC;AAC9CE,IAAAA,aAAa,EAAE0B,KAAK,CAAClC,OAAN,CAAcQ,aARxB;AAQuC;AAC5CD,IAAAA,kBAAkB,EAAE2B,KAAK,CAAClC,OAAN,CAAcO,kBAT7B;AASiD;AACtDE,IAAAA,iBAAiB,EAAEyB,KAAK,CAAClC,OAAN,CAAcS,iBAV5B,CAU+C;;AAV/C,GAAP;AAYD,CAbD;;AAcA,eAAehC,OAAO,CAKpBwD,eALoB,EAKH;AACjB1D,EAAAA,UADiB;AAEjBC,EAAAA,eAFiB;AAGjBH,EAAAA,SAHiB;AAIjBC,EAAAA;AAJiB,CALG,CAAP,CAUZyB,WAVY,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Box, Container } from '@material-ui/core';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\nimport { useLocation, useHistory, useParams } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport PaginationItem from '@material-ui/lab/PaginationItem';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { ROOT_URL } from '../constants/url';\r\nimport ActiveLastBreadcrumb from '../components/ActiveLastBreadcrumb';\r\nimport { RootStateType } from '../store/store'; //типизиция всего стора\r\n\r\nimport {\r\n  setTypeId, //запись выбранного типа устройства\r\n  setBrandId, //запись выбранного  брэнда устройства\r\n} from '../store/reducer/deviceReducer';\r\nimport {\r\n  setTypeIdActionType,\r\n  setBrandIdActionType,\r\n} from '../store/reducer/deviceReducer'; // типизация экшенов\r\nimport {\r\n  DeviceType,\r\n  TypeDeviceType,\r\n  BrandType,\r\n} from '../store/reducer/deviceReducer'; //типизация данных\r\nimport {\r\n  getDevices, //запрос на получение устройств\r\n  getSelectedType, //запрос на получение выбранного типа устройства\r\n} from '../action/deviceAction';\r\nimport { connect } from 'react-redux';\r\n\r\n//типизация--------------------------------\r\ntype MapStateToPropsType = {\r\n  devices: DeviceType[];\r\n  selectedType: TypeDeviceType;\r\n  pageQty: number;\r\n  limit: number;\r\n  typeId: string | null;\r\n  brandId: string | null;\r\n  isLoadinDevice: boolean;\r\n  isFetchErrorDevice: boolean;\r\n  isLoadinTypes: boolean;\r\n  isFetchErrorTypes: boolean;\r\n};\r\ntype MapDispathPropsType = {\r\n  getDevices: (\r\n    typeId: string | null,\r\n    brandId: string | null,\r\n    limit: number,\r\n    page: number,\r\n    setPage: React.Dispatch<React.SetStateAction<number>>,\r\n    history: any\r\n  ) => void;\r\n  getSelectedType: (id: string) => void;\r\n  setTypeId: (data: string | null) => setTypeIdActionType;\r\n  setBrandId: (data: string | null) => setBrandIdActionType;\r\n};\r\n\r\ntype PropsType = MapDispathPropsType & MapStateToPropsType;\r\ntype ParamsType = {\r\n  id: string;\r\n};\r\n//-----------------------------------------\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    breadcrumb: {\r\n      marginTop: 15,\r\n    },\r\n    root1: {\r\n      '& > *': {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      justifyContent: 'center',\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n    grid: {\r\n      width: '100%',\r\n      height: 650,\r\n      overflow: 'auto',\r\n    },\r\n    textTitle: {\r\n      marginTop: '25px',\r\n    },\r\n\r\n    root: {\r\n      maxWidth: 250,\r\n    },\r\n    media: {\r\n      height: 100,\r\n      width: 'auto',\r\n      padding: 15,\r\n      cursor: 'pointer',\r\n    },\r\n    cardActions: {\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n    },\r\n  })\r\n);\r\n\r\nconst ProfileType: React.FC<PropsType> = ({\r\n  getDevices,\r\n  getSelectedType,\r\n  setTypeId,\r\n  setBrandId,\r\n  devices,\r\n  selectedType,\r\n  pageQty,\r\n  limit,\r\n  typeId,\r\n  brandId,\r\n  isLoadinDevice,\r\n  isFetchErrorDevice,\r\n  isLoadinTypes,\r\n  isFetchErrorTypes,\r\n}) => {\r\n  const classes = useStyles();\r\n  const { id } = useParams<ParamsType>(); //  хук роутера ,который помогает получить значение params(это выбранный typeId)\r\n  const searchPage = useLocation(); // для получения строки запроса\r\n  const history = useHistory(); //для изменения строки запроса\r\n  //console.log(search);\r\n  // пагинация, данные о текущей странице( по умолчанию: 1 или, если есть ,информация о текущей странице в адресной строке )\r\n  const [page, setPage] = useState(\r\n    parseInt(searchPage.search?.split('=')[1] || '1')\r\n  );\r\n  // изменения текущей страницы\r\n  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n    setPage(value);\r\n  };\r\n  // запрос на сервак для получения устройств(фильтруем устройства по типу и бренду,а также пагинация)\r\n  useEffect(() => {\r\n    getDevices(typeId, brandId, limit, page, setPage, history);\r\n    // eslint-disable-next-line\r\n  }, [typeId, brandId, page]);\r\n  // запрос на сервак для получения выбранного типа с брэндами\r\n  useEffect(() => {\r\n    getSelectedType(id);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  console.log(selectedType);\r\n\r\n  // console.log(info);\r\n  return (\r\n    <>\r\n      <Container maxWidth=\"lg\">\r\n        <Box className={classes.breadcrumb}>\r\n          <ActiveLastBreadcrumb name={selectedType.name} />\r\n        </Box>\r\n      </Container>\r\n      <Container maxWidth=\"lg\">\r\n        <Typography variant=\"h3\" align=\"center\">\r\n          {selectedType.name}\r\n        </Typography>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} sm={3}>\r\n            <Typography variant=\"h5\">Производители</Typography>\r\n            <List component=\"nav\">\r\n              {selectedType.brands &&\r\n                selectedType.brands.map((brand) => {\r\n                  return (\r\n                    <>\r\n                      <ListItem button key={brand._id}>\r\n                        <ListItemText primary={brand.name} />\r\n                      </ListItem>\r\n                      <Divider />\r\n                    </>\r\n                  );\r\n                })}\r\n            </List>\r\n          </Grid>\r\n          <Grid item container xs={12} sm={9}>\r\n            {devices.map((item) => {\r\n              return (\r\n                <Grid item xs={12} sm={4}>\r\n                  <div className={classes.root} key={item._id}>\r\n                    <img\r\n                      src={`${ROOT_URL}/${item.picture[0]}`}\r\n                      className={classes.media}\r\n                      onClick={() => {\r\n                        history.push(`/profileDevice/${item._id}`);\r\n                      }}\r\n                    />\r\n\r\n                    <Typography gutterBottom variant=\"h6\" component=\"div\">\r\n                      {item.price} p\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"body2\"\r\n                      color=\"textSecondary\"\r\n                      component=\"div\"\r\n                    >\r\n                      {item.name}\r\n                    </Typography>\r\n                  </div>\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n\r\n      {!!pageQty && (\r\n        <Pagination\r\n          className={classes.root}\r\n          count={pageQty}\r\n          page={page}\r\n          showFirstButton\r\n          showLastButton\r\n          onChange={handleChange}\r\n          // интегрируем роутер\r\n          renderItem={(item) => (\r\n            <PaginationItem\r\n              component={Link}\r\n              to={`/profileType/${id}?page=${item.page}`}\r\n              {...item}\r\n            />\r\n          )}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n  return {\r\n    devices: state.devices.devices, //устройства\r\n    selectedType: state.devices.selectedType, //выбранный тип устройства\r\n    pageQty: state.devices.pageQty, //количества страниц\r\n    limit: state.devices.limit, //сколько устройств на странице\r\n    typeId: state.devices.typeId, // айдишник типа\r\n    brandId: state.devices.brandId, // айдишник брэнда\r\n    isLoadinDevice: state.devices.isLoadinDevice, //крутилка у стройств\r\n    isLoadinTypes: state.devices.isLoadinTypes, //крутилка типов\r\n    isFetchErrorDevice: state.devices.isFetchErrorDevice, //ошибка устройств\r\n    isFetchErrorTypes: state.devices.isFetchErrorTypes, //ошибка типов\r\n  };\r\n};\r\nexport default connect<\r\n  MapStateToPropsType,\r\n  MapDispathPropsType,\r\n  unknown, // личные пропсы\r\n  RootStateType\r\n>(mapStateToProps, {\r\n  getDevices,\r\n  getSelectedType,\r\n  setTypeId,\r\n  setBrandId,\r\n})(ProfileType);\r\n"]},"metadata":{},"sourceType":"module"}