{"ast":null,"code":"const SET_DEVICES = 'SET_DEVICES';\nconst SET_TYPES = 'SET_TYPE';\nconst SET_BRANDS = 'SET_BRANDS';\nconst SET_TOTAL_COUNT = 'SET_TOTAL_COUNT';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'; //типизация--------------------------------\n//----------стейта-------------------------\n\n//-----------------------------------------\nconst initialState = {\n  devices: [],\n  //массив устройств\n  types: [],\n  //массив типов устройств\n  brands: [],\n  // массив брэндов устройств\n  //---пагинация----\n  totalCount: 0,\n  // общее количество устройств(для пагинации)\n  limit: 10,\n  // количество устройств на станице\n  currentPage: 1 // текущая страница\n\n};\nexport const deviceReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_DEVICES:\n      return { ...state,\n        device: action.payload\n      };\n\n    case SET_TYPES:\n      return { ...state,\n        types: action.payload\n      };\n\n    case SET_BRANDS:\n      return { ...state,\n        brands: action.payload\n      };\n\n    case SET_TOTAL_COUNT:\n      return { ...state,\n        totalCount: action.payload\n      };\n\n    case SET_CURRENT_PAGE:\n      return { ...state,\n        currentPage: action.payload\n      };\n\n    default:\n      return state;\n  }\n}; // записывает устройства\n\nexport const setDevices = data => ({\n  type: SET_DEVICES,\n  payload: data\n}); // записываем общее количество устройств(для пагинации)\n\nexport const setTotalCount = data => ({\n  type: SET_TOTAL_COUNT,\n  payload: data\n}); // записываем типы устройств\n\nexport const setTypes = data => ({\n  type: SET_TYPES,\n  payload: data\n}); // записываем бренды устройств\n\nexport const setBrands = data => ({\n  type: SET_BRANDS,\n  payload: data\n}); // записываем текущую страницу\n\nexport const setCurrentPage = data => ({\n  type: SET_CURRENT_PAGE,\n  payload: data\n});","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/store/reducer/deviceReducer.ts"],"names":["SET_DEVICES","SET_TYPES","SET_BRANDS","SET_TOTAL_COUNT","SET_CURRENT_PAGE","initialState","devices","types","brands","totalCount","limit","currentPage","deviceReducer","state","action","type","device","payload","setDevices","data","setTotalCount","setTypes","setBrands","setCurrentPage"],"mappings":"AAAA,MAAMA,WAAW,GAAG,aAApB;AACA,MAAMC,SAAS,GAAG,UAAlB;AACA,MAAMC,UAAU,GAAG,YAAnB;AACA,MAAMC,eAAe,GAAG,iBAAxB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB,C,CAEA;AACA;;AAqEA;AAEA,MAAMC,YAA8B,GAAG;AACrCC,EAAAA,OAAO,EAAE,EAD4B;AACxB;AACbC,EAAAA,KAAK,EAAE,EAF8B;AAE1B;AACXC,EAAAA,MAAM,EAAE,EAH6B;AAGzB;AACZ;AACAC,EAAAA,UAAU,EAAE,CALyB;AAKtB;AACfC,EAAAA,KAAK,EAAE,EAN8B;AAM1B;AACXC,EAAAA,WAAW,EAAE,CAPwB,CAOrB;;AAPqB,CAAvC;AAUA,OAAO,MAAMC,aAAa,GAAG,CAC3BC,KAAK,GAAGR,YADmB,EAE3BS,MAF2B,KAGxB;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKf,WAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELG,QAAAA,MAAM,EAAEF,MAAM,CAACG;AAFV,OAAP;;AAIF,SAAKhB,SAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELN,QAAAA,KAAK,EAAEO,MAAM,CAACG;AAFT,OAAP;;AAIF,SAAKf,UAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELL,QAAAA,MAAM,EAAEM,MAAM,CAACG;AAFV,OAAP;;AAIF,SAAKd,eAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELJ,QAAAA,UAAU,EAAEK,MAAM,CAACG;AAFd,OAAP;;AAIF,SAAKb,gBAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELF,QAAAA,WAAW,EAAEG,MAAM,CAACG;AAFf,OAAP;;AAKF;AACE,aAAOJ,KAAP;AA5BJ;AA8BD,CAlCM,C,CAmCP;;AACA,OAAO,MAAMK,UAAU,GAAIC,IAAD,KAA+C;AACvEJ,EAAAA,IAAI,EAAEf,WADiE;AAEvEiB,EAAAA,OAAO,EAAEE;AAF8D,CAA/C,CAAnB,C,CAIP;;AACA,OAAO,MAAMC,aAAa,GAAID,IAAD,KAA4C;AACvEJ,EAAAA,IAAI,EAAEZ,eADiE;AAEvEc,EAAAA,OAAO,EAAEE;AAF8D,CAA5C,CAAtB,C,CAIP;;AACA,OAAO,MAAME,QAAQ,GAAIF,IAAD,KAAiD;AACvEJ,EAAAA,IAAI,EAAEd,SADiE;AAEvEgB,EAAAA,OAAO,EAAEE;AAF8D,CAAjD,CAAjB,C,CAIP;;AACA,OAAO,MAAMG,SAAS,GAAIH,IAAD,KAA6C;AACpEJ,EAAAA,IAAI,EAAEb,UAD8D;AAEpEe,EAAAA,OAAO,EAAEE;AAF2D,CAA7C,CAAlB,C,CAIP;;AACA,OAAO,MAAMI,cAAc,GAAIJ,IAAD,KAA6C;AACzEJ,EAAAA,IAAI,EAAEX,gBADmE;AAEzEa,EAAAA,OAAO,EAAEE;AAFgE,CAA7C,CAAvB","sourcesContent":["const SET_DEVICES = 'SET_DEVICES';\r\nconst SET_TYPES = 'SET_TYPE';\r\nconst SET_BRANDS = 'SET_BRANDS';\r\nconst SET_TOTAL_COUNT = 'SET_TOTAL_COUNT';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\n\r\n//типизация--------------------------------\r\n//----------стейта-------------------------\r\nexport type Brands = {\r\n  _id: string;\r\n  name: string;\r\n  __v: number;\r\n};\r\nexport type TypeDeviceType = {\r\n  _id: string;\r\n  name: string;\r\n  brands: Brands[];\r\n  __v: number;\r\n};\r\nexport type InfoType = {\r\n  title: string;\r\n  discription: string;\r\n  __v: number;\r\n};\r\nexport type DeviceType = {\r\n  _id: string;\r\n  name: string;\r\n  price: number;\r\n  picture: string;\r\n  info: InfoType[];\r\n  typeId: string;\r\n  brandId: string;\r\n  __v: number;\r\n};\r\nexport type BrandType = {\r\n  _id: string;\r\n  name: string;\r\n  __v: number;\r\n};\r\n\r\nexport type InitialStateType = {\r\n  devices: DeviceType[];\r\n  brands: BrandType[];\r\n  types: TypeDeviceType[];\r\n  totalCount: number;\r\n  limit: number;\r\n  currentPage: number;\r\n};\r\n//------- action---------------------------\r\nexport type setDevicesActionType = {\r\n  type: typeof SET_DEVICES;\r\n  payload: DeviceType[];\r\n};\r\nexport type setTypesActionType = {\r\n  type: typeof SET_TYPES;\r\n  payload: TypeDeviceType[];\r\n};\r\nexport type setBrandsActionType = {\r\n  type: typeof SET_BRANDS;\r\n  payload: BrandType[];\r\n};\r\nexport type setTotalCountActionType = {\r\n  type: typeof SET_TOTAL_COUNT;\r\n  payload: number;\r\n};\r\nexport type setCurrentPageActionType = {\r\n  type: typeof SET_CURRENT_PAGE;\r\n  payload: number;\r\n};\r\nexport type DeviceAtionType =\r\n  | setDevicesActionType\r\n  | setTypesActionType\r\n  | setBrandsActionType\r\n  | setTotalCountActionType\r\n  | setCurrentPageActionType;\r\n\r\n//-----------------------------------------\r\n\r\nconst initialState: InitialStateType = {\r\n  devices: [], //массив устройств\r\n  types: [], //массив типов устройств\r\n  brands: [], // массив брэндов устройств\r\n  //---пагинация----\r\n  totalCount: 0, // общее количество устройств(для пагинации)\r\n  limit: 10, // количество устройств на станице\r\n  currentPage: 1, // текущая страница\r\n};\r\n\r\nexport const deviceReducer = (\r\n  state = initialState,\r\n  action: DeviceAtionType\r\n) => {\r\n  switch (action.type) {\r\n    case SET_DEVICES:\r\n      return {\r\n        ...state,\r\n        device: action.payload,\r\n      };\r\n    case SET_TYPES:\r\n      return {\r\n        ...state,\r\n        types: action.payload,\r\n      };\r\n    case SET_BRANDS:\r\n      return {\r\n        ...state,\r\n        brands: action.payload,\r\n      };\r\n    case SET_TOTAL_COUNT:\r\n      return {\r\n        ...state,\r\n        totalCount: action.payload,\r\n      };\r\n    case SET_CURRENT_PAGE:\r\n      return {\r\n        ...state,\r\n        currentPage: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// записывает устройства\r\nexport const setDevices = (data: DeviceType[]): setDevicesActionType => ({\r\n  type: SET_DEVICES,\r\n  payload: data,\r\n});\r\n// записываем общее количество устройств(для пагинации)\r\nexport const setTotalCount = (data: number): setTotalCountActionType => ({\r\n  type: SET_TOTAL_COUNT,\r\n  payload: data,\r\n});\r\n// записываем типы устройств\r\nexport const setTypes = (data: TypeDeviceType[]): setTypesActionType => ({\r\n  type: SET_TYPES,\r\n  payload: data,\r\n});\r\n// записываем бренды устройств\r\nexport const setBrands = (data: BrandType[]): setBrandsActionType => ({\r\n  type: SET_BRANDS,\r\n  payload: data,\r\n});\r\n// записываем текущую страницу\r\nexport const setCurrentPage = (data: number): setCurrentPageActionType => ({\r\n  type: SET_CURRENT_PAGE,\r\n  payload: data,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}