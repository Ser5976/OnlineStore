{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\components\\\\DeviceData.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { MenuItem } from '@material-ui/core';\nimport { DropzoneArea } from 'material-ui-dropzone'; // загрузка файлов\n\nimport ArrowForwardSharpIcon from '@material-ui/icons/ArrowForwardSharp';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//схема валидации---------------------\nconst schema = yup.object().shape({\n  types: yup.string().required('Пожалуйста, выберите тип'),\n  brands: yup.string().required('Пожалуйста, выберите брэнд'),\n  name: yup.string().required('Поле обязательное для заполнения'),\n  price: yup.string().required('Поле обязательное для заполнения')\n}); //-----------------------------------------\n// типизация пропсов\n\n//--------------------------------------------\nconst useStyles = makeStyles(theme => ({\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(1)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  },\n  link: {\n    pointerEvents: 'none'\n  },\n  button: {\n    margin: '15px 15x'\n  },\n  dropzone: {\n    minHeight: 50,\n    // marginTop: 15,\n    border: '0px',\n    '& \t.MuiDropzoneArea-text': {\n      color: '#3f51b5',\n      fontSize: '1.00rem'\n    },\n    '& \t.MuiDropzoneArea-icon': {\n      color: '#3f51b5'\n    }\n  }\n}));\n\nconst DeviceData = ({\n  types,\n  brands,\n  handleNext\n}) => {\n  _s();\n\n  const history = useHistory();\n  const classes = useStyles();\n  const {\n    handleSubmit,\n    control,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(schema),\n    mode: 'onChange'\n  }); // получение данных из формы и отправка на сервак(авторизация или регистрация)\n\n  const onSubmit = data => {\n    //console.log('Отправлено:', data);\n    handleNext();\n  }; // console.log('Отправлено:', errors);\n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    noValidate: true,\n    className: classes.form,\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      component: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        component: \"main\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          style: {\n            padding: '5px 5px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Controller, {\n            name: \"types\",\n            control: control,\n            defaultValue: \"\",\n            render: ({\n              field\n            }) => {\n              var _errors$types;\n\n              return /*#__PURE__*/_jsxDEV(TextField, { ...field,\n                variant: \"outlined\",\n                margin: \"normal\",\n                required: true,\n                fullWidth: true,\n                id: \"type\",\n                label: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0442\\u0438\\u043F\",\n                autoFocus: true,\n                error: !!errors.types,\n                select: true,\n                helperText: errors.types ? (_errors$types = errors.types) === null || _errors$types === void 0 ? void 0 : _errors$types.message : null,\n                children: types.map((item, index) => {\n                  return /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: item._id,\n                    children: item.name\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 107,\n                    columnNumber: 23\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 17\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            fullWidth: true,\n            children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0442\\u0438\\u043F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          style: {\n            padding: '5px 5px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Controller, {\n            name: \"brands\",\n            control: control,\n            defaultValue: \"\",\n            render: ({\n              field\n            }) => {\n              var _errors$brands;\n\n              return /*#__PURE__*/_jsxDEV(TextField, { ...field,\n                variant: \"outlined\",\n                margin: \"normal\",\n                required: true,\n                fullWidth: true,\n                id: \"brands\",\n                label: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0431\\u0440\\u044D\\u043D\\u0434\",\n                error: !!errors.brands,\n                select: true,\n                helperText: errors.brands ? (_errors$brands = errors.brands) === null || _errors$brands === void 0 ? void 0 : _errors$brands.message : null,\n                children: brands.map((item, index) => {\n                  return /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: item._id,\n                    children: item.name\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 140,\n                    columnNumber: 23\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 17\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            fullWidth: true,\n            children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0431\\u0440\\u044D\\u043D\\u0434\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"name\",\n        control: control,\n        defaultValue: \"\",\n        render: ({\n          field\n        }) => {\n          var _errors$name;\n\n          return /*#__PURE__*/_jsxDEV(TextField, { ...field,\n            variant: \"outlined\",\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            id: \"name\",\n            label: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0443\\u0441\\u0442\\u0440\\u043E\\u0439\\u0441\\u0442\\u0432\\u0430\",\n            autoFocus: true,\n            error: !!errors.name,\n            helperText: errors.name ? (_errors$name = errors.name) === null || _errors$name === void 0 ? void 0 : _errors$name.message : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"price\",\n        control: control,\n        defaultValue: \"\",\n        render: ({\n          field\n        }) => {\n          var _errors$price;\n\n          return /*#__PURE__*/_jsxDEV(TextField, { ...field,\n            variant: \"outlined\",\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            id: \"price\",\n            label: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0441\\u0442\\u043E\\u0438\\u043C\\u043E\\u0441\\u0442\\u044C \\u0443\\u0441\\u0442\\u0440\\u043E\\u0439\\u0441\\u0442\\u0432\\u0430\",\n            type: \"number\",\n            autoFocus: true,\n            error: !!errors.price,\n            helperText: errors.price ? (_errors$price = errors.price) === null || _errors$price === void 0 ? void 0 : _errors$price.message : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"picture\",\n        control: control,\n        render: ({\n          field\n        }) => /*#__PURE__*/_jsxDEV(DropzoneArea, { ...field,\n          dropzoneText: \"\\u041F\\u0435\\u0440\\u0435\\u0442\\u0430\\u0449\\u0438\\u0442\\u0435 \\u0441\\u044E\\u0434\\u0430 \\u0444\\u0430\\u0439\\u043B \\u0438\\u043B\\u0438 \\u0449\\u0435\\u043B\\u043A\\u043D\\u0438\\u0442\\u0435\",\n          dropzoneClass: classes.dropzone\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      color: \"primary\",\n      fullWidth: true,\n      className: classes.submit,\n      children: /*#__PURE__*/_jsxDEV(ArrowForwardSharpIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DeviceData, \"KGe7YBJ7JGZw3p2a3kR+lbmR1Sw=\", false, function () {\n  return [useHistory, useStyles, useForm];\n});\n\n_c = DeviceData;\nexport default DeviceData;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeviceData\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/components/DeviceData.tsx"],"names":["React","useForm","Controller","yupResolver","yup","Button","TextField","MenuItem","DropzoneArea","ArrowForwardSharpIcon","Grid","makeStyles","useHistory","schema","object","shape","types","string","required","brands","name","price","useStyles","theme","form","width","marginTop","spacing","submit","margin","link","pointerEvents","button","dropzone","minHeight","border","color","fontSize","DeviceData","handleNext","history","classes","handleSubmit","control","formState","errors","resolver","mode","onSubmit","data","padding","field","message","map","item","index","_id"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useForm, SubmitHandler, Controller } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { MenuItem } from '@material-ui/core';\r\nimport { DropzoneArea } from 'material-ui-dropzone'; // загрузка файлов\r\nimport ArrowForwardSharpIcon from '@material-ui/icons/ArrowForwardSharp';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { TypeDeviceType, BrandType } from '../store/reducer/deviceReducer';\r\n\r\n//типизация данных\r\ntype DataDeviceType = {\r\n  name: string;\r\n  price: number;\r\n  picture: any;\r\n  typeId: string;\r\n  brandId: string;\r\n};\r\n\r\n//схема валидации---------------------\r\nconst schema = yup.object().shape({\r\n  types: yup.string().required('Пожалуйста, выберите тип'),\r\n  brands: yup.string().required('Пожалуйста, выберите брэнд'),\r\n  name: yup.string().required('Поле обязательное для заполнения'),\r\n  price: yup.string().required('Поле обязательное для заполнения'),\r\n});\r\n//-----------------------------------------\r\n// типизация пропсов\r\ntype PropsType = {\r\n  types: TypeDeviceType[];\r\n  brands: BrandType[];\r\n  handleNext: () => void;\r\n};\r\n//--------------------------------------------\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  form: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  link: {\r\n    pointerEvents: 'none',\r\n  },\r\n  button: {\r\n    margin: '15px 15x',\r\n  },\r\n  dropzone: {\r\n    minHeight: 50,\r\n    // marginTop: 15,\r\n    border: '0px',\r\n    '& \t.MuiDropzoneArea-text': { color: '#3f51b5', fontSize: '1.00rem' },\r\n    '& \t.MuiDropzoneArea-icon': { color: '#3f51b5' },\r\n  },\r\n}));\r\n\r\nconst DeviceData: React.FC<PropsType> = ({ types, brands, handleNext }) => {\r\n  const history: any = useHistory();\r\n  const classes = useStyles();\r\n  const {\r\n    handleSubmit,\r\n    control,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n    mode: 'onChange',\r\n  });\r\n  // получение данных из формы и отправка на сервак(авторизация или регистрация)\r\n  const onSubmit: SubmitHandler<DataDeviceType> = (\r\n    data: DataDeviceType\r\n  ): void => {\r\n    //console.log('Отправлено:', data);\r\n    handleNext();\r\n  };\r\n  // console.log('Отправлено:', errors);\r\n  return (\r\n    <form noValidate className={classes.form} onSubmit={handleSubmit(onSubmit)}>\r\n      <Grid container component=\"main\">\r\n        <Grid container component=\"main\">\r\n          <Grid item xs={12} sm={6} style={{ padding: '5px 5px' }}>\r\n            <Controller\r\n              name=\"types\"\r\n              control={control}\r\n              defaultValue=\"\"\r\n              render={({ field }) => (\r\n                <TextField\r\n                  {...field}\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"type\"\r\n                  label=\"Выберите тип\"\r\n                  autoFocus\r\n                  error={!!errors.types}\r\n                  select\r\n                  helperText={errors.types ? errors.types?.message : null}\r\n                >\r\n                  {types.map((item, index) => {\r\n                    return (\r\n                      <MenuItem value={item._id} key={index}>\r\n                        {item.name}\r\n                      </MenuItem>\r\n                    );\r\n                  })}\r\n                </TextField>\r\n              )}\r\n            />\r\n            <Button variant=\"contained\" color=\"primary\" fullWidth>\r\n              Добавить тип\r\n            </Button>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={6} style={{ padding: '5px 5px' }}>\r\n            <Controller\r\n              name=\"brands\"\r\n              control={control}\r\n              defaultValue=\"\"\r\n              render={({ field }) => (\r\n                <TextField\r\n                  {...field}\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"brands\"\r\n                  label=\"Выберите брэнд\"\r\n                  error={!!errors.brands}\r\n                  select\r\n                  helperText={errors.brands ? errors.brands?.message : null}\r\n                >\r\n                  {brands.map((item, index) => {\r\n                    return (\r\n                      <MenuItem value={item._id} key={index}>\r\n                        {item.name}\r\n                      </MenuItem>\r\n                    );\r\n                  })}\r\n                </TextField>\r\n              )}\r\n            />\r\n            <Button variant=\"contained\" color=\"primary\" fullWidth>\r\n              Добавить брэнд\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Controller\r\n          name=\"name\"\r\n          control={control}\r\n          defaultValue=\"\"\r\n          render={({ field }) => (\r\n            <TextField\r\n              {...field}\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"name\"\r\n              label=\"Введите название устройства\"\r\n              autoFocus\r\n              error={!!errors.name}\r\n              helperText={errors.name ? errors.name?.message : null}\r\n            />\r\n          )}\r\n        />\r\n        <Controller\r\n          name=\"price\"\r\n          control={control}\r\n          defaultValue=\"\"\r\n          render={({ field }) => (\r\n            <TextField\r\n              {...field}\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"price\"\r\n              label=\"Введите стоимость устройства\"\r\n              type=\"number\"\r\n              autoFocus\r\n              error={!!errors.price}\r\n              helperText={errors.price ? errors.price?.message : null}\r\n            />\r\n          )}\r\n        />\r\n        <Controller\r\n          name=\"picture\"\r\n          control={control}\r\n          render={({ field }) => (\r\n            <DropzoneArea\r\n              {...field}\r\n              dropzoneText=\"Перетащите сюда файл или щелкните\"\r\n              dropzoneClass={classes.dropzone}\r\n            />\r\n          )}\r\n        />\r\n      </Grid>\r\n      <Button\r\n        type=\"submit\"\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        fullWidth\r\n        className={classes.submit}\r\n      >\r\n        <ArrowForwardSharpIcon />\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\nexport default DeviceData;\r\n"]},"metadata":{},"sourceType":"module"}