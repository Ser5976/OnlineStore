{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\pages\\\\Content.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport { useLocation, useHistory } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport Pagination from '@material-ui/lab/Pagination';\nimport PaginationItem from '@material-ui/lab/PaginationItem';\nimport TypeBar from '../components/TypeBar';\nimport DeviceContainer from '../components/DeviceContainer';\n//типизиция всего стора\nimport { setTypeId, //запись выбранного типа устройства\nsetBrandId //запись выбранного  брэнда устройства\n} from '../store/reducer/deviceReducer';\n//типизация данных\nimport { getDevices, getTypes } from '../action/deviceAction'; //запрос на получение устройств  и типов устройств\n\nimport { connect } from 'react-redux'; //типизация--------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//-----------------------------------------\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    '& > *': {\n      marginTop: theme.spacing(2)\n    },\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginBottom: theme.spacing(2)\n  },\n  grid: {\n    width: '100%',\n    height: '100%',\n    overflow: 'auto'\n  },\n  textTitle: {\n    textShadow: '1px 1px #9a0036',\n    color: '#9a0036',\n    marginTop: '25px'\n  }\n}));\n\nconst Content = ({\n  getDevices,\n  getTypes,\n  setTypeId,\n  setBrandId,\n  devices,\n  types,\n  pageQty,\n  limit,\n  typeId,\n  brandId,\n  isLoadinDevice,\n  isFetchErrorDevice,\n  isLoadinTypes,\n  isFetchErrorTypes\n}) => {\n  _s();\n\n  var _searchPage$search;\n\n  const classes = useStyles();\n  const searchPage = useLocation(); // для получения строки запроса\n\n  const history = useHistory(); //для возвращения на главную страницу\n  //console.log(search);\n  // пагинация, данные о текущей странице( по умолчанию: 1 или, если есть ,информация о текущей странице в адресной строке )\n\n  const [page, setPage] = useState(parseInt(((_searchPage$search = searchPage.search) === null || _searchPage$search === void 0 ? void 0 : _searchPage$search.split('=')[1]) || '1')); // изменения текущей страницы\n\n  const handleChange = (event, value) => {\n    setPage(value);\n  }; // запрос на сервак для получения устройств(фильтруем устройства по типу и бренду,а также пагинация)\n\n\n  useEffect(() => {\n    getDevices(typeId, brandId, limit, page, setPage, history); // eslint-disable-next-line\n  }, [typeId, brandId, page]); // загрузка типов устройств\n\n  useEffect(() => {\n    getTypes(); // eslint-disable-next-line\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    container: true,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 2,\n      className: classes.grid,\n      children: isFetchErrorTypes ? /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        color: \"error\",\n        children: \"\\u0427\\u0442\\u043E-\\u0442\\u043E \\u043F\\u043E\\u0448\\u043B\\u043E \\u043D\\u0435 \\u0442\\u0430\\u043A!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(TypeBar, {\n        types: types,\n        setTypeId: setTypeId,\n        setBrandId: setBrandId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 10,\n      children: [/*#__PURE__*/_jsxDEV(DeviceContainer, {\n        devices: devices\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), !!pageQty && /*#__PURE__*/_jsxDEV(Pagination, {\n        className: classes.root,\n        count: pageQty,\n        page: page,\n        showFirstButton: true,\n        showLastButton: true,\n        onChange: handleChange // интегрируем роутер\n        ,\n        renderItem: item => /*#__PURE__*/_jsxDEV(PaginationItem, {\n          component: Link,\n          to: `/?page=${item.page}`,\n          ...item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Content, \"cWGXFPQie+uEVCYyGe84rIs2Zb0=\", false, function () {\n  return [useStyles, useLocation, useHistory];\n});\n\n_c = Content;\n\nconst mapStateToProps = state => {\n  return {\n    devices: state.devices.devices,\n    //устройства\n    types: state.devices.types,\n    //типы устройств\n    pageQty: state.devices.pageQty,\n    //количества страниц\n    limit: state.devices.limit,\n    //сколько устройств на странице\n    typeId: state.devices.typeId,\n    // айдишник типа\n    brandId: state.devices.brandId,\n    // айдишник брэнда\n    isLoadinDevice: state.devices.isLoadinDevice,\n    //крутилка у стройств\n    isLoadinTypes: state.devices.isLoadinTypes,\n    //крутилка типов\n    isFetchErrorDevice: state.devices.isFetchErrorDevice,\n    //ошибка устройств\n    isFetchErrorTypes: state.devices.isFetchErrorTypes //ошибка типов\n\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getDevices,\n  getTypes,\n  setTypeId,\n  setBrandId\n})(Content);\n\nvar _c;\n\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/pages/Content.tsx"],"names":["React","useEffect","useState","Grid","Typography","makeStyles","createStyles","useLocation","useHistory","Link","Pagination","PaginationItem","TypeBar","DeviceContainer","setTypeId","setBrandId","getDevices","getTypes","connect","useStyles","theme","root","marginTop","spacing","display","flexDirection","justifyContent","marginBottom","grid","width","height","overflow","textTitle","textShadow","color","Content","devices","types","pageQty","limit","typeId","brandId","isLoadinDevice","isFetchErrorDevice","isLoadinTypes","isFetchErrorTypes","classes","searchPage","history","page","setPage","parseInt","search","split","handleChange","event","value","item","mapStateToProps","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,0BAAzC;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,cAAxC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AAEA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,eAAP,MAA4B,+BAA5B;AACgD;AAChD,SACEC,SADF,EACa;AACXC,UAFF,CAEc;AAFd,OAGO,gCAHP;AAQ6E;AAC7E,SAASC,UAAT,EAAqBC,QAArB,QAAqC,wBAArC,C,CAA+D;;AAC/D,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;;;AA4BA;AACA,MAAMC,SAAS,GAAGd,UAAU,CAAEe,KAAD,IAC3Bd,YAAY,CAAC;AACXe,EAAAA,IAAI,EAAE;AACJ,aAAS;AACPC,MAAAA,SAAS,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd;AADJ,KADL;AAIJC,IAAAA,OAAO,EAAE,MAJL;AAKJC,IAAAA,aAAa,EAAE,KALX;AAMJC,IAAAA,cAAc,EAAE,QANZ;AAOJC,IAAAA,YAAY,EAAEP,KAAK,CAACG,OAAN,CAAc,CAAd;AAPV,GADK;AAUXK,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,MADH;AAEJC,IAAAA,MAAM,EAAE,MAFJ;AAGJC,IAAAA,QAAQ,EAAE;AAHN,GAVK;AAeXC,EAAAA,SAAS,EAAE;AACTC,IAAAA,UAAU,EAAE,iBADH;AAETC,IAAAA,KAAK,EAAE,SAFE;AAGTZ,IAAAA,SAAS,EAAE;AAHF;AAfA,CAAD,CADc,CAA5B;;AAwBA,MAAMa,OAA4B,GAAG,CAAC;AACpCnB,EAAAA,UADoC;AAEpCC,EAAAA,QAFoC;AAGpCH,EAAAA,SAHoC;AAIpCC,EAAAA,UAJoC;AAKpCqB,EAAAA,OALoC;AAMpCC,EAAAA,KANoC;AAOpCC,EAAAA,OAPoC;AAQpCC,EAAAA,KARoC;AASpCC,EAAAA,MAToC;AAUpCC,EAAAA,OAVoC;AAWpCC,EAAAA,cAXoC;AAYpCC,EAAAA,kBAZoC;AAapCC,EAAAA,aAboC;AAcpCC,EAAAA;AAdoC,CAAD,KAe/B;AAAA;;AAAA;;AACJ,QAAMC,OAAO,GAAG3B,SAAS,EAAzB;AACA,QAAM4B,UAAU,GAAGxC,WAAW,EAA9B,CAFI,CAE8B;;AAClC,QAAMyC,OAAO,GAAGxC,UAAU,EAA1B,CAHI,CAG0B;AAC9B;AACA;;AACA,QAAM,CAACyC,IAAD,EAAOC,OAAP,IAAkBhD,QAAQ,CAC9BiD,QAAQ,CAAC,uBAAAJ,UAAU,CAACK,MAAX,0EAAmBC,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,MAAoC,GAArC,CADsB,CAAhC,CANI,CASJ;;AACA,QAAMC,YAAY,GAAG,CAACC,KAAD,EAAoCC,KAApC,KAAsD;AACzEN,IAAAA,OAAO,CAACM,KAAD,CAAP;AACD,GAFD,CAVI,CAaJ;;;AACAvD,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,UAAU,CAACwB,MAAD,EAASC,OAAT,EAAkBF,KAAlB,EAAyBU,IAAzB,EAA+BC,OAA/B,EAAwCF,OAAxC,CAAV,CADc,CAEd;AACD,GAHQ,EAGN,CAACR,MAAD,EAASC,OAAT,EAAkBQ,IAAlB,CAHM,CAAT,CAdI,CAkBJ;;AACAhD,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,QAAQ,GADM,CAEd;AACD,GAHQ,EAGN,EAHM,CAAT;AAIA,sBACE,QAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,SAAS,MAApB;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAmB,MAAA,EAAE,EAAE,CAAvB;AAA0B,MAAA,SAAS,EAAE6B,OAAO,CAAClB,IAA7C;AAAA,gBACGiB,iBAAiB,gBAChB,QAAC,UAAD;AAAY,QAAA,KAAK,EAAC,QAAlB;AAA2B,QAAA,KAAK,EAAC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADgB,gBAKhB,QAAC,OAAD;AACE,QAAA,KAAK,EAAER,KADT;AAEE,QAAA,SAAS,EAAEvB,SAFb;AAGE,QAAA,UAAU,EAAEC;AAHd;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,YADF,eAcE,QAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAmB,MAAA,EAAE,EAAE,EAAvB;AAAA,8BACE,QAAC,eAAD;AAAiB,QAAA,OAAO,EAAEqB;AAA1B;AAAA;AAAA;AAAA;AAAA,cADF,EAEG,CAAC,CAACE,OAAF,iBACC,QAAC,UAAD;AACE,QAAA,SAAS,EAAEQ,OAAO,CAACzB,IADrB;AAEE,QAAA,KAAK,EAAEiB,OAFT;AAGE,QAAA,IAAI,EAAEW,IAHR;AAIE,QAAA,eAAe,MAJjB;AAKE,QAAA,cAAc,MALhB;AAME,QAAA,QAAQ,EAAEK,YANZ,CAOE;AAPF;AAQE,QAAA,UAAU,EAAGG,IAAD,iBACV,QAAC,cAAD;AACE,UAAA,SAAS,EAAEhD,IADb;AAEE,UAAA,EAAE,EAAG,UAASgD,IAAI,CAACR,IAAK,EAF1B;AAAA,aAGMQ;AAHN;AAAA;AAAA;AAAA;AAAA;AATJ;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsCD,CA5ED;;GAAMtB,O;UAgBYhB,S,EACGZ,W,EACHC,U;;;KAlBZ2B,O;;AA6EN,MAAMuB,eAAe,GAAIC,KAAD,IAA+C;AACrE,SAAO;AACLvB,IAAAA,OAAO,EAAEuB,KAAK,CAACvB,OAAN,CAAcA,OADlB;AAC2B;AAChCC,IAAAA,KAAK,EAAEsB,KAAK,CAACvB,OAAN,CAAcC,KAFhB;AAEuB;AAC5BC,IAAAA,OAAO,EAAEqB,KAAK,CAACvB,OAAN,CAAcE,OAHlB;AAG2B;AAChCC,IAAAA,KAAK,EAAEoB,KAAK,CAACvB,OAAN,CAAcG,KAJhB;AAIuB;AAC5BC,IAAAA,MAAM,EAAEmB,KAAK,CAACvB,OAAN,CAAcI,MALjB;AAKyB;AAC9BC,IAAAA,OAAO,EAAEkB,KAAK,CAACvB,OAAN,CAAcK,OANlB;AAM2B;AAChCC,IAAAA,cAAc,EAAEiB,KAAK,CAACvB,OAAN,CAAcM,cAPzB;AAOyC;AAC9CE,IAAAA,aAAa,EAAEe,KAAK,CAACvB,OAAN,CAAcQ,aARxB;AAQuC;AAC5CD,IAAAA,kBAAkB,EAAEgB,KAAK,CAACvB,OAAN,CAAcO,kBAT7B;AASiD;AACtDE,IAAAA,iBAAiB,EAAEc,KAAK,CAACvB,OAAN,CAAcS,iBAV5B,CAU+C;;AAV/C,GAAP;AAYD,CAbD;;AAcA,eAAe3B,OAAO,CAKpBwC,eALoB,EAKH;AACjB1C,EAAAA,UADiB;AAEjBC,EAAAA,QAFiB;AAGjBH,EAAAA,SAHiB;AAIjBC,EAAAA;AAJiB,CALG,CAAP,CAUZoB,OAVY,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\nimport { useLocation, useHistory } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport PaginationItem from '@material-ui/lab/PaginationItem';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport TypeBar from '../components/TypeBar';\r\nimport DeviceContainer from '../components/DeviceContainer';\r\nimport { RootStateType } from '../store/store'; //типизиция всего стора\r\nimport {\r\n  setTypeId, //запись выбранного типа устройства\r\n  setBrandId, //запись выбранного  брэнда устройства\r\n} from '../store/reducer/deviceReducer';\r\nimport {\r\n  setTypeIdActionType,\r\n  setBrandIdActionType,\r\n} from '../store/reducer/deviceReducer'; // типизация экшенов\r\nimport { DeviceType, TypeDeviceType } from '../store/reducer/deviceReducer'; //типизация данных\r\nimport { getDevices, getTypes } from '../action/deviceAction'; //запрос на получение устройств  и типов устройств\r\nimport { connect } from 'react-redux';\r\n\r\n//типизация--------------------------------\r\ntype MapStateToPropsType = {\r\n  devices: DeviceType[];\r\n  types: TypeDeviceType[];\r\n  pageQty: number;\r\n  limit: number;\r\n  typeId: string | null;\r\n  brandId: string | null;\r\n  isLoadinDevice: boolean;\r\n  isFetchErrorDevice: boolean;\r\n  isLoadinTypes: boolean;\r\n  isFetchErrorTypes: boolean;\r\n};\r\ntype MapDispathPropsType = {\r\n  getDevices: (\r\n    typeId: string | null,\r\n    brandId: string | null,\r\n    limit: number,\r\n    page: number,\r\n    setPage: React.Dispatch<React.SetStateAction<number>>,\r\n    history: any\r\n  ) => void;\r\n  getTypes: () => void;\r\n  setTypeId: (data: string | null) => setTypeIdActionType;\r\n  setBrandId: (data: string | null) => setBrandIdActionType;\r\n};\r\n\r\ntype PropsType = MapDispathPropsType & MapStateToPropsType;\r\n//-----------------------------------------\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root: {\r\n      '& > *': {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      justifyContent: 'center',\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n    grid: {\r\n      width: '100%',\r\n      height: '100%',\r\n      overflow: 'auto',\r\n    },\r\n    textTitle: {\r\n      textShadow: '1px 1px #9a0036',\r\n      color: '#9a0036',\r\n      marginTop: '25px',\r\n    },\r\n  })\r\n);\r\n\r\nconst Content: React.FC<PropsType> = ({\r\n  getDevices,\r\n  getTypes,\r\n  setTypeId,\r\n  setBrandId,\r\n  devices,\r\n  types,\r\n  pageQty,\r\n  limit,\r\n  typeId,\r\n  brandId,\r\n  isLoadinDevice,\r\n  isFetchErrorDevice,\r\n  isLoadinTypes,\r\n  isFetchErrorTypes,\r\n}) => {\r\n  const classes = useStyles();\r\n  const searchPage = useLocation(); // для получения строки запроса\r\n  const history = useHistory(); //для возвращения на главную страницу\r\n  //console.log(search);\r\n  // пагинация, данные о текущей странице( по умолчанию: 1 или, если есть ,информация о текущей странице в адресной строке )\r\n  const [page, setPage] = useState(\r\n    parseInt(searchPage.search?.split('=')[1] || '1')\r\n  );\r\n  // изменения текущей страницы\r\n  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n    setPage(value);\r\n  };\r\n  // запрос на сервак для получения устройств(фильтруем устройства по типу и бренду,а также пагинация)\r\n  useEffect(() => {\r\n    getDevices(typeId, brandId, limit, page, setPage, history);\r\n    // eslint-disable-next-line\r\n  }, [typeId, brandId, page]);\r\n  // загрузка типов устройств\r\n  useEffect(() => {\r\n    getTypes();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  return (\r\n    <Grid item container>\r\n      <Grid item xs={12} sm={2} className={classes.grid}>\r\n        {isFetchErrorTypes ? (\r\n          <Typography align=\"center\" color=\"error\">\r\n            Что-то пошло не так!\r\n          </Typography>\r\n        ) : (\r\n          <TypeBar\r\n            types={types}\r\n            setTypeId={setTypeId}\r\n            setBrandId={setBrandId}\r\n          />\r\n        )}\r\n      </Grid>\r\n      <Grid item xs={12} sm={10}>\r\n        <DeviceContainer devices={devices} />\r\n        {!!pageQty && (\r\n          <Pagination\r\n            className={classes.root}\r\n            count={pageQty}\r\n            page={page}\r\n            showFirstButton\r\n            showLastButton\r\n            onChange={handleChange}\r\n            // интегрируем роутер\r\n            renderItem={(item) => (\r\n              <PaginationItem\r\n                component={Link}\r\n                to={`/?page=${item.page}`}\r\n                {...item}\r\n              />\r\n            )}\r\n          />\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n  return {\r\n    devices: state.devices.devices, //устройства\r\n    types: state.devices.types, //типы устройств\r\n    pageQty: state.devices.pageQty, //количества страниц\r\n    limit: state.devices.limit, //сколько устройств на странице\r\n    typeId: state.devices.typeId, // айдишник типа\r\n    brandId: state.devices.brandId, // айдишник брэнда\r\n    isLoadinDevice: state.devices.isLoadinDevice, //крутилка у стройств\r\n    isLoadinTypes: state.devices.isLoadinTypes, //крутилка типов\r\n    isFetchErrorDevice: state.devices.isFetchErrorDevice, //ошибка устройств\r\n    isFetchErrorTypes: state.devices.isFetchErrorTypes, //ошибка типов\r\n  };\r\n};\r\nexport default connect<\r\n  MapStateToPropsType,\r\n  MapDispathPropsType,\r\n  unknown, // личные пропсы\r\n  RootStateType\r\n>(mapStateToProps, {\r\n  getDevices,\r\n  getTypes,\r\n  setTypeId,\r\n  setBrandId,\r\n})(Content);\r\n"]},"metadata":{},"sourceType":"module"}