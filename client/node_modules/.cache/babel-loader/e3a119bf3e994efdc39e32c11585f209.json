{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\pages\\\\Content.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport Pagination from '@material-ui/lab/Pagination';\nimport PaginationItem from '@material-ui/lab/PaginationItem';\nimport TypeBar from '../components/TypeBar';\nimport DeviceContainer from '../components/DeviceContainer';\n//типизиция всего стора\nimport { setTypeId, //запись выбранного типа устройства\nsetBrandId //запись выбранного  брэнда устройства\n} from '../store/reducer/deviceReducer';\n//типизация данных\nimport { getDevices, getTypes } from '../action/deviceAction'; //запрос на получение устройств  и типов устройств\n\nimport { connect } from 'react-redux'; //типизация--------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//-----------------------------------------\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    '& > *': {\n      marginTop: theme.spacing(2)\n    },\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginBottom: theme.spacing(2)\n  },\n  grid: {\n    width: '100%',\n    height: '100%',\n    overflow: 'auto'\n  }\n}));\n\nconst Content = ({\n  getDevices,\n  getTypes,\n  setTypeId,\n  setBrandId,\n  devices,\n  types,\n  pageQty,\n  limit,\n  typeId,\n  brandId\n}) => {\n  _s();\n\n  var _search$search;\n\n  const classes = useStyles();\n  const search = useLocation();\n  console.log(search); // пагинация, данные о текущей странице( по умолчанию: 1 или если есть информация о текущей странице в адресной строке )\n\n  const [page, setPage] = useState(parseInt(((_search$search = search.search) === null || _search$search === void 0 ? void 0 : _search$search.split('=')[1]) || '1')); // изменения текущей страницы\n\n  const handleChange = (event, value) => {\n    setPage(value);\n  };\n\n  useEffect(() => {\n    getDevices(typeId, brandId, limit, page, setPage); // eslint-disable-next-line\n  }, [typeId, brandId, page]); // загрузка типов устройств\n\n  useEffect(() => {\n    getTypes(); // eslint-disable-next-line\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    container: true,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 2,\n      className: classes.grid,\n      children: /*#__PURE__*/_jsxDEV(TypeBar, {\n        types: types,\n        setTypeId: setTypeId,\n        setBrandId: setBrandId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 10,\n      children: [/*#__PURE__*/_jsxDEV(DeviceContainer, {\n        devices: devices\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        className: classes.root,\n        count: pageQty,\n        page: page,\n        showFirstButton: true,\n        showLastButton: true,\n        onChange: handleChange,\n        renderItem: item => /*#__PURE__*/_jsxDEV(PaginationItem, {\n          component: Link,\n          to: `/?page=${item.page}`,\n          ...item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Content, \"77P2Fv3ebh8RfRv/JJGUHylXWZo=\", false, function () {\n  return [useStyles, useLocation];\n});\n\n_c = Content;\n\nconst mapStateToProps = state => {\n  return {\n    devices: state.devices.devices,\n    //устройства\n    types: state.devices.types,\n    //типы устройств\n    pageQty: state.devices.pageQty,\n    //количества страниц\n    limit: state.devices.limit,\n    //сколько устройств на странице\n    typeId: state.devices.typeId,\n    //\n    brandId: state.devices.brandId //\n\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getDevices,\n  getTypes,\n  setTypeId,\n  setBrandId //setCurrentPage,\n\n})(Content);\n\nvar _c;\n\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/pages/Content.tsx"],"names":["React","useEffect","useState","Grid","makeStyles","createStyles","useLocation","Link","Pagination","PaginationItem","TypeBar","DeviceContainer","setTypeId","setBrandId","getDevices","getTypes","connect","useStyles","theme","root","marginTop","spacing","display","flexDirection","justifyContent","marginBottom","grid","width","height","overflow","Content","devices","types","pageQty","limit","typeId","brandId","classes","search","console","log","page","setPage","parseInt","split","handleChange","event","value","item","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\nimport { useLocation } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport PaginationItem from '@material-ui/lab/PaginationItem';\r\nimport TypeBar from '../components/TypeBar';\r\nimport DeviceContainer from '../components/DeviceContainer';\r\nimport { RootStateType } from '../store/store'; //типизиция всего стора\r\nimport {\r\n  setTypeId, //запись выбранного типа устройства\r\n  setBrandId, //запись выбранного  брэнда устройства\r\n} from '../store/reducer/deviceReducer';\r\nimport {\r\n  setTypeIdActionType,\r\n  setBrandIdActionType,\r\n} from '../store/reducer/deviceReducer'; // типизация экшенов\r\nimport { DeviceType, TypeDeviceType } from '../store/reducer/deviceReducer'; //типизация данных\r\nimport { getDevices, getTypes } from '../action/deviceAction'; //запрос на получение устройств  и типов устройств\r\nimport { connect } from 'react-redux';\r\n\r\n//типизация--------------------------------\r\ntype MapStateToPropsType = {\r\n  devices: DeviceType[];\r\n  types: TypeDeviceType[];\r\n  pageQty: number;\r\n  limit: number;\r\n  typeId: string | null;\r\n  brandId: string | null;\r\n};\r\ntype MapDispathPropsType = {\r\n  getDevices: (\r\n    typeId: string | null,\r\n    brandId: string | null,\r\n    limit: number,\r\n    page: number,\r\n    setPage: React.Dispatch<React.SetStateAction<number>>\r\n  ) => void;\r\n  getTypes: () => void;\r\n  setTypeId: (data: string | null) => setTypeIdActionType;\r\n  setBrandId: (data: string | null) => setBrandIdActionType;\r\n  // setCurrentPage: (data: number) => setCurrentPageActionType;\r\n};\r\n\r\ntype PropsType = MapDispathPropsType & MapStateToPropsType;\r\n//-----------------------------------------\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root: {\r\n      '& > *': {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      justifyContent: 'center',\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n    grid: {\r\n      width: '100%',\r\n      height: '100%',\r\n      overflow: 'auto',\r\n    },\r\n  })\r\n);\r\n\r\nconst Content: React.FC<PropsType> = ({\r\n  getDevices,\r\n  getTypes,\r\n  setTypeId,\r\n  setBrandId,\r\n  devices,\r\n  types,\r\n  pageQty,\r\n  limit,\r\n  typeId,\r\n  brandId,\r\n}) => {\r\n  const classes = useStyles();\r\n  const search = useLocation();\r\n  console.log(search);\r\n  // пагинация, данные о текущей странице( по умолчанию: 1 или если есть информация о текущей странице в адресной строке )\r\n  const [page, setPage] = useState(\r\n    parseInt(search.search?.split('=')[1] || '1')\r\n  );\r\n  // изменения текущей страницы\r\n  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n    setPage(value);\r\n  };\r\n  useEffect(() => {\r\n    getDevices(typeId, brandId, limit, page, setPage);\r\n    // eslint-disable-next-line\r\n  }, [typeId, brandId, page]);\r\n  // загрузка типов устройств\r\n  useEffect(() => {\r\n    getTypes();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  return (\r\n    <Grid item container>\r\n      <Grid item xs={12} sm={2} className={classes.grid}>\r\n        <TypeBar types={types} setTypeId={setTypeId} setBrandId={setBrandId} />\r\n      </Grid>\r\n      <Grid item xs={12} sm={10}>\r\n        <DeviceContainer devices={devices} />\r\n        <Pagination\r\n          className={classes.root}\r\n          count={pageQty}\r\n          page={page}\r\n          showFirstButton\r\n          showLastButton\r\n          onChange={handleChange}\r\n          renderItem={(item) => (\r\n            <PaginationItem\r\n              component={Link}\r\n              to={`/?page=${item.page}`}\r\n              {...item}\r\n            />\r\n          )}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n  return {\r\n    devices: state.devices.devices, //устройства\r\n    types: state.devices.types, //типы устройств\r\n    pageQty: state.devices.pageQty, //количества страниц\r\n    limit: state.devices.limit, //сколько устройств на странице\r\n    typeId: state.devices.typeId, //\r\n    brandId: state.devices.brandId, //\r\n  };\r\n};\r\nexport default connect<\r\n  MapStateToPropsType,\r\n  MapDispathPropsType,\r\n  unknown, // личные пропсы\r\n  RootStateType\r\n>(mapStateToProps, {\r\n  getDevices,\r\n  getTypes,\r\n  setTypeId,\r\n  setBrandId,\r\n  //setCurrentPage,\r\n})(Content);\r\n"]},"metadata":{},"sourceType":"module"}