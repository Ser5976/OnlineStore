{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\components\\\\Step3.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm, useFieldArray, Controller } from 'react-hook-form';\nimport IconButton from '@material-ui/core/IconButton';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Step3 = () => {\n  _s();\n\n  const {\n    register,\n    control,\n    handleSubmit,\n    reset,\n    watch\n  } = useForm({\n    defaultValues: {\n      test: [{\n        title: 'Bill',\n        description: 'Luo'\n      }]\n    }\n  });\n  const {\n    fields,\n    append,\n    remove\n  } = useFieldArray({\n    control,\n    name: 'test'\n  });\n\n  const onSubmit = data => console.log('data', data); // if you want to control your fields with watch\n  // const watchResult = watch(\"test\");\n  // console.log(watchResult);\n  // The following is useWatch example\n  // console.log(useWatch({ name: \"test\", control }));\n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    children: [fields.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 3,\n          children: /*#__PURE__*/_jsxDEV(Controller, {\n            name: `test.${index}.title`,\n            control: control,\n            render: ({\n              field\n            }) => /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \" \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \",\n              ...field\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 7,\n          children: /*#__PURE__*/_jsxDEV(Controller, {\n            name: `test.${index}.description`,\n            control: control,\n            render: ({\n              field\n            }) => /*#__PURE__*/_jsxDEV(TextField, { ...field,\n              multiline: true,\n              fullWidth: true,\n              label: \" \\u043E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435 \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 2,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: () => remove(index),\n            children: /*#__PURE__*/_jsxDEV(HighlightOffIcon, {\n              style: {\n                fontSize: 30\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => {\n        append({\n          title: 'appendBill',\n          description: 'appendLuo'\n        });\n      },\n      children: \"append\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Step3, \"WII6PHxR+E/tbcf/19zwLPfe/8I=\", false, function () {\n  return [useForm, useFieldArray];\n});\n\n_c = Step3;\nexport default Step3;\n{\n  /* <Grid item xs={12} sm={3}>\r\n                    <Controller\r\n                    name={`test.${index}.title` as const}\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                  <TextField fullWidth label=\" название \" {...field} />\r\n                )}\r\n                />\r\n              <Grid/>\r\n              \r\n              <Grid item xs={12} sm={7}>\r\n                  <Controller\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    multiline\r\n                    fullWidth\r\n                    label=\" описание \"\r\n                  />\r\n                )}\r\n                name={`test.${index}.description`}\r\n                control={control}\r\n              />\r\n              </Grid>\r\n              <Grid item xs={12} sm={2}><button type=\"button\" onClick={() => remove(index)}>\r\n                Delete\r\n              </button>\r\n              <Grid/>  */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Step3\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/components/Step3.tsx"],"names":["React","useForm","useFieldArray","Controller","IconButton","HighlightOffIcon","TextField","Grid","Step3","register","control","handleSubmit","reset","watch","defaultValues","test","title","description","fields","append","remove","name","onSubmit","data","console","log","map","item","index","field","fontSize","id"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useForm, useFieldArray, Controller, useWatch } from 'react-hook-form';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst Step3 = () => {\r\n  const { register, control, handleSubmit, reset, watch } = useForm({\r\n    defaultValues: {\r\n      test: [{ title: 'Bill', description: 'Luo' }],\r\n    },\r\n  });\r\n  const { fields, append, remove } = useFieldArray({\r\n    control,\r\n    name: 'test',\r\n  });\r\n\r\n  const onSubmit = (data: any) => console.log('data', data);\r\n\r\n  // if you want to control your fields with watch\r\n  // const watchResult = watch(\"test\");\r\n  // console.log(watchResult);\r\n\r\n  // The following is useWatch example\r\n  // console.log(useWatch({ name: \"test\", control }));\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      {fields.map((item, index) => {\r\n        return (\r\n          <Grid container spacing={3} key={item.id}>\r\n            <Grid item xs={12} sm={3}>\r\n              <Controller\r\n                name={`test.${index}.title` as const}\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField fullWidth label=\" название \" {...field} />\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={7}>\r\n              <Controller\r\n                name={`test.${index}.description`}\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    multiline\r\n                    fullWidth\r\n                    label=\" описание \"\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={2}>\r\n            <IconButton onClick={() => remove(index)}>\r\n                  <HighlightOffIcon style={{ fontSize: 30 }} />\r\n                </IconButton>\r\n             \r\n            </Grid>\r\n          </Grid>\r\n        );\r\n      })}\r\n\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          append({ title: 'appendBill', description: 'appendLuo' });\r\n        }}\r\n      >\r\n        append\r\n      </button>\r\n\r\n      <input type=\"submit\" />\r\n    </form>\r\n  );\r\n};\r\nexport default Step3;\r\n\r\n{\r\n  /* <Grid item xs={12} sm={3}>\r\n                    <Controller\r\n                    name={`test.${index}.title` as const}\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                  <TextField fullWidth label=\" название \" {...field} />\r\n                )}\r\n                />\r\n              <Grid/>\r\n              \r\n              <Grid item xs={12} sm={7}>\r\n                  <Controller\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    multiline\r\n                    fullWidth\r\n                    label=\" описание \"\r\n                  />\r\n                )}\r\n                name={`test.${index}.description`}\r\n                control={control}\r\n              />\r\n              </Grid>\r\n              <Grid item xs={12} sm={2}><button type=\"button\" onClick={() => remove(index)}>\r\n                Delete\r\n              </button>\r\n              <Grid/>  */\r\n}\r\n"]},"metadata":{},"sourceType":"module"}