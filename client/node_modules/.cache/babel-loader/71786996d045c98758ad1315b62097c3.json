{"ast":null,"code":"import axios from 'axios';\n//типизация всего стора\nimport { ModelUrls } from '../constants/url';\nimport { setErrorMessage, // тип экшенов authReducer\nsetAuth // типизация авторизации редюсера\n} from '../store/reducer/authReducer'; //типизация авторизация\n\n// авторизация\nexport const authorization = value => {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await axios.post(ModelUrls.LOGIN, value);\n      console.log(data);\n      dispatch(setAuth(data)); //запись данных в sessionStorage\n\n      sessionStorage.setItem('token', data.token);\n      sessionStorage.setItem('email', data.email);\n    } catch (e) {\n      dispatch(setErrorMessage(e.message));\n    }\n  };\n}; //регистрация\n\nexport const registration = value => {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await axios.post(ModelUrls.REGISTRATION, value);\n      const authorizationData = {\n        token: data.token,\n        email: data.user.email,\n        role: data.user.role\n      };\n      console.log(authorizationData);\n      sessionStorage.setItem('token', data.token);\n      sessionStorage.setItem('username', data.user.email);\n      dispatch(setAuth(authorizationData));\n    } catch (e) {\n      console.log(e.message);\n      dispatch(setErrorMessage(e.message));\n    }\n  };\n};","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/action/authAction.ts"],"names":["axios","ModelUrls","setErrorMessage","setAuth","authorization","value","dispatch","data","post","LOGIN","console","log","sessionStorage","setItem","token","email","e","message","registration","REGISTRATION","authorizationData","user","role"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEgD;AAChD,SAASC,SAAT,QAA0B,kBAA1B;AACA,SACEC,eADF,EAEiB;AACfC,OAHF,CAImB;AAJnB,OAKO,8BALP,C,CAMA;;AAYA;AACA,OAAO,MAAMC,aAAa,GAAIC,KAAD,IAAgC;AAC3D,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMP,KAAK,CAACQ,IAAN,CAAWP,SAAS,CAACQ,KAArB,EAA4BJ,KAA5B,CAAvB;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAD,MAAAA,QAAQ,CAACH,OAAO,CAACI,IAAD,CAAR,CAAR,CAHE,CAIF;;AACAK,MAAAA,cAAc,CAACC,OAAf,CAAuB,OAAvB,EAAgCN,IAAI,CAACO,KAArC;AACAF,MAAAA,cAAc,CAACC,OAAf,CAAuB,OAAvB,EAAgCN,IAAI,CAACQ,KAArC;AACD,KAPD,CAOE,OAAOC,CAAP,EAAe;AACfV,MAAAA,QAAQ,CAACJ,eAAe,CAACc,CAAC,CAACC,OAAH,CAAhB,CAAR;AACD;AACF,GAXD;AAYD,CAbM,C,CAcP;;AACA,OAAO,MAAMC,YAAY,GAAIb,KAAD,IAAgC;AAC1D,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMP,KAAK,CAACQ,IAAN,CAAWP,SAAS,CAACkB,YAArB,EAAmCd,KAAnC,CAAvB;AACA,YAAMe,iBAAkC,GAAG;AACzCN,QAAAA,KAAK,EAAEP,IAAI,CAACO,KAD6B;AAEzCC,QAAAA,KAAK,EAAER,IAAI,CAACc,IAAL,CAAUN,KAFwB;AAGzCO,QAAAA,IAAI,EAAEf,IAAI,CAACc,IAAL,CAAUC;AAHyB,OAA3C;AAKAZ,MAAAA,OAAO,CAACC,GAAR,CAAYS,iBAAZ;AACAR,MAAAA,cAAc,CAACC,OAAf,CAAuB,OAAvB,EAAgCN,IAAI,CAACO,KAArC;AACAF,MAAAA,cAAc,CAACC,OAAf,CAAuB,UAAvB,EAAmCN,IAAI,CAACc,IAAL,CAAUN,KAA7C;AACAT,MAAAA,QAAQ,CAACH,OAAO,CAACiB,iBAAD,CAAR,CAAR;AACD,KAXD,CAWE,OAAOJ,CAAP,EAAe;AACfN,MAAAA,OAAO,CAACC,GAAR,CAAYK,CAAC,CAACC,OAAd;AACAX,MAAAA,QAAQ,CAACJ,eAAe,CAACc,CAAC,CAACC,OAAH,CAAhB,CAAR;AACD;AACF,GAhBD;AAiBD,CAlBM","sourcesContent":["import axios from 'axios';\r\nimport { ThunkAction } from 'redux-thunk'; // для типизации санки\r\nimport { RootStateType } from '../store/store'; //типизация всего стора\r\nimport { ModelUrls } from '../constants/url';\r\nimport {\r\n  setErrorMessage, // запись ошибки аторизации и регистрации в стейт\r\n  SetActionType, // тип экшенов authReducer\r\n  setAuth, // запись авторизации  в стейт\r\n  AuthReducerType, // типизация авторизации редюсера\r\n} from '../store/reducer/authReducer';\r\n//типизация авторизация\r\nexport type AuthType = {\r\n  email: string;\r\n  password: string;\r\n};\r\n// типизация санки\r\nexport type ThunkType = ThunkAction<\r\n  Promise<void>,\r\n  RootStateType,\r\n  unknown, //extraArgument\r\n  SetActionType\r\n>;\r\n// авторизация\r\nexport const authorization = (value: AuthType): ThunkType => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const { data } = await axios.post(ModelUrls.LOGIN, value);\r\n      console.log(data);\r\n      dispatch(setAuth(data));\r\n      //запись данных в sessionStorage\r\n      sessionStorage.setItem('token', data.token);\r\n      sessionStorage.setItem('email', data.email);\r\n    } catch (e: any) {\r\n      dispatch(setErrorMessage(e.message));\r\n    }\r\n  };\r\n};\r\n//регистрация\r\nexport const registration = (value: AuthType): ThunkType => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const { data } = await axios.post(ModelUrls.REGISTRATION, value);\r\n      const authorizationData: AuthReducerType = {\r\n        token: data.token,\r\n        email: data.user.email,\r\n        role: data.user.role,\r\n      };\r\n      console.log(authorizationData);\r\n      sessionStorage.setItem('token', data.token);\r\n      sessionStorage.setItem('username', data.user.email);\r\n      dispatch(setAuth(authorizationData));\r\n    } catch (e: any) {\r\n      console.log(e.message);\r\n      dispatch(setErrorMessage(e.message));\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}