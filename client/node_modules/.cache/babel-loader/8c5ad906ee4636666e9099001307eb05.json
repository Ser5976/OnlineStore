{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\pages\\\\ProfileType.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { Container } from '@material-ui/core';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport { useLocation, useHistory, useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport Pagination from '@material-ui/lab/Pagination';\nimport PaginationItem from '@material-ui/lab/PaginationItem';\nimport { ROOT_URL } from '../constants/url';\n//типизиция всего стора\nimport { setTypeId, //запись выбранного типа устройства\nsetBrandId //запись выбранного  брэнда устройства\n} from '../store/reducer/deviceReducer';\n//типизация данных\nimport { getDevices //запрос на получение устройств\n} from '../action/deviceAction';\nimport { connect } from 'react-redux'; //типизация--------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n//-----------------------------------------\nconst useStyles = makeStyles(theme => createStyles({\n  root1: {\n    '& > *': {\n      marginTop: theme.spacing(2)\n    },\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginBottom: theme.spacing(2)\n  },\n  grid: {\n    width: '100%',\n    height: 650,\n    overflow: 'auto'\n  },\n  textTitle: {\n    marginTop: '25px'\n  },\n  root: {\n    maxWidth: 250\n  },\n  media: {\n    height: 100,\n    width: 'auto',\n    padding: 15,\n    cursor: 'pointer'\n  },\n  cardActions: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  }\n}));\n\nconst ProfileType = ({\n  getDevices,\n  setTypeId,\n  setBrandId,\n  devices,\n  pageQty,\n  limit,\n  typeId,\n  brandId,\n  isLoadinDevice,\n  isFetchErrorDevice,\n  isLoadinTypes,\n  isFetchErrorTypes\n}) => {\n  _s();\n\n  var _searchPage$search;\n\n  const classes = useStyles();\n  const {\n    id\n  } = useParams(); //  хук роутера ,который помогает получить значение params(это выбранный typeId)\n\n  const searchPage = useLocation(); // для получения строки запроса\n\n  const history = useHistory(); //для изменения строки запроса\n  //console.log(search);\n  // пагинация, данные о текущей странице( по умолчанию: 1 или, если есть ,информация о текущей странице в адресной строке )\n\n  const [page, setPage] = useState(parseInt(((_searchPage$search = searchPage.search) === null || _searchPage$search === void 0 ? void 0 : _searchPage$search.split('=')[1]) || '1')); // изменения текущей страницы\n\n  const handleChange = (event, value) => {\n    setPage(value);\n  }; // запрос на сервак для получения устройств(фильтруем устройства по типу и бренду,а также пагинация)\n\n\n  useEffect(() => {\n    getDevices(id, brandId, limit, page, setPage, history); // eslint-disable-next-line\n  }, [typeId, brandId, page]); // запрос на сервак для получения типов устройств\n\n  /* useEffect(() => {\r\n    \r\n    // eslint-disable-next-line\r\n  }, []); */\n  // console.log(devices);\n  // console.log(info);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      style: {\n        display: 'flex'\n      },\n      children: devices.map(item => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.root,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: `${ROOT_URL}/${item.picture[0]}`,\n            className: classes.media,\n            onClick: () => {\n              history.push(`/profileDevice/${item._id}`);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            gutterBottom: true,\n            variant: \"h6\",\n            component: \"div\",\n            children: [item.price, \" p\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"textSecondary\",\n            component: \"div\",\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), !!pageQty && /*#__PURE__*/_jsxDEV(Pagination, {\n      className: classes.root,\n      count: pageQty,\n      page: page,\n      showFirstButton: true,\n      showLastButton: true,\n      onChange: handleChange // интегрируем роутер\n      ,\n      renderItem: item => /*#__PURE__*/_jsxDEV(PaginationItem, {\n        component: Link,\n        to: `/?page=${item.page}`,\n        ...item\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ProfileType, \"+abMu7uFhk5hmHo4K2keyD96NjU=\", false, function () {\n  return [useStyles, useParams, useLocation, useHistory];\n});\n\n_c = ProfileType;\n\nconst mapStateToProps = state => {\n  return {\n    devices: state.devices.devices,\n    //устройства\n    pageQty: state.devices.pageQty,\n    //количества страниц\n    limit: state.devices.limit,\n    //сколько устройств на странице\n    typeId: state.devices.typeId,\n    // айдишник типа\n    brandId: state.devices.brandId,\n    // айдишник брэнда\n    isLoadinDevice: state.devices.isLoadinDevice,\n    //крутилка у стройств\n    isLoadinTypes: state.devices.isLoadinTypes,\n    //крутилка типов\n    isFetchErrorDevice: state.devices.isFetchErrorDevice,\n    //ошибка устройств\n    isFetchErrorTypes: state.devices.isFetchErrorTypes //ошибка типов\n\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getDevices,\n  setTypeId,\n  setBrandId\n})(ProfileType);\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileType\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/pages/ProfileType.tsx"],"names":["React","useEffect","useState","Typography","Container","makeStyles","createStyles","useLocation","useHistory","useParams","Link","Pagination","PaginationItem","ROOT_URL","setTypeId","setBrandId","getDevices","connect","useStyles","theme","root1","marginTop","spacing","display","flexDirection","justifyContent","marginBottom","grid","width","height","overflow","textTitle","root","maxWidth","media","padding","cursor","cardActions","ProfileType","devices","pageQty","limit","typeId","brandId","isLoadinDevice","isFetchErrorDevice","isLoadinTypes","isFetchErrorTypes","classes","id","searchPage","history","page","setPage","parseInt","search","split","handleChange","event","value","map","item","picture","push","_id","price","name","mapStateToProps","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAAcC,SAAd,QAA+B,mBAA/B;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,0BAAzC;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,SAAlC,QAAmD,cAAnD;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AAEA,SAASC,QAAT,QAAyB,kBAAzB;AAEgD;AAEhD,SACEC,SADF,EACa;AACXC,UAFF,CAEc;AAFd,OAGO,gCAHP;AAYyC;AACzC,SACEC,UADF,CACc;AADd,OAEO,wBAFP;AAGA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;;;;AA6BA;AACA,MAAMC,SAAS,GAAGb,UAAU,CAAEc,KAAD,IAC3Bb,YAAY,CAAC;AACXc,EAAAA,KAAK,EAAE;AACL,aAAS;AACPC,MAAAA,SAAS,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd;AADJ,KADJ;AAILC,IAAAA,OAAO,EAAE,MAJJ;AAKLC,IAAAA,aAAa,EAAE,KALV;AAMLC,IAAAA,cAAc,EAAE,QANX;AAOLC,IAAAA,YAAY,EAAEP,KAAK,CAACG,OAAN,CAAc,CAAd;AAPT,GADI;AAUXK,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,MADH;AAEJC,IAAAA,MAAM,EAAE,GAFJ;AAGJC,IAAAA,QAAQ,EAAE;AAHN,GAVK;AAeXC,EAAAA,SAAS,EAAE;AACTV,IAAAA,SAAS,EAAE;AADF,GAfA;AAmBXW,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE;AADN,GAnBK;AAsBXC,EAAAA,KAAK,EAAE;AACLL,IAAAA,MAAM,EAAE,GADH;AAELD,IAAAA,KAAK,EAAE,MAFF;AAGLO,IAAAA,OAAO,EAAE,EAHJ;AAILC,IAAAA,MAAM,EAAE;AAJH,GAtBI;AA4BXC,EAAAA,WAAW,EAAE;AACXd,IAAAA,OAAO,EAAE,MADE;AAEXE,IAAAA,cAAc,EAAE;AAFL;AA5BF,CAAD,CADc,CAA5B;;AAoCA,MAAMa,WAAgC,GAAG,CAAC;AACxCtB,EAAAA,UADwC;AAExCF,EAAAA,SAFwC;AAGxCC,EAAAA,UAHwC;AAKxCwB,EAAAA,OALwC;AAMxCC,EAAAA,OANwC;AAOxCC,EAAAA,KAPwC;AAQxCC,EAAAA,MARwC;AASxCC,EAAAA,OATwC;AAUxCC,EAAAA,cAVwC;AAWxCC,EAAAA,kBAXwC;AAYxCC,EAAAA,aAZwC;AAaxCC,EAAAA;AAbwC,CAAD,KAcnC;AAAA;;AAAA;;AACJ,QAAMC,OAAO,GAAG9B,SAAS,EAAzB;AACA,QAAM;AAAE+B,IAAAA;AAAF,MAASxC,SAAS,EAAxB,CAFI,CAEoC;;AACxC,QAAMyC,UAAU,GAAG3C,WAAW,EAA9B,CAHI,CAG8B;;AAClC,QAAM4C,OAAO,GAAG3C,UAAU,EAA1B,CAJI,CAI0B;AAC9B;AACA;;AACA,QAAM,CAAC4C,IAAD,EAAOC,OAAP,IAAkBnD,QAAQ,CAC9BoD,QAAQ,CAAC,uBAAAJ,UAAU,CAACK,MAAX,0EAAmBC,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,MAAoC,GAArC,CADsB,CAAhC,CAPI,CAUJ;;AACA,QAAMC,YAAY,GAAG,CAACC,KAAD,EAAoCC,KAApC,KAAsD;AACzEN,IAAAA,OAAO,CAACM,KAAD,CAAP;AACD,GAFD,CAXI,CAcJ;;;AACA1D,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,UAAU,CAACiC,EAAD,EAAKN,OAAL,EAAcF,KAAd,EAAqBW,IAArB,EAA2BC,OAA3B,EAAoCF,OAApC,CAAV,CADc,CAEd;AACD,GAHQ,EAGN,CAACT,MAAD,EAASC,OAAT,EAAkBS,IAAlB,CAHM,CAAT,CAfI,CAmBJ;;AACA;AACF;AACA;AACA;AAEE;AAEA;;AACA,sBACE;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAC,IAApB;AAAyB,MAAA,KAAK,EAAE;AAAE7B,QAAAA,OAAO,EAAE;AAAX,OAAhC;AAAA,gBACGgB,OAAO,CAACqB,GAAR,CAAaC,IAAD,IAAU;AACrB,4BACE;AAAK,UAAA,SAAS,EAAEb,OAAO,CAAChB,IAAxB;AAAA,kCACE;AACE,YAAA,GAAG,EAAG,GAAEnB,QAAS,IAAGgD,IAAI,CAACC,OAAL,CAAa,CAAb,CAAgB,EADtC;AAEE,YAAA,SAAS,EAAEd,OAAO,CAACd,KAFrB;AAGE,YAAA,OAAO,EAAE,MAAM;AACbiB,cAAAA,OAAO,CAACY,IAAR,CAAc,kBAAiBF,IAAI,CAACG,GAAI,EAAxC;AACD;AALH;AAAA;AAAA;AAAA;AAAA,kBADF,eASE,QAAC,UAAD;AAAY,YAAA,YAAY,MAAxB;AAAyB,YAAA,OAAO,EAAC,IAAjC;AAAsC,YAAA,SAAS,EAAC,KAAhD;AAAA,uBACGH,IAAI,CAACI,KADR;AAAA;AAAA;AAAA;AAAA;AAAA,kBATF,eAYE,QAAC,UAAD;AAAY,YAAA,OAAO,EAAC,OAApB;AAA4B,YAAA,KAAK,EAAC,eAAlC;AAAkD,YAAA,SAAS,EAAC,KAA5D;AAAA,sBACGJ,IAAI,CAACK;AADR;AAAA;AAAA;AAAA;AAAA,kBAZF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAkBD,OAnBA;AADH;AAAA;AAAA;AAAA;AAAA,YADF,EAwBG,CAAC,CAAC1B,OAAF,iBACC,QAAC,UAAD;AACE,MAAA,SAAS,EAAEQ,OAAO,CAAChB,IADrB;AAEE,MAAA,KAAK,EAAEQ,OAFT;AAGE,MAAA,IAAI,EAAEY,IAHR;AAIE,MAAA,eAAe,MAJjB;AAKE,MAAA,cAAc,MALhB;AAME,MAAA,QAAQ,EAAEK,YANZ,CAOE;AAPF;AAQE,MAAA,UAAU,EAAGI,IAAD,iBACV,QAAC,cAAD;AACE,QAAA,SAAS,EAAEnD,IADb;AAEE,QAAA,EAAE,EAAG,UAASmD,IAAI,CAACT,IAAK,EAF1B;AAAA,WAGMS;AAHN;AAAA;AAAA;AAAA;AAAA;AATJ;AAAA;AAAA;AAAA;AAAA,YAzBJ;AAAA,kBADF;AA6CD,CAvFD;;GAAMvB,W;UAeYpB,S,EACDT,S,EACIF,W,EACHC,U;;;KAlBZ8B,W;;AAwFN,MAAM6B,eAAe,GAAIC,KAAD,IAA+C;AACrE,SAAO;AACL7B,IAAAA,OAAO,EAAE6B,KAAK,CAAC7B,OAAN,CAAcA,OADlB;AAC2B;AAChCC,IAAAA,OAAO,EAAE4B,KAAK,CAAC7B,OAAN,CAAcC,OAFlB;AAE2B;AAChCC,IAAAA,KAAK,EAAE2B,KAAK,CAAC7B,OAAN,CAAcE,KAHhB;AAGuB;AAC5BC,IAAAA,MAAM,EAAE0B,KAAK,CAAC7B,OAAN,CAAcG,MAJjB;AAIyB;AAC9BC,IAAAA,OAAO,EAAEyB,KAAK,CAAC7B,OAAN,CAAcI,OALlB;AAK2B;AAChCC,IAAAA,cAAc,EAAEwB,KAAK,CAAC7B,OAAN,CAAcK,cANzB;AAMyC;AAC9CE,IAAAA,aAAa,EAAEsB,KAAK,CAAC7B,OAAN,CAAcO,aAPxB;AAOuC;AAC5CD,IAAAA,kBAAkB,EAAEuB,KAAK,CAAC7B,OAAN,CAAcM,kBAR7B;AAQiD;AACtDE,IAAAA,iBAAiB,EAAEqB,KAAK,CAAC7B,OAAN,CAAcQ,iBAT5B,CAS+C;;AAT/C,GAAP;AAWD,CAZD;;AAaA,eAAe9B,OAAO,CAKpBkD,eALoB,EAKH;AACjBnD,EAAAA,UADiB;AAEjBF,EAAAA,SAFiB;AAGjBC,EAAAA;AAHiB,CALG,CAAP,CASZuB,WATY,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Box, Container } from '@material-ui/core';\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\nimport { useLocation, useHistory, useParams } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport PaginationItem from '@material-ui/lab/PaginationItem';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { ROOT_URL } from '../constants/url';\r\nimport DeviceContainer from '../components/DeviceContainer';\r\nimport { RootStateType } from '../store/store'; //типизиция всего стора\r\n\r\nimport {\r\n  setTypeId, //запись выбранного типа устройства\r\n  setBrandId, //запись выбранного  брэнда устройства\r\n} from '../store/reducer/deviceReducer';\r\nimport {\r\n  setTypeIdActionType,\r\n  setBrandIdActionType,\r\n} from '../store/reducer/deviceReducer'; // типизация экшенов\r\nimport {\r\n  DeviceType,\r\n  TypeDeviceType,\r\n  BrandType,\r\n} from '../store/reducer/deviceReducer'; //типизация данных\r\nimport {\r\n  getDevices, //запрос на получение устройств\r\n} from '../action/deviceAction';\r\nimport { connect } from 'react-redux';\r\n\r\n//типизация--------------------------------\r\ntype MapStateToPropsType = {\r\n  devices: DeviceType[];\r\n  pageQty: number;\r\n  limit: number;\r\n  typeId: string | null;\r\n  brandId: string | null;\r\n  isLoadinDevice: boolean;\r\n  isFetchErrorDevice: boolean;\r\n  isLoadinTypes: boolean;\r\n  isFetchErrorTypes: boolean;\r\n};\r\ntype MapDispathPropsType = {\r\n  getDevices: (\r\n    typeId: string | null,\r\n    brandId: string | null,\r\n    limit: number,\r\n    page: number,\r\n    setPage: React.Dispatch<React.SetStateAction<number>>,\r\n    history: any\r\n  ) => void;\r\n  setTypeId: (data: string | null) => setTypeIdActionType;\r\n  setBrandId: (data: string | null) => setBrandIdActionType;\r\n};\r\n\r\ntype PropsType = MapDispathPropsType & MapStateToPropsType;\r\ntype ParamsType = {\r\n  id: string;\r\n};\r\n//-----------------------------------------\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root1: {\r\n      '& > *': {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      justifyContent: 'center',\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n    grid: {\r\n      width: '100%',\r\n      height: 650,\r\n      overflow: 'auto',\r\n    },\r\n    textTitle: {\r\n      marginTop: '25px',\r\n    },\r\n\r\n    root: {\r\n      maxWidth: 250,\r\n    },\r\n    media: {\r\n      height: 100,\r\n      width: 'auto',\r\n      padding: 15,\r\n      cursor: 'pointer',\r\n    },\r\n    cardActions: {\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n    },\r\n  })\r\n);\r\n\r\nconst ProfileType: React.FC<PropsType> = ({\r\n  getDevices,\r\n  setTypeId,\r\n  setBrandId,\r\n\r\n  devices,\r\n  pageQty,\r\n  limit,\r\n  typeId,\r\n  brandId,\r\n  isLoadinDevice,\r\n  isFetchErrorDevice,\r\n  isLoadinTypes,\r\n  isFetchErrorTypes,\r\n}) => {\r\n  const classes = useStyles();\r\n  const { id } = useParams<ParamsType>(); //  хук роутера ,который помогает получить значение params(это выбранный typeId)\r\n  const searchPage = useLocation(); // для получения строки запроса\r\n  const history = useHistory(); //для изменения строки запроса\r\n  //console.log(search);\r\n  // пагинация, данные о текущей странице( по умолчанию: 1 или, если есть ,информация о текущей странице в адресной строке )\r\n  const [page, setPage] = useState(\r\n    parseInt(searchPage.search?.split('=')[1] || '1')\r\n  );\r\n  // изменения текущей страницы\r\n  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n    setPage(value);\r\n  };\r\n  // запрос на сервак для получения устройств(фильтруем устройства по типу и бренду,а также пагинация)\r\n  useEffect(() => {\r\n    getDevices(id, brandId, limit, page, setPage, history);\r\n    // eslint-disable-next-line\r\n  }, [typeId, brandId, page]);\r\n  // запрос на сервак для получения типов устройств\r\n  /* useEffect(() => {\r\n    \r\n    // eslint-disable-next-line\r\n  }, []); */\r\n\r\n  // console.log(devices);\r\n\r\n  // console.log(info);\r\n  return (\r\n    <>\r\n      <Container maxWidth=\"lg\" style={{ display: 'flex' }}>\r\n        {devices.map((item) => {\r\n          return (\r\n            <div className={classes.root}>\r\n              <img\r\n                src={`${ROOT_URL}/${item.picture[0]}`}\r\n                className={classes.media}\r\n                onClick={() => {\r\n                  history.push(`/profileDevice/${item._id}`);\r\n                }}\r\n              />\r\n\r\n              <Typography gutterBottom variant=\"h6\" component=\"div\">\r\n                {item.price} p\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"div\">\r\n                {item.name}\r\n              </Typography>\r\n            </div>\r\n          );\r\n        })}\r\n      </Container>\r\n\r\n      {!!pageQty && (\r\n        <Pagination\r\n          className={classes.root}\r\n          count={pageQty}\r\n          page={page}\r\n          showFirstButton\r\n          showLastButton\r\n          onChange={handleChange}\r\n          // интегрируем роутер\r\n          renderItem={(item) => (\r\n            <PaginationItem\r\n              component={Link}\r\n              to={`/?page=${item.page}`}\r\n              {...item}\r\n            />\r\n          )}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n  return {\r\n    devices: state.devices.devices, //устройства\r\n    pageQty: state.devices.pageQty, //количества страниц\r\n    limit: state.devices.limit, //сколько устройств на странице\r\n    typeId: state.devices.typeId, // айдишник типа\r\n    brandId: state.devices.brandId, // айдишник брэнда\r\n    isLoadinDevice: state.devices.isLoadinDevice, //крутилка у стройств\r\n    isLoadinTypes: state.devices.isLoadinTypes, //крутилка типов\r\n    isFetchErrorDevice: state.devices.isFetchErrorDevice, //ошибка устройств\r\n    isFetchErrorTypes: state.devices.isFetchErrorTypes, //ошибка типов\r\n  };\r\n};\r\nexport default connect<\r\n  MapStateToPropsType,\r\n  MapDispathPropsType,\r\n  unknown, // личные пропсы\r\n  RootStateType\r\n>(mapStateToProps, {\r\n  getDevices,\r\n  setTypeId,\r\n  setBrandId,\r\n})(ProfileType);\r\n"]},"metadata":{},"sourceType":"module"}