{"ast":null,"code":"import { setIsLoadinDevice, //крутилка для устройств\nsetIsLoadinSelectedDevice, //крутилка для выбранного устройства\nsetIsLoadinTypes, //крутилка для типов\nsetIsLoadinSelectedType, //крутилка для выбранного типа\nsetFetchErrorDevice, //ошибка для устройств\nsetFetchErrorSelectedDevice, //ошибка для выбранного утсройства\nsetFetchErrorTypes, //ошибка для типов\nsetFetchErrorSelectedType, //ошибка для выбранного типа\nsetDevices, // запись устройств в стейт\nsetSelectedDevice, // запись выбранного устройства в стейт\nsetTypes, // запись типов в стейт\nsetSelectedType, //запись выбранного типа устройства в стейт\nsetBrands, // запись брэндов\nsetPageQty, //типизация добавленного устройства\nsetAddedDevice, // запись добавленного устройства в стейт\nsetAddedDeviceError, // изменения статуса ошибки добавленного устройства\nsetAlertMessage // изменения маркера получения сообщения о невозможности удаления типа/брэнда устройства\n} from './../store/reducer/deviceReducer';\nimport axios from 'axios';\n//типизация всего стора\nimport { ModelUrls } from '../constants/url';\n// получение выбранных устройств и запись в стейт\nexport const getDevices = (typeId, brandId, limit, page, setPage, history) => {\n  return async dispatch => {\n    try {\n      dispatch(setIsLoadinDevice(true));\n      const response = await axios.get(`${ModelUrls.DEVICES}`, {\n        params: {\n          typeId,\n          brandId,\n          limit,\n          page\n        }\n      }); // console.log(response);\n      //если число страниц меньше активной страницы,текущую страницу ставим 1\n\n      if (response.data.pageQty < page) {\n        setPage(1); //записываем текущую страницу в локальный стейт,(в ProfileType)\n\n        history.replace(`${history.location.pathname === '/deleteContainer' ? '/deleteContainer' : `${history.location.pathname}`}?page=1`);\n      } //запись в стейт\n\n\n      dispatch(setDevices(response.data.device));\n      dispatch(setPageQty(response.data.pageQty));\n    } catch (e) {\n      console.log(e);\n      dispatch(setFetchErrorDevice(true));\n      dispatch(setIsLoadinDevice(false));\n    }\n  };\n}; // получение выбранного устройства\n\nexport const getSelectedDevice = id => {\n  //console.log(id);\n  return async dispatch => {\n    try {\n      dispatch(setIsLoadinSelectedDevice(true));\n      const response = await axios.get(ModelUrls.DEVICES + '/' + id); //запись в стейт\n\n      dispatch(setSelectedDevice(response.data));\n    } catch (e) {\n      console.log(e);\n      dispatch(setFetchErrorSelectedDevice(true));\n      dispatch(setIsLoadinSelectedDevice(false));\n    }\n  };\n}; // получение типов устройств и запись в стейт\n\nexport const getTypes = () => {\n  return async dispatch => {\n    try {\n      dispatch(setIsLoadinTypes(true));\n      const response = await axios.get(ModelUrls.TYPES); // console.log(response);\n      //запись в стейт\n\n      dispatch(setTypes(response.data));\n    } catch (e) {\n      console.log(e);\n      dispatch(setFetchErrorTypes(true));\n      dispatch(setIsLoadinTypes(false));\n    }\n  };\n}; // получение типа выбранного устройства\n\nexport const getSelectedType = id => {\n  //console.log(id);\n  return async dispatch => {\n    try {\n      dispatch(setIsLoadinSelectedType(true));\n      const response = await axios.get(ModelUrls.TYPES + '/' + id); //console.log(response.data);\n      //запись в стейт\n\n      dispatch(setSelectedType(response.data));\n    } catch (e) {\n      console.log(e);\n      dispatch(setFetchErrorSelectedType(true));\n      dispatch(setIsLoadinSelectedType(false));\n    }\n  };\n}; // получение брэндов и запись в стейт\n\nexport const getBrands = () => {\n  return async dispatch => {\n    try {\n      const response = await axios.get(ModelUrls.BRANDS); // console.log(response);\n      //запись в стейт\n\n      dispatch(setBrands(response.data));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n}; // добавление устройства в базу данных ,обнуление стейта addedDevice,переход на главную страницу\n\nexport const addDevice = (data, history) => {\n  //чтобы обнулить стейт\n  const copyAddedDevice = {\n    name: '',\n    price: '',\n    picture: [],\n    info: [],\n    typeId: '',\n    brandId: ''\n  };\n  return async dispatch => {\n    try {\n      const response = await axios.post(ModelUrls.DEVICES, data); // console.log(response);\n\n      dispatch(setAddedDeviceError(false)); //обнуляем добавленное устройство в стейте\n\n      dispatch(setAddedDevice(copyAddedDevice));\n      dispatch(getTypes());\n      history.push('/');\n    } catch (e) {\n      console.log(e);\n      dispatch(setAddedDeviceError(true));\n    }\n  };\n}; // добавление типа устройства в базу данных\n\nexport const addType = (data, handleClose) => {\n  return async dispatch => {\n    try {\n      const response = await axios.post(ModelUrls.TYPES, data);\n      dispatch(setAddedDeviceError(false));\n      console.log(response);\n      dispatch(getTypes());\n      handleClose();\n    } catch (e) {\n      console.log(e);\n      dispatch(setAddedDeviceError(true));\n    }\n  };\n}; // добавление брэнда устройства в базу данных\n\nexport const addBrand = (data, handleClose) => {\n  return async dispatch => {\n    try {\n      const response = await axios.post(ModelUrls.BRANDS, data);\n      dispatch(setAddedDeviceError(false));\n      console.log(response);\n      dispatch(getBrands());\n      handleClose();\n    } catch (e) {\n      console.log(e);\n      dispatch(setAddedDeviceError(true));\n    }\n  };\n}; // удаление  устройства\n\nexport const removeDevice = id => {\n  console.log(id);\n  return async dispatch => {\n    try {\n      const response = await axios.delete(ModelUrls.DEVICES + '/' + id);\n      window.location.reload();\n    } catch (e) {\n      console.log(e);\n    }\n  };\n}; // удаление типа устройства\n\nexport const removeType = id => {\n  console.log(id);\n  return async dispatch => {\n    try {\n      const response = await axios.delete(ModelUrls.TYPES + '/' + id); // console.log(response);\n\n      if (response.data.message) {\n        dispatch(setAlertMessage(response.data.message));\n      }\n\n      dispatch(getTypes());\n    } catch (e) {\n      console.log(e);\n    }\n  };\n}; // удаление брэнда устройства\n\nexport const removeBrand = id => {\n  console.log(id);\n  return async dispatch => {\n    try {\n      const response = await axios.delete(ModelUrls.BRANDS + '/' + id); // console.log(response);\n\n      if (response.data.message) {\n        dispatch(setAlertMessage(response.data.message));\n      }\n\n      dispatch(getBrands());\n      dispatch(getTypes());\n    } catch (e) {\n      console.log(e);\n    }\n  };\n};","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/action/deviceAction.ts"],"names":["setIsLoadinDevice","setIsLoadinSelectedDevice","setIsLoadinTypes","setIsLoadinSelectedType","setFetchErrorDevice","setFetchErrorSelectedDevice","setFetchErrorTypes","setFetchErrorSelectedType","setDevices","setSelectedDevice","setTypes","setSelectedType","setBrands","setPageQty","setAddedDevice","setAddedDeviceError","setAlertMessage","axios","ModelUrls","getDevices","typeId","brandId","limit","page","setPage","history","dispatch","response","get","DEVICES","params","data","pageQty","replace","location","pathname","device","e","console","log","getSelectedDevice","id","getTypes","TYPES","getSelectedType","getBrands","BRANDS","addDevice","copyAddedDevice","name","price","picture","info","post","push","addType","handleClose","addBrand","removeDevice","delete","window","reload","removeType","message","removeBrand"],"mappings":"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","sourcesContent":["import {\r\n  setIsLoadinDevice, //крутилка для устройств\r\n  setIsLoadinSelectedDevice, //крутилка для выбранного устройства\r\n  setIsLoadinTypes, //крутилка для типов\r\n  setIsLoadinSelectedType, //крутилка для выбранного типа\r\n  setFetchErrorDevice, //ошибка для устройств\r\n  setFetchErrorSelectedDevice, //ошибка для выбранного утсройства\r\n  setFetchErrorTypes, //ошибка для типов\r\n  setFetchErrorSelectedType, //ошибка для выбранного типа\r\n  setDevices, // запись устройств в стейт\r\n  setSelectedDevice, // запись выбранного устройства в стейт\r\n  setTypes, // запись типов в стейт\r\n  setSelectedType, //запись выбранного типа устройства в стейт\r\n  setBrands, // запись брэндов\r\n  setPageQty, // запись количества страниц в стейт\r\n  addedDeviceType, //типизация добавленного устройства\r\n  setAddedDevice, // запись добавленного устройства в стейт\r\n  setAddedDeviceError, // изменения статуса ошибки добавленного устройства\r\n  setAlertMessage, // изменения маркера получения сообщения о невозможности удаления типа/брэнда устройства\r\n} from './../store/reducer/deviceReducer';\r\nimport axios from 'axios';\r\nimport { ThunkAction } from 'redux-thunk'; // для типизации санки\r\nimport { RootStateType } from '../store/store'; //типизация всего стора\r\nimport { ModelUrls } from '../constants/url';\r\nimport { DeviceAtionType } from '../store/reducer/deviceReducer'; //типизация экшенов устройств\r\n\r\n// типизация санки\r\nexport type ThunkType = ThunkAction<\r\n  Promise<void>,\r\n  RootStateType,\r\n  unknown, //extraArgument\r\n  DeviceAtionType\r\n>;\r\n// получение выбранных устройств и запись в стейт\r\nexport const getDevices = (\r\n  typeId: string | null,\r\n  brandId: string | null,\r\n  limit: number,\r\n  page: number,\r\n  setPage: React.Dispatch<React.SetStateAction<number>>,\r\n  history: any\r\n): ThunkType => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch(setIsLoadinDevice(true));\r\n      const response = await axios.get(`${ModelUrls.DEVICES}`, {\r\n        params: {\r\n          typeId,\r\n          brandId,\r\n          limit,\r\n          page,\r\n        },\r\n      });\r\n      // console.log(response);\r\n      //если число страниц меньше активной страницы,текущую страницу ставим 1\r\n      if (response.data.pageQty < page) {\r\n        setPage(1); //записываем текущую страницу в локальный стейт,(в ProfileType)\r\n        history.replace(\r\n          `${\r\n            history.location.pathname === '/deleteContainer'\r\n              ? '/deleteContainer'\r\n              : `${history.location.pathname}`\r\n          }?page=1`\r\n        );\r\n      }\r\n      //запись в стейт\r\n      dispatch(setDevices(response.data.device));\r\n      dispatch(setPageQty(response.data.pageQty));\r\n    } catch (e) {\r\n      console.log(e);\r\n      dispatch(setFetchErrorDevice(true));\r\n      dispatch(setIsLoadinDevice(false));\r\n    }\r\n  };\r\n};\r\n// получение выбранного устройства\r\nexport const getSelectedDevice = (id: string): ThunkType => {\r\n  //console.log(id);\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch(setIsLoadinSelectedDevice(true));\r\n      const response = await axios.get(ModelUrls.DEVICES + '/' + id);\r\n      //запись в стейт\r\n      dispatch(setSelectedDevice(response.data));\r\n    } catch (e) {\r\n      console.log(e);\r\n      dispatch(setFetchErrorSelectedDevice(true));\r\n      dispatch(setIsLoadinSelectedDevice(false));\r\n    }\r\n  };\r\n};\r\n\r\n// получение типов устройств и запись в стейт\r\nexport const getTypes = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch(setIsLoadinTypes(true));\r\n      const response = await axios.get(ModelUrls.TYPES);\r\n      // console.log(response);\r\n      //запись в стейт\r\n      dispatch(setTypes(response.data));\r\n    } catch (e) {\r\n      console.log(e);\r\n      dispatch(setFetchErrorTypes(true));\r\n      dispatch(setIsLoadinTypes(false));\r\n    }\r\n  };\r\n};\r\n// получение типа выбранного устройства\r\nexport const getSelectedType = (id: string): ThunkType => {\r\n  //console.log(id);\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch(setIsLoadinSelectedType(true));\r\n      const response = await axios.get(ModelUrls.TYPES + '/' + id);\r\n      //console.log(response.data);\r\n      //запись в стейт\r\n      dispatch(setSelectedType(response.data));\r\n    } catch (e) {\r\n      console.log(e);\r\n      dispatch(setFetchErrorSelectedType(true));\r\n      dispatch(setIsLoadinSelectedType(false));\r\n    }\r\n  };\r\n};\r\n// получение брэндов и запись в стейт\r\nexport const getBrands = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.get(ModelUrls.BRANDS);\r\n      // console.log(response);\r\n      //запись в стейт\r\n      dispatch(setBrands(response.data));\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n};\r\n// добавление устройства в базу данных ,обнуление стейта addedDevice,переход на главную страницу\r\nexport const addDevice = (data: any, history: any): ThunkType => {\r\n  //чтобы обнулить стейт\r\n  const copyAddedDevice: addedDeviceType = {\r\n    name: '',\r\n    price: '',\r\n    picture: [],\r\n    info: [],\r\n    typeId: '',\r\n    brandId: '',\r\n  };\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.post(ModelUrls.DEVICES, data);\r\n      // console.log(response);\r\n      dispatch(setAddedDeviceError(false));\r\n      //обнуляем добавленное устройство в стейте\r\n      dispatch(setAddedDevice(copyAddedDevice));\r\n      dispatch(getTypes());\r\n      history.push('/');\r\n    } catch (e) {\r\n      console.log(e);\r\n      dispatch(setAddedDeviceError(true));\r\n    }\r\n  };\r\n};\r\n// добавление типа устройства в базу данных\r\nexport const addType = (\r\n  data: { name: string },\r\n  handleClose: () => void\r\n): ThunkType => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.post(ModelUrls.TYPES, data);\r\n      dispatch(setAddedDeviceError(false));\r\n      console.log(response);\r\n      dispatch(getTypes());\r\n      handleClose();\r\n    } catch (e) {\r\n      console.log(e);\r\n      dispatch(setAddedDeviceError(true));\r\n    }\r\n  };\r\n};\r\n// добавление брэнда устройства в базу данных\r\nexport const addBrand = (\r\n  data: { name: string },\r\n  handleClose: () => void\r\n): ThunkType => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.post(ModelUrls.BRANDS, data);\r\n      dispatch(setAddedDeviceError(false));\r\n      console.log(response);\r\n      dispatch(getBrands());\r\n      handleClose();\r\n    } catch (e) {\r\n      console.log(e);\r\n      dispatch(setAddedDeviceError(true));\r\n    }\r\n  };\r\n};\r\n// удаление  устройства\r\nexport const removeDevice = (id: string | undefined): ThunkType => {\r\n  console.log(id);\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.delete(ModelUrls.DEVICES + '/' + id);\r\n      window.location.reload();\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n};\r\n// удаление типа устройства\r\nexport const removeType = (id: string): ThunkType => {\r\n  console.log(id);\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.delete(ModelUrls.TYPES + '/' + id);\r\n      // console.log(response);\r\n      if (response.data.message) {\r\n        dispatch(setAlertMessage(response.data.message));\r\n      }\r\n      dispatch(getTypes());\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n};\r\n// удаление брэнда устройства\r\nexport const removeBrand = (id: string): ThunkType => {\r\n  console.log(id);\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.delete(ModelUrls.BRANDS + '/' + id);\r\n      // console.log(response);\r\n      if (response.data.message) {\r\n        dispatch(setAlertMessage(response.data.message));\r\n      }\r\n      dispatch(getBrands());\r\n      dispatch(getTypes());\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}