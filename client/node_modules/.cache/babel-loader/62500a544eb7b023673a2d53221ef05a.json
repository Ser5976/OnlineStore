{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\components\\\\ModalWindow.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport { Divider } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Modal from '@material-ui/core/Modal'; //--типизация----------------------------------\n//  пропсы\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//--------------------------------------------\n//схема валидации---------------------\nconst schema = yup.object().shape({\n  name: yup.string().required('Поле обязательное для заполнения')\n}); //-----------------------------------------\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    width: 450,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5]\n  },\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  buttons: {\n    display: 'flex',\n    justifyContent: 'flex-end'\n  }\n}));\n\nconst ModalWindow = ({\n  handleClose,\n  //закрытие модального окна\n  open,\n  //открытие модального окна\n  title,\n  // заголовок(тип или брэнд)\n  addData //функция отправляющая тип или брэнд в базу данных\n\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    control,\n    handleSubmit,\n    formState: {\n      errors\n    },\n    reset // для очистки формы\n\n  } = useForm({\n    mode: 'onBlur',\n    resolver: yupResolver(schema)\n  });\n\n  const onSubmit = data => {\n    //console.log(data);\n    addData(data, handleClose);\n    reset();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    open: open,\n    className: classes.modal,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.paper,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        component: \"h1\",\n        variant: \"h6\",\n        style: {\n          padding: 15\n        },\n        children: [\"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \", title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        style: {\n          padding: 15\n        },\n        onSubmit: handleSubmit(onSubmit),\n        children: [/*#__PURE__*/_jsxDEV(Controller, {\n          name: \"name\",\n          control: control,\n          defaultValue: \"\",\n          render: ({\n            field\n          }) => {\n            var _errors$name;\n\n            return /*#__PURE__*/_jsxDEV(TextField, { ...field,\n              margin: \"normal\",\n              fullWidth: true,\n              label: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0442\\u0438\\u043F\\u0430\",\n              error: !!errors.name,\n              helperText: errors.name ? (_errors$name = errors.name) === null || _errors$name === void 0 ? void 0 : _errors$name.message : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 15\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.buttons,\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            color: \"primary\",\n            style: {\n              margin: 5,\n              fontSize: 12\n            },\n            onClick: handleClose,\n            children: \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"outlined\",\n            color: \"primary\",\n            style: {\n              margin: 5,\n              fontSize: 12\n            },\n            onClick: () => {},\n            children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ModalWindow, \"J6NeB+c8JoA95Uq0hx/bx2v2Xns=\", false, function () {\n  return [useStyles, useForm];\n});\n\n_c = ModalWindow;\nexport default ModalWindow;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalWindow\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/components/ModalWindow.tsx"],"names":["React","useForm","Controller","yupResolver","yup","makeStyles","Typography","TextField","Divider","Button","Modal","schema","object","shape","name","string","required","useStyles","theme","paper","width","backgroundColor","palette","background","boxShadow","shadows","modal","display","alignItems","justifyContent","buttons","ModalWindow","handleClose","open","title","addData","classes","control","handleSubmit","formState","errors","reset","mode","resolver","onSubmit","data","padding","field","message","margin","fontSize"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Divider } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Modal from '@material-ui/core/Modal';\r\n\r\n//--типизация----------------------------------\r\n//  пропсы\r\ntype PropsType = {\r\n  handleClose: () => void;\r\n  open: boolean;\r\n  title: string;\r\n  addData: (data: { name: string }, handleClose: () => void) => void;\r\n};\r\n//--------------------------------------------\r\n//схема валидации---------------------\r\nconst schema = yup.object().shape({\r\n  name: yup.string().required('Поле обязательное для заполнения'),\r\n});\r\n//-----------------------------------------\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    width: 450,\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n  },\r\n  modal: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  buttons: {\r\n    display: 'flex',\r\n    justifyContent: 'flex-end',\r\n  },\r\n}));\r\n\r\nconst ModalWindow: React.FC<PropsType> = ({\r\n  handleClose, //закрытие модального окна\r\n  open, //открытие модального окна\r\n  title, // заголовок(тип или брэнд)\r\n  addData, //функция отправляющая тип или брэнд в базу данных\r\n}) => {\r\n  const classes = useStyles();\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset, // для очистки формы\r\n  } = useForm({\r\n    mode: 'onBlur',\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n  const onSubmit = (data: { name: string }) => {\r\n    //console.log(data);\r\n    addData(data, handleClose);\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <Modal open={open} className={classes.modal}>\r\n      <div className={classes.paper}>\r\n        <Typography component=\"h1\" variant=\"h6\" style={{ padding: 15 }}>\r\n          Добавить {title}\r\n        </Typography>\r\n        <Divider />\r\n        <form style={{ padding: 15 }} onSubmit={handleSubmit(onSubmit)}>\r\n          <Controller\r\n            name=\"name\"\r\n            control={control}\r\n            defaultValue=\"\"\r\n            render={({ field }) => (\r\n              <TextField\r\n                {...field}\r\n                margin=\"normal\"\r\n                fullWidth\r\n                label=\"Введите название типа\"\r\n                error={!!errors.name}\r\n                helperText={errors.name ? errors.name?.message : null}\r\n              />\r\n            )}\r\n          />\r\n          <div className={classes.buttons}>\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              style={{ margin: 5, fontSize: 12 }}\r\n              onClick={handleClose}\r\n            >\r\n              Закрыть\r\n            </Button>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              style={{ margin: 5, fontSize: 12 }}\r\n              onClick={() => {}}\r\n            >\r\n              Добавить\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ModalWindow;\r\n"]},"metadata":{},"sourceType":"module"}