{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\components\\\\Header.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport PersonAddOutlinedIcon from '@material-ui/icons/PersonAddOutlined';\nimport Badge from '@material-ui/core/Badge';\nimport ShoppingCartOutlinedIcon from '@material-ui/icons/ShoppingCartOutlined';\nimport Divider from '@material-ui/core/Divider';\nimport { setAuth, //записть авторизации в стор\nsetIsAuth, // экшен маркер авторизации\nsetLogout // типизация экшена маркера типизации\n} from '../store/reducer/authReducer';\nimport { //типизация типа\n//типизация экшена\n//типтзация экшена\n// типизация экшен\nsetBrandId, //запись в стейт выбранного брэнда\nsetTypeId, //запись в стейт выбранного типа\nsetName //запись имени товара(для поиска)\n} from '../store/reducer/deviceReducer';\nimport { getBrands, getTypes } from '../action/deviceAction'; //запрос на получениe типов устройств\n\nimport { getProductCart } from '../action/basketAction'; // запрос на получение содержимого корзины\n\n//типизация всего стейта\nimport { useHistory } from 'react-router-dom';\nimport Logo7 from '../img/logo7.png';\nimport MenuAdmin from './MenuAdmin';\nimport Logout from './Logout';\nimport MenuBar from './MenuBar';\nimport SearchInput from './SearchInput';\nimport { connect } from 'react-redux'; //типизация--------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n//-----------------------------------------\nconst useStyles = makeStyles(theme => createStyles({\n  /*  title: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    }, \r\n  },*/\n  toolBar: {\n    display: 'block',\n    '@media (min-width:600px)': {\n      display: 'flex'\n    }\n  }\n}));\n\nconst Header = ({\n  auth,\n  isAuth,\n  types,\n  isFetchErrorTypes,\n  totalCount,\n  setAuth,\n  setLogout,\n  setIsAuth,\n  getTypes,\n  getBrands,\n  setBrandId,\n  setTypeId,\n  setName,\n  getProductCart\n}) => {\n  _s();\n\n  const history = useHistory();\n  const classes = useStyles();\n  useEffect(() => {\n    setIsAuth(!!sessionStorage.getItem('token')); //берём токен из sessionStorage и приводим его к булевому значению\n\n    const authorizationData = {\n      //берём данные из sessionStorage и записываем в стор\n      token: sessionStorage.getItem('token'),\n      email: sessionStorage.getItem('email'),\n      role: sessionStorage.getItem('role')\n    };\n    setAuth(authorizationData); // загрузка типов устройств\n\n    getTypes(); // загрузка брендов\n\n    getBrands(); // eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    // загрузка корзины\n    //console.log('загрука из корзины');\n    getProductCart(); // eslint-disable-next-line\n  }, [isAuth]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AppBar, {\n      position: \"static\",\n      style: {\n        background: '#fff',\n        padding: '0'\n      },\n      elevation: 0,\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {\n        className: classes.toolBar,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginRight: '300px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: Logo7,\n            style: {\n              height: '100px',\n              width: 'auto'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SearchInput, {\n          setName: setName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), isAuth && auth.role === 'ADMIN' && /*#__PURE__*/_jsxDEV(MenuAdmin, {\n          setTypeId: setTypeId,\n          setBrandId: setBrandId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this), isAuth ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(IconButton, {\n            color: \"inherit\",\n            onClick: () => history.push('/cart'),\n            children: /*#__PURE__*/_jsxDEV(Badge, {\n              badgeContent: totalCount,\n              color: \"secondary\",\n              children: /*#__PURE__*/_jsxDEV(ShoppingCartOutlinedIcon, {\n                style: {\n                  fontSize: '35px',\n                  color: 'black',\n                  fontWeight: 'lighter'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Logout, {\n            setLogout: setLogout\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: () => history.push('/login'),\n          children: /*#__PURE__*/_jsxDEV(PersonAddOutlinedIcon, {\n            style: {\n              fontSize: '35px',\n              color: 'black'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MenuBar, {\n      types: types,\n      setBrandId: setBrandId,\n      setTypeId: setTypeId,\n      isFetchErrorTypes: isFetchErrorTypes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Header, \"nGyscpfGTIg1Xv95+hOnvxq0p9s=\", false, function () {\n  return [useHistory, useStyles];\n});\n\n_c = Header;\n\nconst mapStateToProps = state => {\n  return {\n    isAuth: state.auth.isAuth,\n    //  маркер авторизации\n    auth: state.auth.auth,\n    //авторизация для role\n    types: state.devices.types,\n    //  типы устройств\n    isFetchErrorTypes: state.devices.isFetchErrorTypes,\n    //ошибка загруки типов устройств\n    totalCount: state.basket.totalCount //количества товаров в корзине\n\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setAuth,\n  setLogout,\n  setIsAuth,\n  getTypes,\n  getBrands,\n  setBrandId,\n  setTypeId,\n  setName,\n  getProductCart\n})(Header);\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/components/Header.tsx"],"names":["React","useEffect","makeStyles","createStyles","AppBar","Toolbar","IconButton","PersonAddOutlinedIcon","Badge","ShoppingCartOutlinedIcon","Divider","setAuth","setIsAuth","setLogout","setBrandId","setTypeId","setName","getBrands","getTypes","getProductCart","useHistory","Logo7","MenuAdmin","Logout","MenuBar","SearchInput","connect","useStyles","theme","toolBar","display","Header","auth","isAuth","types","isFetchErrorTypes","totalCount","history","classes","sessionStorage","getItem","authorizationData","token","email","role","background","padding","marginRight","height","width","push","fontSize","color","fontWeight","mapStateToProps","state","devices","basket"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PersonAddOutlinedIcon from '@material-ui/icons/PersonAddOutlined';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport ShoppingCartOutlinedIcon from '@material-ui/icons/ShoppingCartOutlined';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport {\r\n  setAuth, //записть авторизации в стор\r\n  setIsAuth, // экшен маркер авторизации\r\n  setLogout, // выход из авторизации\r\n  AuthReducerType, //типизация авторизации\r\n  SetAuthActionType, // типизация экшена авторизации\r\n  SetLogoutActionType, // типизация экшена выхода из авторизации\r\n  SetIsAuthActionType, // типизация экшена маркера типизации\r\n} from '../store/reducer/authReducer';\r\nimport {\r\n  TypeDeviceType, //типизация типа\r\n  setTypeIdActionType, //типизация экшена\r\n  setBrandIdActionType, //типтзация экшена\r\n  setNameActionType, // типизация экшен\r\n  setBrandId, //запись в стейт выбранного брэнда\r\n  setTypeId, //запись в стейт выбранного типа\r\n  setName, //запись имени товара(для поиска)\r\n} from '../store/reducer/deviceReducer';\r\nimport { getBrands, getTypes } from '../action/deviceAction'; //запрос на получениe типов устройств\r\nimport { getProductCart } from '../action/basketAction'; // запрос на получение содержимого корзины\r\nimport { RootStateType } from '../store/store'; //типизация всего стейта\r\nimport { useHistory } from 'react-router-dom';\r\nimport Logo7 from '../img/logo7.png';\r\nimport MenuAdmin from './MenuAdmin';\r\nimport Logout from './Logout';\r\nimport MenuBar from './MenuBar';\r\nimport SearchInput from './SearchInput';\r\nimport { connect } from 'react-redux';\r\n\r\n//типизация--------------------------------\r\ntype MapStateToPropsType = {\r\n  isAuth: boolean;\r\n  auth: AuthReducerType;\r\n  types: TypeDeviceType[];\r\n  isFetchErrorTypes: boolean;\r\n  totalCount: number;\r\n};\r\ntype MapDispathPropsType = {\r\n  setAuth: (value: AuthReducerType) => SetAuthActionType;\r\n  setIsAuth: (value: boolean) => SetIsAuthActionType;\r\n  setTypeId: (data: string | null) => setTypeIdActionType;\r\n  setBrandId: (data: string | null) => setBrandIdActionType;\r\n  setName: (data: string | null) => setNameActionType;\r\n  setLogout: () => SetLogoutActionType;\r\n  getTypes: () => void;\r\n  getBrands: () => void;\r\n  getProductCart: () => void;\r\n};\r\ntype PropsType = MapDispathPropsType & MapStateToPropsType;\r\n//-----------------------------------------\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    /*  title: {\r\n      display: 'none',\r\n      [theme.breakpoints.up('sm')]: {\r\n        display: 'block',\r\n      }, \r\n    },*/\r\n\r\n    toolBar: {\r\n      display: 'block',\r\n      '@media (min-width:600px)': {\r\n        display: 'flex',\r\n      },\r\n    },\r\n  })\r\n);\r\n\r\nconst Header: React.FC<PropsType> = ({\r\n  auth,\r\n  isAuth,\r\n  types,\r\n  isFetchErrorTypes,\r\n  totalCount,\r\n  setAuth,\r\n  setLogout,\r\n  setIsAuth,\r\n  getTypes,\r\n  getBrands,\r\n  setBrandId,\r\n  setTypeId,\r\n  setName,\r\n  getProductCart,\r\n}) => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    setIsAuth(!!sessionStorage.getItem('token')); //берём токен из sessionStorage и приводим его к булевому значению\r\n\r\n    const authorizationData: AuthReducerType = {\r\n      //берём данные из sessionStorage и записываем в стор\r\n      token: sessionStorage.getItem('token'),\r\n      email: sessionStorage.getItem('email'),\r\n      role: sessionStorage.getItem('role'),\r\n    };\r\n    setAuth(authorizationData);\r\n    // загрузка типов устройств\r\n    getTypes();\r\n    // загрузка брендов\r\n    getBrands();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // загрузка корзины\r\n\r\n    //console.log('загрука из корзины');\r\n    getProductCart();\r\n\r\n    // eslint-disable-next-line\r\n  }, [isAuth]);\r\n\r\n  return (\r\n    <>\r\n      <AppBar\r\n        position=\"static\"\r\n        style={{ background: '#fff', padding: '0' }}\r\n        elevation={0}\r\n      >\r\n        <Toolbar className={classes.toolBar}>\r\n          <div style={{ marginRight: '300px' }}>\r\n            <img src={Logo7} style={{ height: '100px', width: 'auto' }} />\r\n          </div>\r\n          <SearchInput setName={setName} />\r\n          {isAuth && auth.role === 'ADMIN' && (\r\n            <MenuAdmin setTypeId={setTypeId} setBrandId={setBrandId} />\r\n          )}\r\n          {isAuth ? (\r\n            <>\r\n              <IconButton color=\"inherit\" onClick={() => history.push('/cart')}>\r\n                <Badge badgeContent={totalCount} color=\"secondary\">\r\n                  <ShoppingCartOutlinedIcon\r\n                    style={{\r\n                      fontSize: '35px',\r\n                      color: 'black',\r\n                      fontWeight: 'lighter',\r\n                    }}\r\n                  />\r\n                </Badge>\r\n              </IconButton>\r\n              <Logout setLogout={setLogout} />\r\n            </>\r\n          ) : (\r\n            <IconButton onClick={() => history.push('/login')}>\r\n              <PersonAddOutlinedIcon\r\n                style={{ fontSize: '35px', color: 'black' }}\r\n              />\r\n            </IconButton>\r\n          )}\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Divider />\r\n      <MenuBar\r\n        types={types}\r\n        setBrandId={setBrandId}\r\n        setTypeId={setTypeId}\r\n        isFetchErrorTypes={isFetchErrorTypes}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n  return {\r\n    isAuth: state.auth.isAuth, //  маркер авторизации\r\n    auth: state.auth.auth, //авторизация для role\r\n    types: state.devices.types, //  типы устройств\r\n    isFetchErrorTypes: state.devices.isFetchErrorTypes, //ошибка загруки типов устройств\r\n    totalCount: state.basket.totalCount, //количества товаров в корзине\r\n  };\r\n};\r\nexport default connect<\r\n  MapStateToPropsType,\r\n  MapDispathPropsType,\r\n  unknown, // личные пропсы\r\n  RootStateType\r\n>(mapStateToProps, {\r\n  setAuth,\r\n  setLogout,\r\n  setIsAuth,\r\n  getTypes,\r\n  getBrands,\r\n  setBrandId,\r\n  setTypeId,\r\n  setName,\r\n  getProductCart,\r\n})(Header);\r\n"]},"metadata":{},"sourceType":"module"}