{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\components\\\\SearchInput.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { alpha, createStyles, makeStyles } from '@material-ui/core/styles';\nimport InputBase from '@material-ui/core/InputBase';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//-------------------------------------------\nconst useStyles = makeStyles(theme => createStyles({\n  grow: {\n    flexGrow: 1\n  },\n\n  /*  title: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    }, \r\n  },*/\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: alpha(theme.palette.common.black, 0.15),\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.common.black, 0.25)\n    },\n    marginRight: 300,\n    // marginLeft: 200,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(3),\n      width: 'auto'\n    }\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  inputRoot: {\n    color: 'darck'\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: '20ch'\n    }\n  }\n}));\n\nconst SearchInput = ({\n  setName\n}) => {\n  _s();\n\n  const history = useHistory();\n  const classes = useStyles();\n  const [value, setValue] = useState(''); // извлекаем значение импута\n\n  const handleInput = e => {\n    setValue(e.target.value);\n  }; // записываем значение импута в стейт(после нажатия на кнопку энтер)\n\n\n  const pressEnter = e => {\n    if (e.key === 'Enter' && value !== '') {\n      setName(value);\n      setValue(''); // console.log('Энтер:', value);\n\n      history.push('/searchPage');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.grow,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.search,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.searchIcon,\n        children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputBase, {\n        placeholder: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0442\\u043E\\u0432\\u0430\\u0440\\u0430\\u2026\",\n        value: value,\n        classes: {\n          root: classes.inputRoot,\n          input: classes.inputInput\n        },\n        onChange: handleInput,\n        onKeyPress: pressEnter //событие на нажатия клавиатуры\n        // inputProps={{ 'aria-label': 'search' }}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchInput, \"UU6XmQJ3JbyQ2VGJRMjDAvHTQWI=\", false, function () {\n  return [useHistory, useStyles];\n});\n\n_c = SearchInput;\nexport default SearchInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchInput\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/components/SearchInput.tsx"],"names":["React","useState","useHistory","alpha","createStyles","makeStyles","InputBase","SearchIcon","useStyles","theme","grow","flexGrow","search","position","borderRadius","shape","backgroundColor","palette","common","black","marginRight","width","breakpoints","up","marginLeft","spacing","searchIcon","padding","height","pointerEvents","display","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","SearchInput","setName","history","classes","value","setValue","handleInput","e","target","pressEnter","key","push","root","input"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n  alpha,\r\n  createStyles,\r\n  makeStyles,\r\n  Theme,\r\n} from '@material-ui/core/styles';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { setNameActionType } from '../store/reducer/deviceReducer';\r\n\r\n//типизация----------------------------------\r\ntype PropsType = {\r\n  setName: (data: string) => setNameActionType;\r\n};\r\n//-------------------------------------------\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    grow: {\r\n      flexGrow: 1,\r\n    },\r\n\r\n    /*  title: {\r\n      display: 'none',\r\n      [theme.breakpoints.up('sm')]: {\r\n        display: 'block',\r\n      }, \r\n    },*/\r\n    search: {\r\n      position: 'relative',\r\n      borderRadius: theme.shape.borderRadius,\r\n      backgroundColor: alpha(theme.palette.common.black, 0.15),\r\n      '&:hover': {\r\n        backgroundColor: alpha(theme.palette.common.black, 0.25),\r\n      },\r\n      marginRight: 300,\r\n      // marginLeft: 200,\r\n      width: '100%',\r\n      [theme.breakpoints.up('sm')]: {\r\n        marginLeft: theme.spacing(3),\r\n        width: 'auto',\r\n      },\r\n    },\r\n    searchIcon: {\r\n      padding: theme.spacing(0, 2),\r\n      height: '100%',\r\n      position: 'absolute',\r\n      pointerEvents: 'none',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    inputRoot: {\r\n      color: 'darck',\r\n    },\r\n    inputInput: {\r\n      padding: theme.spacing(1, 1, 1, 0),\r\n      // vertical padding + font size from searchIcon\r\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n      transition: theme.transitions.create('width'),\r\n      width: '100%',\r\n      [theme.breakpoints.up('md')]: {\r\n        width: '20ch',\r\n      },\r\n    },\r\n  })\r\n);\r\n\r\nconst SearchInput: React.FC<PropsType> = ({ setName }) => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [value, setValue] = useState('');\r\n  // извлекаем значение импута\r\n  const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setValue(e.target.value);\r\n  };\r\n  // записываем значение импута в стейт(после нажатия на кнопку энтер)\r\n  const pressEnter = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter' && value !== '') {\r\n      setName(value);\r\n      setValue('');\r\n      // console.log('Энтер:', value);\r\n      history.push('/searchPage');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.grow}>\r\n      <div className={classes.search}>\r\n        <div className={classes.searchIcon}>\r\n          <SearchIcon />\r\n        </div>\r\n        <InputBase\r\n          placeholder=\"Название товара…\"\r\n          value={value}\r\n          classes={{\r\n            root: classes.inputRoot,\r\n            input: classes.inputInput,\r\n          }}\r\n          onChange={handleInput}\r\n          onKeyPress={pressEnter} //событие на нажатия клавиатуры\r\n          // inputProps={{ 'aria-label': 'search' }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n"]},"metadata":{},"sourceType":"module"}