{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\components\\\\Header.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport SupervisorAccountOutlinedIcon from '@material-ui/icons/SupervisorAccountOutlined';\nimport PersonAddOutlinedIcon from '@material-ui/icons/PersonAddOutlined';\nimport Badge from '@material-ui/core/Badge';\nimport Button from '@material-ui/core/Button';\nimport ShoppingCartOutlinedIcon from '@material-ui/icons/ShoppingCartOutlined';\nimport Divider from '@material-ui/core/Divider';\nimport Logout from './Logout';\nimport MenuBar from './MenuBar';\nimport { setAuth, //записть авторизации в стор\nsetIsAuth, // маркер авторизации\nsetLogout // типизация экшена маркера типизации\n} from '../store/reducer/authReducer';\nimport { //типизация типа\n//типизация экшена\n//экшена\nsetBrandId, //запись в стейт выбранного типа\nsetTypeId //запись в стейт выбранного ,h'ylf\n} from '../store/reducer/deviceReducer';\nimport { getBrands, getTypes } from '../action/deviceAction'; //запрос на получениe типов устройств\n\n//типизация всего стейта\nimport { useHistory } from 'react-router-dom';\nimport Logo7 from '../img/logo7.png';\nimport { connect } from 'react-redux'; //типизация--------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n//-----------------------------------------\nconst useStyles = makeStyles(theme => ({\n  title: {\n    flexGrow: 1,\n    backgroundImage: \"url('/images/logo3.png')\",\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: 'left'\n  },\n  toolBar: {\n    display: 'block',\n    '@media (min-width:600px)': {\n      display: 'flex'\n    }\n  }\n}));\n\nconst Header = ({\n  auth,\n  isAuth,\n  types,\n  isFetchErrorTypes,\n  setAuth,\n  setLogout,\n  setIsAuth,\n  getTypes,\n  getBrands,\n  setBrandId,\n  setTypeId\n}) => {\n  _s();\n\n  const history = useHistory();\n  const classes = useStyles();\n  useEffect(() => {\n    setIsAuth(!!sessionStorage.getItem('token')); //берём токен из sessionStorage и приводим его к булевому значению\n\n    const authorizationData = {\n      //берём данные из sessionStorage и записываем в стор\n      token: sessionStorage.getItem('token'),\n      email: sessionStorage.getItem('email'),\n      role: sessionStorage.getItem('role')\n    };\n    setAuth(authorizationData); // загрузка типов устройств\n\n    getTypes(); // загрузка брендов\n\n    getBrands(); // eslint-disable-next-line\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AppBar, {\n      position: \"static\",\n      style: {\n        background: '#fff',\n        padding: '0'\n      },\n      elevation: 0,\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {\n        className: classes.toolBar,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            flexGrow: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: Logo7,\n            style: {\n              height: '100px',\n              width: 'auto'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), isAuth && auth.role === 'ADMIN' && /*#__PURE__*/_jsxDEV(Button, {\n          color: \"inherit\",\n          onClick: () => {\n            history.push('/addDevicesContainer');\n          },\n          children: /*#__PURE__*/_jsxDEV(SupervisorAccountOutlinedIcon, {\n            style: {\n              fontSize: '35px',\n              color: 'black'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), isAuth ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(IconButton, {\n            color: \"inherit\",\n            children: /*#__PURE__*/_jsxDEV(Badge, {\n              badgeContent: 3,\n              color: \"secondary\",\n              children: /*#__PURE__*/_jsxDEV(ShoppingCartOutlinedIcon, {\n                style: {\n                  fontSize: '35px',\n                  color: 'black'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Logout, {\n            setLogout: setLogout\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: () => history.push('/login'),\n          children: /*#__PURE__*/_jsxDEV(PersonAddOutlinedIcon, {\n            style: {\n              fontSize: '35px',\n              color: 'black'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MenuBar, {\n      types: types,\n      setBrandId: setBrandId,\n      setTypeId: setTypeId,\n      isFetchErrorTypes: isFetchErrorTypes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Header, \"a770Wo9grBp66oG4IhbrG9riUrM=\", false, function () {\n  return [useHistory, useStyles];\n});\n\n_c = Header;\n\nconst mapStateToProps = state => {\n  return {\n    isAuth: state.auth.isAuth,\n    //  маркер авторизации\n    auth: state.auth.auth,\n    //авторизация для role\n    types: state.devices.types,\n    //  типы устройств\n    isFetchErrorTypes: state.devices.isFetchErrorTypes //ошибка загруки типов устройств\n\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setAuth,\n  setLogout,\n  setIsAuth,\n  getTypes,\n  getBrands,\n  setBrandId,\n  setTypeId\n})(Header);\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/components/Header.tsx"],"names":["React","useEffect","makeStyles","AppBar","Toolbar","IconButton","SupervisorAccountOutlinedIcon","PersonAddOutlinedIcon","Badge","Button","ShoppingCartOutlinedIcon","Divider","Logout","MenuBar","setAuth","setIsAuth","setLogout","setBrandId","setTypeId","getBrands","getTypes","useHistory","Logo7","connect","useStyles","theme","title","flexGrow","backgroundImage","backgroundRepeat","backgroundPosition","toolBar","display","Header","auth","isAuth","types","isFetchErrorTypes","history","classes","sessionStorage","getItem","authorizationData","token","email","role","background","padding","height","width","push","fontSize","color","mapStateToProps","state","devices"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SupervisorAccountOutlinedIcon from '@material-ui/icons/SupervisorAccountOutlined';\r\nimport PersonAddOutlinedIcon from '@material-ui/icons/PersonAddOutlined';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Button from '@material-ui/core/Button';\r\nimport ShoppingCartOutlinedIcon from '@material-ui/icons/ShoppingCartOutlined';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Logout from './Logout';\r\nimport MenuBar from './MenuBar';\r\nimport {\r\n  setAuth, //записть авторизации в стор\r\n  setIsAuth, // маркер авторизации\r\n  setLogout, // выход из авторизации\r\n  AuthReducerType, //типизация авторизации\r\n  SetAuthActionType, // типизация экшена авторизации\r\n  SetLogoutActionType, // типизация экшена выхода из авторизации\r\n  SetIsAuthActionType, // типизация экшена маркера типизации\r\n} from '../store/reducer/authReducer';\r\nimport {\r\n  TypeDeviceType, //типизация типа\r\n  setTypeIdActionType, //типизация экшена\r\n  setBrandIdActionType, //экшена\r\n  setBrandId, //запись в стейт выбранного типа\r\n  setTypeId, //запись в стейт выбранного ,h'ylf\r\n} from '../store/reducer/deviceReducer';\r\nimport { getBrands, getTypes } from '../action/deviceAction'; //запрос на получениe типов устройств\r\nimport { RootStateType } from '../store/store'; //типизация всего стейта\r\nimport { useHistory } from 'react-router-dom';\r\nimport Logo7 from '../img/logo7.png';\r\nimport { connect } from 'react-redux';\r\n\r\n//типизация--------------------------------\r\ntype MapStateToPropsType = {\r\n  isAuth: boolean;\r\n  auth: AuthReducerType;\r\n  types: TypeDeviceType[];\r\n  isFetchErrorTypes: boolean;\r\n};\r\ntype MapDispathPropsType = {\r\n  setAuth: (value: AuthReducerType) => SetAuthActionType;\r\n  setIsAuth: (value: boolean) => SetIsAuthActionType;\r\n  setTypeId: (data: string | null) => setTypeIdActionType;\r\n  setBrandId: (data: string | null) => setBrandIdActionType;\r\n  setLogout: () => SetLogoutActionType;\r\n  getTypes: () => void;\r\n  getBrands: () => void;\r\n};\r\ntype PropsType = MapDispathPropsType & MapStateToPropsType;\r\n//-----------------------------------------\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  title: {\r\n    flexGrow: 1,\r\n    backgroundImage: \"url('/images/logo3.png')\",\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundPosition: 'left',\r\n  },\r\n\r\n  toolBar: {\r\n    display: 'block',\r\n    '@media (min-width:600px)': {\r\n      display: 'flex',\r\n    },\r\n  },\r\n}));\r\n\r\nconst Header: React.FC<PropsType> = ({\r\n  auth,\r\n  isAuth,\r\n  types,\r\n  isFetchErrorTypes,\r\n  setAuth,\r\n  setLogout,\r\n  setIsAuth,\r\n  getTypes,\r\n  getBrands,\r\n  setBrandId,\r\n  setTypeId,\r\n}) => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    setIsAuth(!!sessionStorage.getItem('token')); //берём токен из sessionStorage и приводим его к булевому значению\r\n\r\n    const authorizationData: AuthReducerType = {\r\n      //берём данные из sessionStorage и записываем в стор\r\n      token: sessionStorage.getItem('token'),\r\n      email: sessionStorage.getItem('email'),\r\n      role: sessionStorage.getItem('role'),\r\n    };\r\n    setAuth(authorizationData);\r\n    // загрузка типов устройств\r\n    getTypes();\r\n    // загрузка брендов\r\n    getBrands();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <AppBar\r\n        position=\"static\"\r\n        style={{ background: '#fff', padding: '0' }}\r\n        elevation={0}\r\n      >\r\n        <Toolbar className={classes.toolBar}>\r\n          <div style={{ flexGrow: 1 }}>\r\n            <img src={Logo7} style={{ height: '100px', width: 'auto' }} />\r\n          </div>\r\n\r\n          {/* <Box py={{ xs: 12, sm: 7 }} className={classes.title}></Box> */}\r\n\r\n          {isAuth && auth.role === 'ADMIN' && (\r\n            <Button\r\n              color=\"inherit\"\r\n              onClick={() => {\r\n                history.push('/addDevicesContainer');\r\n              }}\r\n            >\r\n              <SupervisorAccountOutlinedIcon\r\n                style={{ fontSize: '35px', color: 'black' }}\r\n              />\r\n            </Button>\r\n          )}\r\n          {isAuth ? (\r\n            <>\r\n              <IconButton color=\"inherit\">\r\n                <Badge badgeContent={3} color=\"secondary\">\r\n                  <ShoppingCartOutlinedIcon\r\n                    style={{ fontSize: '35px', color: 'black' }}\r\n                  />\r\n                </Badge>\r\n              </IconButton>\r\n              <Logout setLogout={setLogout} />\r\n            </>\r\n          ) : (\r\n            <IconButton onClick={() => history.push('/login')}>\r\n              <PersonAddOutlinedIcon\r\n                style={{ fontSize: '35px', color: 'black' }}\r\n              />\r\n            </IconButton>\r\n          )}\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Divider />\r\n      <MenuBar\r\n        types={types}\r\n        setBrandId={setBrandId}\r\n        setTypeId={setTypeId}\r\n        isFetchErrorTypes={isFetchErrorTypes}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n  return {\r\n    isAuth: state.auth.isAuth, //  маркер авторизации\r\n    auth: state.auth.auth, //авторизация для role\r\n    types: state.devices.types, //  типы устройств\r\n    isFetchErrorTypes: state.devices.isFetchErrorTypes, //ошибка загруки типов устройств\r\n  };\r\n};\r\nexport default connect<\r\n  MapStateToPropsType,\r\n  MapDispathPropsType,\r\n  unknown, // личные пропсы\r\n  RootStateType\r\n>(mapStateToProps, {\r\n  setAuth,\r\n  setLogout,\r\n  setIsAuth,\r\n  getTypes,\r\n  getBrands,\r\n  setBrandId,\r\n  setTypeId,\r\n})(Header);\r\n"]},"metadata":{},"sourceType":"module"}