{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\pages\\\\Content.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Pagination from '@material-ui/lab/Pagination';\nimport TypeBar from '../components/TypeBar';\nimport DeviceContainer from '../components/DeviceContainer';\n//типизиция всего стора\nimport { setTypeId, //запись выбранного типа устройства\nsetBrandId, //запись выбранного  брэнда устройства\nsetCurrentPage //запись текущей страницы\n} from '../store/reducer/deviceReducer';\n//типизация данных\nimport { getDevices, getTypes } from '../action/deviceAction'; //запрос на получение устройств  и типов устройств\n\nimport { connect } from 'react-redux'; //типизация--------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//-----------------------------------------\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    '& > *': {\n      marginTop: theme.spacing(2)\n    },\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginBottom: theme.spacing(2)\n  },\n  grid: {\n    width: '100%',\n    height: '100%',\n    overflow: 'auto'\n  }\n}));\n\nconst Content = ({\n  getDevices,\n  getTypes,\n  setTypeId,\n  setBrandId,\n  setCurrentPage,\n  devices,\n  types,\n  totalCount,\n  limit,\n  page,\n  typeId,\n  brandId\n}) => {\n  _s();\n\n  const classes = useStyles(); // пагинация, передача текущей  страницы\n  // const [page, setPage] = useState(1);\n\n  const handleChange = (event, value) => {\n    setCurrentPage(value);\n  };\n\n  let countPage = Math.ceil(totalCount / limit); //для пагинации,расчёт количества страниц\n  // console.log(countPage);\n  // console.log(page);\n\n  useEffect(() => {\n    //если число страниц меньше активной страницы\n    if (totalCount / limit < page) {\n      console.log(totalCount);\n      setCurrentPage(1);\n    }\n\n    getDevices(typeId, brandId, limit, page); // eslint-disable-next-line\n  }, [typeId, brandId, page]);\n  useEffect(() => {\n    getTypes(); // eslint-disable-next-line\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    container: true,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 2,\n      className: classes.grid,\n      children: /*#__PURE__*/_jsxDEV(TypeBar, {\n        types: types,\n        setTypeId: setTypeId,\n        setBrandId: setBrandId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 10,\n      children: [/*#__PURE__*/_jsxDEV(DeviceContainer, {\n        devices: devices\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        className: classes.root,\n        count: countPage,\n        page: page,\n        showFirstButton: true,\n        showLastButton: true,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Content, \"e3X/1Rqsn7nblQK13ERnP9eN2qU=\", false, function () {\n  return [useStyles];\n});\n\n_c = Content;\n\nconst mapStateToProps = state => {\n  return {\n    devices: state.devices.devices,\n    types: state.devices.types,\n    totalCount: state.devices.totalCount,\n    limit: state.devices.limit,\n    page: state.devices.page,\n    typeId: state.devices.typeId,\n    brandId: state.devices.brandId\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getDevices,\n  getTypes,\n  setTypeId,\n  setBrandId,\n  setCurrentPage\n})(Content);\n\nvar _c;\n\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/pages/Content.tsx"],"names":["React","useEffect","Grid","makeStyles","createStyles","Pagination","TypeBar","DeviceContainer","setTypeId","setBrandId","setCurrentPage","getDevices","getTypes","connect","useStyles","theme","root","marginTop","spacing","display","flexDirection","justifyContent","marginBottom","grid","width","height","overflow","Content","devices","types","totalCount","limit","page","typeId","brandId","classes","handleChange","event","value","countPage","Math","ceil","console","log","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport TypeBar from '../components/TypeBar';\r\nimport DeviceContainer from '../components/DeviceContainer';\r\nimport { RootStateType } from '../store/store'; //типизиция всего стора\r\nimport {\r\n  setTypeId, //запись выбранного типа устройства\r\n  setBrandId, //запись выбранного  брэнда устройства\r\n  setCurrentPage, //запись текущей страницы\r\n} from '../store/reducer/deviceReducer';\r\nimport {\r\n  setCurrentPageActionType,\r\n  setTypeIdActionType,\r\n  setBrandIdActionType,\r\n} from '../store/reducer/deviceReducer'; // типизация экшенов\r\nimport { DeviceType, TypeDeviceType } from '../store/reducer/deviceReducer'; //типизация данных\r\nimport { getDevices, getTypes } from '../action/deviceAction'; //запрос на получение устройств  и типов устройств\r\nimport { connect } from 'react-redux';\r\n\r\n//типизация--------------------------------\r\ntype MapStateToPropsType = {\r\n  devices: DeviceType[];\r\n  types: TypeDeviceType[];\r\n  totalCount: number;\r\n  limit: number;\r\n  page: number;\r\n  typeId: string | null;\r\n  brandId: string | null;\r\n};\r\ntype MapDispathPropsType = {\r\n  getDevices: (\r\n    typeId: string | null,\r\n    brandId: string | null,\r\n    limit: number,\r\n    page: number | null\r\n  ) => void;\r\n  getTypes: () => void;\r\n  setTypeId: (data: string | null) => setTypeIdActionType;\r\n  setBrandId: (data: string | null) => setBrandIdActionType;\r\n  setCurrentPage: (data: number) => setCurrentPageActionType;\r\n};\r\n\r\ntype PropsType = MapDispathPropsType & MapStateToPropsType;\r\n//-----------------------------------------\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root: {\r\n      '& > *': {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      justifyContent: 'center',\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n    grid: {\r\n      width: '100%',\r\n      height: '100%',\r\n      overflow: 'auto',\r\n    },\r\n  })\r\n);\r\n\r\nconst Content: React.FC<PropsType> = ({\r\n  getDevices,\r\n  getTypes,\r\n  setTypeId,\r\n  setBrandId,\r\n  setCurrentPage,\r\n  devices,\r\n  types,\r\n  totalCount,\r\n  limit,\r\n  page,\r\n  typeId,\r\n  brandId,\r\n}) => {\r\n  const classes = useStyles();\r\n  // пагинация, передача текущей  страницы\r\n  // const [page, setPage] = useState(1);\r\n  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n    setCurrentPage(value);\r\n  };\r\n  let countPage: number = Math.ceil(totalCount / limit); //для пагинации,расчёт количества страниц\r\n  // console.log(countPage);\r\n  // console.log(page);\r\n  useEffect(() => {\r\n    //если число страниц меньше активной страницы\r\n    if (totalCount / limit < page) {\r\n      console.log(totalCount);\r\n      setCurrentPage(1);\r\n    }\r\n    getDevices(typeId, brandId, limit, page);\r\n\r\n    // eslint-disable-next-line\r\n  }, [typeId, brandId, page]);\r\n  useEffect(() => {\r\n    getTypes();\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  return (\r\n    <Grid item container>\r\n      <Grid item xs={12} sm={2} className={classes.grid}>\r\n        <TypeBar types={types} setTypeId={setTypeId} setBrandId={setBrandId} />\r\n      </Grid>\r\n      <Grid item xs={12} sm={10}>\r\n        <DeviceContainer devices={devices} />\r\n        <Pagination\r\n          className={classes.root}\r\n          count={countPage}\r\n          page={page}\r\n          showFirstButton\r\n          showLastButton\r\n          onChange={handleChange}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n  return {\r\n    devices: state.devices.devices,\r\n    types: state.devices.types,\r\n    totalCount: state.devices.totalCount,\r\n    limit: state.devices.limit,\r\n    page: state.devices.page,\r\n    typeId: state.devices.typeId,\r\n    brandId: state.devices.brandId,\r\n  };\r\n};\r\nexport default connect<\r\n  MapStateToPropsType,\r\n  MapDispathPropsType,\r\n  unknown, // личные пропсы\r\n  RootStateType\r\n>(mapStateToProps, {\r\n  getDevices,\r\n  getTypes,\r\n  setTypeId,\r\n  setBrandId,\r\n  setCurrentPage,\r\n})(Content);\r\n"]},"metadata":{},"sourceType":"module"}