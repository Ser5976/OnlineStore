{"ast":null,"code":"import axios from 'axios';\n//типизация всего стора\nimport { ModelUrls } from '../constants/url';\n//типизация экшенов устройств\nimport { setDevices, // запись устройств в стейт\nsetTypes, // запись типов в стейт\nsetPageQty, // запись количества страниц в стейт\nsetCurrentPage } from '../store/reducer/deviceReducer'; // типизация санки\n\n// получение выбранных устройств и запись в стейт\nexport const getDevices = (typeId, brandId, limit, page) => {\n  return async (dispatch, getState) => {\n    try {\n      //если число страниц меньше активной страницы\n      const response = await axios.get(`${ModelUrls.DEVICES}`, {\n        params: {\n          typeId,\n          brandId,\n          limit,\n          page\n        }\n      });\n      console.log(response);\n\n      if (response.data.pageQty < page) {\n        console.log('работает');\n        dispatch(setCurrentPage(1));\n      } //запись в стейт\n\n\n      dispatch(setDevices(response.data.device));\n      dispatch(setPageQty(response.data.pageQty));\n    } catch (e) {}\n  };\n}; // получение выбранных устройств и запись в стейт\n\nexport const getTypes = () => {\n  return async dispatch => {\n    try {\n      const response = await axios.get(ModelUrls.TYPES);\n      console.log(response); //запись в стейт\n\n      dispatch(setTypes(response.data));\n    } catch (e) {}\n  };\n};","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/action/deviceAction.ts"],"names":["axios","ModelUrls","setDevices","setTypes","setPageQty","setCurrentPage","getDevices","typeId","brandId","limit","page","dispatch","getState","response","get","DEVICES","params","console","log","data","pageQty","device","e","getTypes","TYPES"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEgD;AAChD,SAASC,SAAT,QAA0B,kBAA1B;AACkE;AAClE,SACEC,UADF,EACc;AACZC,QAFF,EAEY;AACVC,UAHF,EAGc;AACZC,cAJF,QAKO,gCALP,C,CAOA;;AAOA;AACA,OAAO,MAAMC,UAAU,GAAG,CACxBC,MADwB,EAExBC,OAFwB,EAGxBC,KAHwB,EAIxBC,IAJwB,KAKV;AACd,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnC,QAAI;AACF;AAEA,YAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAW,GAAEb,SAAS,CAACc,OAAQ,EAA/B,EAAkC;AACvDC,QAAAA,MAAM,EAAE;AACNT,UAAAA,MADM;AAENC,UAAAA,OAFM;AAGNC,UAAAA,KAHM;AAINC,UAAAA;AAJM;AAD+C,OAAlC,CAAvB;AAQAO,MAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;;AAEA,UAAIA,QAAQ,CAACM,IAAT,CAAcC,OAAd,GAAwBV,IAA5B,EAAkC;AAChCO,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAP,QAAAA,QAAQ,CAACN,cAAc,CAAC,CAAD,CAAf,CAAR;AACD,OAhBC,CAiBF;;;AACAM,MAAAA,QAAQ,CAACT,UAAU,CAACW,QAAQ,CAACM,IAAT,CAAcE,MAAf,CAAX,CAAR;AACAV,MAAAA,QAAQ,CAACP,UAAU,CAACS,QAAQ,CAACM,IAAT,CAAcC,OAAf,CAAX,CAAR;AACD,KApBD,CAoBE,OAAOE,CAAP,EAAe,CAAE;AACpB,GAtBD;AAuBD,CA7BM,C,CA8BP;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAiB;AACvC,SAAO,MAAOZ,QAAP,IAAoB;AACzB,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUb,SAAS,CAACuB,KAApB,CAAvB;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ,EAFE,CAGF;;AACAF,MAAAA,QAAQ,CAACR,QAAQ,CAACU,QAAQ,CAACM,IAAV,CAAT,CAAR;AACD,KALD,CAKE,OAAOG,CAAP,EAAe,CAAE;AACpB,GAPD;AAQD,CATM","sourcesContent":["import axios from 'axios';\r\nimport { ThunkAction } from 'redux-thunk'; // для типизации санки\r\nimport { RootStateType } from '../store/store'; //типизация всего стора\r\nimport { ModelUrls } from '../constants/url';\r\nimport { DeviceAtionType } from '../store/reducer/deviceReducer'; //типизация экшенов устройств\r\nimport {\r\n  setDevices, // запись устройств в стейт\r\n  setTypes, // запись типов в стейт\r\n  setPageQty, // запись количества страниц в стейт\r\n  setCurrentPage,\r\n} from '../store/reducer/deviceReducer';\r\n\r\n// типизация санки\r\nexport type ThunkType = ThunkAction<\r\n  Promise<void>,\r\n  RootStateType,\r\n  unknown, //extraArgument\r\n  DeviceAtionType\r\n>;\r\n// получение выбранных устройств и запись в стейт\r\nexport const getDevices = (\r\n  typeId: string | null,\r\n  brandId: string | null,\r\n  limit: number,\r\n  page: number\r\n): ThunkType => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      //если число страниц меньше активной страницы\r\n\r\n      const response = await axios.get(`${ModelUrls.DEVICES}`, {\r\n        params: {\r\n          typeId,\r\n          brandId,\r\n          limit,\r\n          page,\r\n        },\r\n      });\r\n      console.log(response);\r\n\r\n      if (response.data.pageQty < page) {\r\n        console.log('работает');\r\n        dispatch(setCurrentPage(1));\r\n      }\r\n      //запись в стейт\r\n      dispatch(setDevices(response.data.device));\r\n      dispatch(setPageQty(response.data.pageQty));\r\n    } catch (e: any) {}\r\n  };\r\n};\r\n// получение выбранных устройств и запись в стейт\r\nexport const getTypes = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.get(ModelUrls.TYPES);\r\n      console.log(response);\r\n      //запись в стейт\r\n      dispatch(setTypes(response.data));\r\n    } catch (e: any) {}\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}