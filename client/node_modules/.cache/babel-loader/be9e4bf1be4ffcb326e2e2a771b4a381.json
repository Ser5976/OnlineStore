{"ast":null,"code":"const SET_AUTH = 'SET_AUTH';\nconst SET_LOGOUT = 'SET_LOGOUT';\nconst SET_ERROR_MESSAGE = 'SET_ERROR_MESSAGE';\nconst SET_IS_AUTH = 'SET_IS_AUTH';\nconst SET_PATH = 'SET_PATH'; // типизация--------------------------------\n// типизация стейта\n\n//-------------------------------------------\nconst initialState = {\n  auth: {\n    email: null,\n    token: null,\n    role: null\n  },\n  //авторизация\n  errorMessage: null,\n  // ошибка авторизации\n  isAuth: false,\n  // булевое значение для авторизации\n  path: '/' // путь последнего клика\n\n};\nexport const authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_AUTH:\n      return { ...state,\n        auth: action.payload,\n        errorMessage: null\n      };\n\n    case SET_IS_AUTH:\n      return { ...state,\n        isAuth: action.payload\n      };\n\n    case SET_ERROR_MESSAGE:\n      return { ...state,\n        errorMessage: action.payload\n      };\n\n    case SET_LOGOUT:\n      return { ...state,\n        auth: { ...state.auth,\n          email: null,\n          token: null,\n          role: null\n        },\n        isAuth: false\n      };\n\n    case SET_PATH:\n      return { ...state,\n        path: action.payload\n      };\n\n    default:\n      return state;\n  }\n}; //запись авторизация\n\nexport const setAuth = value => ({\n  type: SET_AUTH,\n  payload: value\n}); // маркер авторизации\n\nexport const setIsAuth = value => ({\n  type: SET_IS_AUTH,\n  payload: value\n}); // данные об ошибки\n\nexport const setErrorMessage = data => ({\n  type: SET_ERROR_MESSAGE,\n  payload: data\n}); // выход из аторизации\n\nexport const setLogout = () => ({\n  type: SET_LOGOUT\n}); // запись пути последнего клика\n\nexport const setPath = value => ({\n  type: SET_PATH,\n  payload: value\n});","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/store/reducer/authReducer.ts"],"names":["SET_AUTH","SET_LOGOUT","SET_ERROR_MESSAGE","SET_IS_AUTH","SET_PATH","initialState","auth","email","token","role","errorMessage","isAuth","path","authReducer","state","action","type","payload","setAuth","value","setIsAuth","setErrorMessage","data","setLogout","setPath"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,UAAjB;AACA,MAAMC,UAAU,GAAG,YAAnB;AACA,MAAMC,iBAAiB,GAAG,mBAA1B;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,QAAQ,GAAG,UAAjB,C,CAEA;AACA;;AA0CA;AAEA,MAAMC,YAA8B,GAAG;AACrCC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,KAAK,EAAE,IAAtB;AAA4BC,IAAAA,IAAI,EAAE;AAAlC,GAD+B;AACW;AAChDC,EAAAA,YAAY,EAAE,IAFuB;AAEjB;AACpBC,EAAAA,MAAM,EAAE,KAH6B;AAGtB;AACfC,EAAAA,IAAI,EAAE,GAJ+B,CAI1B;;AAJ0B,CAAvC;AAOA,OAAO,MAAMC,WAAW,GAAG,CACzBC,KAAK,GAAGT,YADiB,EAEzBU,MAFyB,KAGJ;AACrB,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKhB,QAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELR,QAAAA,IAAI,EAAES,MAAM,CAACE,OAFR;AAGLP,QAAAA,YAAY,EAAE;AAHT,OAAP;;AAKF,SAAKP,WAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELH,QAAAA,MAAM,EAAEI,MAAM,CAACE;AAFV,OAAP;;AAIF,SAAKf,iBAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELJ,QAAAA,YAAY,EAAEK,MAAM,CAACE;AAFhB,OAAP;;AAIF,SAAKhB,UAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELR,QAAAA,IAAI,EAAE,EAAE,GAAGQ,KAAK,CAACR,IAAX;AAAiBC,UAAAA,KAAK,EAAE,IAAxB;AAA8BC,UAAAA,KAAK,EAAE,IAArC;AAA2CC,UAAAA,IAAI,EAAE;AAAjD,SAFD;AAGLE,QAAAA,MAAM,EAAE;AAHH,OAAP;;AAKF,SAAKP,QAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELF,QAAAA,IAAI,EAAEG,MAAM,CAACE;AAFR,OAAP;;AAKF;AACE,aAAOH,KAAP;AA9BJ;AAgCD,CApCM,C,CAsCP;;AACA,OAAO,MAAMI,OAAO,GAAIC,KAAD,KAAgD;AACrEH,EAAAA,IAAI,EAAEhB,QAD+D;AAErEiB,EAAAA,OAAO,EAAEE;AAF4D,CAAhD,CAAhB,C,CAIP;;AACA,OAAO,MAAMC,SAAS,GAAID,KAAD,KAA0C;AACjEH,EAAAA,IAAI,EAAEb,WAD2D;AAEjEc,EAAAA,OAAO,EAAEE;AAFwD,CAA1C,CAAlB,C,CAIP;;AACA,OAAO,MAAME,eAAe,GAAIC,IAAD,KAA8C;AAC3EN,EAAAA,IAAI,EAAEd,iBADqE;AAE3Ee,EAAAA,OAAO,EAAEK;AAFkE,CAA9C,CAAxB,C,CAIP;;AACA,OAAO,MAAMC,SAAS,GAAG,OAA4B;AACnDP,EAAAA,IAAI,EAAEf;AAD6C,CAA5B,CAAlB,C,CAGP;;AACA,OAAO,MAAMuB,OAAO,GAAIL,KAAD,KAAuC;AAC5DH,EAAAA,IAAI,EAAEZ,QADsD;AAE5Da,EAAAA,OAAO,EAAEE;AAFmD,CAAvC,CAAhB","sourcesContent":["const SET_AUTH = 'SET_AUTH';\r\nconst SET_LOGOUT = 'SET_LOGOUT';\r\nconst SET_ERROR_MESSAGE = 'SET_ERROR_MESSAGE';\r\nconst SET_IS_AUTH = 'SET_IS_AUTH';\r\nconst SET_PATH = 'SET_PATH';\r\n\r\n// типизация--------------------------------\r\n// типизация стейта\r\nexport type AuthReducerType = {\r\n  email: string | null;\r\n  token: string | null;\r\n  role?: string | null;\r\n};\r\n\r\nexport type InitialStateType = {\r\n  auth: AuthReducerType;\r\n  isAuth: boolean;\r\n  errorMessage: string | null;\r\n  path: string;\r\n};\r\n\r\n// типизация экшена\r\nexport type SetAuthActionType = {\r\n  type: typeof SET_AUTH;\r\n  payload: AuthReducerType;\r\n};\r\nexport type SetIsAuthActionType = {\r\n  type: typeof SET_IS_AUTH;\r\n  payload: boolean;\r\n};\r\nexport type SetErrorMessageActionType = {\r\n  type: typeof SET_ERROR_MESSAGE;\r\n  payload: string;\r\n};\r\nexport type SetLogoutActionType = {\r\n  type: typeof SET_LOGOUT;\r\n};\r\nexport type SetPathActionType = {\r\n  type: typeof SET_PATH;\r\n  payload: string;\r\n};\r\n\r\nexport type SetActionType =\r\n  | SetAuthActionType\r\n  | SetErrorMessageActionType\r\n  | SetLogoutActionType\r\n  | SetIsAuthActionType\r\n  | SetPathActionType;\r\n\r\n//-------------------------------------------\r\n\r\nconst initialState: InitialStateType = {\r\n  auth: { email: null, token: null, role: null }, //авторизация\r\n  errorMessage: null, // ошибка авторизации\r\n  isAuth: false, // булевое значение для авторизации\r\n  path: '/', // путь последнего клика\r\n};\r\n\r\nexport const authReducer = (\r\n  state = initialState,\r\n  action: SetActionType\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case SET_AUTH:\r\n      return {\r\n        ...state,\r\n        auth: action.payload,\r\n        errorMessage: null,\r\n      };\r\n    case SET_IS_AUTH:\r\n      return {\r\n        ...state,\r\n        isAuth: action.payload,\r\n      };\r\n    case SET_ERROR_MESSAGE:\r\n      return {\r\n        ...state,\r\n        errorMessage: action.payload,\r\n      };\r\n    case SET_LOGOUT:\r\n      return {\r\n        ...state,\r\n        auth: { ...state.auth, email: null, token: null, role: null },\r\n        isAuth: false,\r\n      };\r\n    case SET_PATH:\r\n      return {\r\n        ...state,\r\n        path: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//запись авторизация\r\nexport const setAuth = (value: AuthReducerType): SetAuthActionType => ({\r\n  type: SET_AUTH,\r\n  payload: value,\r\n});\r\n// маркер авторизации\r\nexport const setIsAuth = (value: boolean): SetIsAuthActionType => ({\r\n  type: SET_IS_AUTH,\r\n  payload: value,\r\n});\r\n// данные об ошибки\r\nexport const setErrorMessage = (data: string): SetErrorMessageActionType => ({\r\n  type: SET_ERROR_MESSAGE,\r\n  payload: data,\r\n});\r\n// выход из аторизации\r\nexport const setLogout = (): SetLogoutActionType => ({\r\n  type: SET_LOGOUT,\r\n});\r\n// запись пути последнего клика\r\nexport const setPath = (value: string): SetPathActionType => ({\r\n  type: SET_PATH,\r\n  payload: value,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}