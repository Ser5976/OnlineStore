{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\components\\\\DeviceProperty.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm, Controller, useFieldArray } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//схема валидации---------------------\nconst schema = yup.object().shape({\n  title: yup.string().required('Поле обязательное для заполнения'),\n  description: yup.string().required('Поле обязательное для заполнения')\n}); //-----------------------------------------\n\nconst DeviceProperty = () => {\n  _s();\n\n  /*  const [info, setInfo] = useState<InfoType[]>([]);\r\n    const addInfo = (): void => {\r\n    setInfo([...info, { title: '', description: '', id: Date.now() }]);\r\n  };\r\n    const removeInfo = (id: number | undefined): void => {\r\n    setInfo(info.filter((item) => item.id !== id));\r\n  }; */\n  const {\n    handleSubmit,\n    control,\n    watch,\n    formState: {\n      errors\n    },\n    register,\n    reset,\n    trigger\n  } = useForm({\n    defaultValues: {\n      test: [{\n        title: 'Bill',\n        description: 'Luo'\n      }]\n    },\n    resolver: yupResolver(schema),\n    mode: 'onBlur'\n  }); // получение данных из формы и отправка на сервак(авторизация или регистрация)\n\n  const onSubmit = data => {\n    console.log('Отправлено:', data);\n  };\n  /*  const changeInfo = (\r\n    key: string,\r\n    id: number | undefined,\r\n    value: any\r\n  ): void => {\r\n    console.log(key);\r\n    console.log(watch('title'));\r\n    setInfo(info.map((i) => (i.id === id ? { ...i, [key]: value } : i)));\r\n  };\r\n  const onCl = (): void => {\r\n    console.log(info);\r\n  };\r\n  const title = watch('title');\r\n  const description = watch('description'); */\n\n\n  const {\n    fields,\n    append,\n    remove\n  } = useFieldArray({\n    control,\n    name: 'test'\n  }); // console.log(fields);\n  // console.log(remove);\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      noValidate: true,\n      onSubmit: handleSubmit(onSubmit),\n      children: [fields.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 3,\n            children: /*#__PURE__*/_jsxDEV(TextField, { ...register(`test.${index}.title`),\n              required: true,\n              fullWidth: true,\n              label: \" \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \" //  error={!!errors.title}\n              //   helperText={errors.title ? errors.title?.message : null}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 7,\n            children: /*#__PURE__*/_jsxDEV(Controller, {\n              name: `test.${index}.description`,\n              control: control,\n              render: ({\n                field\n              }) => /*#__PURE__*/_jsxDEV(TextField, { ...field,\n                required: true,\n                fullWidth: true,\n                label: \" \\u043E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435 \",\n                multiline: true //  error={!!errors.description}\n                //  helperText={\n                //     errors.description ? errors.description?.message : null\n                //    }\n\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 2,\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => remove(index),\n              children: /*#__PURE__*/_jsxDEV(HighlightOffIcon, {\n                style: {\n                  fontSize: 30\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this)]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => append({\n          title: '',\n          description: ''\n        }),\n        children: \"append\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DeviceProperty, \"EzZkPOVm1tiUteCTtz7M/fwgoUE=\", false, function () {\n  return [useForm, useFieldArray];\n});\n\n_c = DeviceProperty;\nexport default DeviceProperty;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeviceProperty\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/components/DeviceProperty.tsx"],"names":["React","useForm","Controller","useFieldArray","yupResolver","yup","Grid","TextField","IconButton","HighlightOffIcon","schema","object","shape","title","string","required","description","DeviceProperty","handleSubmit","control","watch","formState","errors","register","reset","trigger","defaultValues","test","resolver","mode","onSubmit","data","console","log","fields","append","remove","name","map","item","index","field","fontSize","id"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  useForm,\r\n  SubmitHandler,\r\n  Controller,\r\n  useFieldArray,\r\n} from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n//типизация данных\r\ntype InfoType = {\r\n  title: string;\r\n  description: string;\r\n  id?: number;\r\n};\r\n\r\n//схема валидации---------------------\r\nconst schema = yup.object().shape({\r\n  title: yup.string().required('Поле обязательное для заполнения'),\r\n  description: yup.string().required('Поле обязательное для заполнения'),\r\n});\r\n//-----------------------------------------\r\n\r\nconst DeviceProperty = () => {\r\n  /*  const [info, setInfo] = useState<InfoType[]>([]);\r\n\r\n  const addInfo = (): void => {\r\n    setInfo([...info, { title: '', description: '', id: Date.now() }]);\r\n  };\r\n\r\n  const removeInfo = (id: number | undefined): void => {\r\n    setInfo(info.filter((item) => item.id !== id));\r\n  }; */\r\n\r\n  const {\r\n    handleSubmit,\r\n    control,\r\n    watch,\r\n    formState: { errors },\r\n    register,\r\n    reset,\r\n    trigger,\r\n  } = useForm({\r\n    defaultValues: {\r\n      test: [{ title: 'Bill', description: 'Luo' }],\r\n    },\r\n    resolver: yupResolver(schema),\r\n    mode: 'onBlur',\r\n  });\r\n  // получение данных из формы и отправка на сервак(авторизация или регистрация)\r\n  const onSubmit: SubmitHandler<InfoType[]> = (data: InfoType[]): void => {\r\n    console.log('Отправлено:', data);\r\n  };\r\n  /*  const changeInfo = (\r\n    key: string,\r\n    id: number | undefined,\r\n    value: any\r\n  ): void => {\r\n    console.log(key);\r\n    console.log(watch('title'));\r\n    setInfo(info.map((i) => (i.id === id ? { ...i, [key]: value } : i)));\r\n  };\r\n  const onCl = (): void => {\r\n    console.log(info);\r\n  };\r\n  const title = watch('title');\r\n  const description = watch('description'); */\r\n\r\n  const { fields, append, remove } = useFieldArray({\r\n    control,\r\n    name: 'test',\r\n  });\r\n\r\n  // console.log(fields);\r\n  // console.log(remove);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* <Button\r\n        color=\"primary\"\r\n        style={{ marginBottom: 15 }}\r\n        //  onClick={addInfo}\r\n        //className={classes.button}\r\n      >\r\n        Добавить новое свойство\r\n      </Button> */}\r\n      <form noValidate onSubmit={handleSubmit(onSubmit)}>\r\n        {fields.map((item, index) => {\r\n          return (\r\n            <Grid container spacing={3} key={item.id}>\r\n              <Grid item xs={12} sm={3}>\r\n                <TextField\r\n                  {...register(`test.${index}.title`)}\r\n                  required\r\n                  fullWidth\r\n                  label=\" название \"\r\n                  //  error={!!errors.title}\r\n                  //   helperText={errors.title ? errors.title?.message : null}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={7}>\r\n                <Controller\r\n                  name={`test.${index}.description`}\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      required\r\n                      fullWidth\r\n                      label=\" описание \"\r\n                      multiline\r\n                      //  error={!!errors.description}\r\n                      //  helperText={\r\n                      //     errors.description ? errors.description?.message : null\r\n                      //    }\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={2}>\r\n                <IconButton onClick={() => remove(index)}>\r\n                  <HighlightOffIcon style={{ fontSize: 30 }} />\r\n                </IconButton>\r\n              </Grid>\r\n            </Grid>\r\n          );\r\n        })}\r\n        {/*  <Button onClick={onCl}>Отправить</Button> */}\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => append({ title: '', description: '' })}\r\n        >\r\n          append\r\n        </button>\r\n        <input type=\"submit\" />\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default DeviceProperty;\r\n"]},"metadata":{},"sourceType":"module"}