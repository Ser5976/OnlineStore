{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\components\\\\Header.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Badge from '@material-ui/core/Badge';\nimport Button from '@material-ui/core/Button';\nimport ShoppingCart from '@material-ui/icons/ShoppingCart';\nimport Logout from './Logout';\nimport { setAuth, //записть авторизации в стор\nsetIsAuth, // маркер авторизации\nsetLogout // типизация экшена маркера типизации\n} from '../store/reducer/authReducer';\nimport { getTypes } from '../action/deviceAction'; //запрос на получениe типов устройств\n\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux'; //типизация--------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n//-----------------------------------------\nconst useStyles = makeStyles(theme => ({\n  title: {\n    flexGrow: 1\n  },\n  login: { ...theme.typography.button\n  }\n}));\n\nconst Header = ({\n  auth,\n  isAuth,\n  setAuth,\n  setLogout,\n  setIsAuth\n}) => {\n  _s();\n\n  const history = useHistory();\n  const classes = useStyles();\n  useEffect(() => {\n    setIsAuth(!!sessionStorage.getItem('token')); //берём токен из sessionStorage и приводим его к булевому значению\n\n    const authorizationData = {\n      //берём данные из sessionStorage и записываем в стор\n      token: sessionStorage.getItem('token'),\n      email: sessionStorage.getItem('email'),\n      role: sessionStorage.getItem('role')\n    };\n    setAuth(authorizationData);\n    getTypes(); // eslint-disable-next-line\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    children: /*#__PURE__*/_jsxDEV(AppBar, {\n      position: \"static\",\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.title,\n          variant: \"h6\",\n          color: \"inherit\",\n          noWrap: true,\n          children: \"OnlineStore\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), isAuth && auth.role === 'ADMIN' && /*#__PURE__*/_jsxDEV(Button, {\n          color: \"inherit\",\n          onClick: () => {\n            history.push('/addDevicesContainer');\n          },\n          children: \"\\u0410\\u0434\\u043C\\u0438\\u043D \\u043F\\u0430\\u043D\\u0435\\u043B\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), isAuth ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(IconButton, {\n            color: \"inherit\",\n            children: /*#__PURE__*/_jsxDEV(Badge, {\n              badgeContent: 0,\n              color: \"secondary\",\n              children: /*#__PURE__*/_jsxDEV(ShoppingCart, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Logout, {\n            setLogout: setLogout\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n          color: \"inherit\",\n          onClick: () => history.push('/login'),\n          children: \"\\u0412\\u043E\\u0439\\u0442\\u0438\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Header, \"a770Wo9grBp66oG4IhbrG9riUrM=\", false, function () {\n  return [useHistory, useStyles];\n});\n\n_c = Header;\n\nconst mapStateToProps = state => {\n  return {\n    isAuth: state.auth.isAuth,\n    //  маркер авторизации\n    auth: state.auth.auth //авторизация для role\n\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setAuth,\n  setLogout,\n  setIsAuth\n})(Header);\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/components/Header.tsx"],"names":["React","useEffect","makeStyles","Grid","AppBar","Toolbar","IconButton","Typography","Badge","Button","ShoppingCart","Logout","setAuth","setIsAuth","setLogout","getTypes","useHistory","connect","useStyles","theme","title","flexGrow","login","typography","button","Header","auth","isAuth","history","classes","sessionStorage","getItem","authorizationData","token","email","role","push","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Button from '@material-ui/core/Button';\r\nimport ShoppingCart from '@material-ui/icons/ShoppingCart';\r\nimport Logout from './Logout';\r\nimport {\r\n  setAuth, //записть авторизации в стор\r\n  setIsAuth, // маркер авторизации\r\n  setLogout, // выход из авторизации\r\n  AuthReducerType, //типизация авторизации\r\n  SetAuthActionType, // типизация экшена авторизации\r\n  SetLogoutActionType, // типизация экшена выхода из авторизации\r\n  SetIsAuthActionType, // типизация экшена маркера типизации\r\n} from '../store/reducer/authReducer';\r\nimport { getTypes } from '../action/deviceAction'; //запрос на получениe типов устройств\r\nimport { RootStateType } from '../store/store';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\n//типизация--------------------------------\r\ntype MapStateToPropsType = { isAuth: boolean; auth: AuthReducerType };\r\ntype MapDispathPropsType = {\r\n  setAuth: (value: AuthReducerType) => SetAuthActionType;\r\n  setIsAuth: (value: boolean) => SetIsAuthActionType;\r\n  setLogout: () => SetLogoutActionType;\r\n};\r\ntype PropsType = MapDispathPropsType & MapStateToPropsType;\r\n//-----------------------------------------\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  login: {\r\n    ...theme.typography.button,\r\n  },\r\n}));\r\n\r\nconst Header: React.FC<PropsType> = ({\r\n  auth,\r\n  isAuth,\r\n  setAuth,\r\n  setLogout,\r\n  setIsAuth,\r\n}) => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  useEffect(() => {\r\n    setIsAuth(!!sessionStorage.getItem('token')); //берём токен из sessionStorage и приводим его к булевому значению\r\n\r\n    const authorizationData: AuthReducerType = {\r\n      //берём данные из sessionStorage и записываем в стор\r\n      token: sessionStorage.getItem('token'),\r\n      email: sessionStorage.getItem('email'),\r\n      role: sessionStorage.getItem('role'),\r\n    };\r\n    setAuth(authorizationData);\r\n    getTypes();\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <Grid item>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography\r\n            className={classes.title}\r\n            variant=\"h6\"\r\n            color=\"inherit\"\r\n            noWrap\r\n          >\r\n            OnlineStore\r\n          </Typography>\r\n          {isAuth && auth.role === 'ADMIN' && (\r\n            <Button\r\n              color=\"inherit\"\r\n              onClick={() => {\r\n                history.push('/addDevicesContainer');\r\n              }}\r\n            >\r\n              Админ панель\r\n            </Button>\r\n          )}\r\n          {isAuth ? (\r\n            <>\r\n              <IconButton color=\"inherit\">\r\n                <Badge badgeContent={0} color=\"secondary\">\r\n                  <ShoppingCart />\r\n                </Badge>\r\n              </IconButton>\r\n              <Logout setLogout={setLogout} />\r\n            </>\r\n          ) : (\r\n            <Button color=\"inherit\" onClick={() => history.push('/login')}>\r\n              Войти\r\n            </Button>\r\n          )}\r\n        </Toolbar>\r\n      </AppBar>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n  return {\r\n    isAuth: state.auth.isAuth, //  маркер авторизации\r\n    auth: state.auth.auth, //авторизация для role\r\n  };\r\n};\r\nexport default connect<\r\n  MapStateToPropsType,\r\n  MapDispathPropsType,\r\n  unknown, // личные пропсы\r\n  RootStateType\r\n>(mapStateToProps, { setAuth, setLogout, setIsAuth })(Header);\r\n"]},"metadata":{},"sourceType":"module"}