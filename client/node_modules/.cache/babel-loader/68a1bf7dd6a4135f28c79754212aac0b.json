{"ast":null,"code":"const SET_AUTH = 'SET_AUTH';\nconst SET_LOADING = 'SET_LOADING';\nconst SET_ERROR_MESSAGE = 'SET_ERROR_MESSAGE'; // типизация--------------------------------\n// типизация стейта\n\n//-------------------------------------------\nconst initialState = {\n  auth: {\n    email: null,\n    token: null\n  },\n  //авторизация\n  loading: false,\n  //крутилка\n  errorMessage: null,\n  // ошибка авторизации\n  isAuth: false // булевое значение для аторизации\n\n};\nexport const authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_AUTH:\n      return { ...state,\n        auth: action.payload,\n        isAuth: true,\n        errorMessage: null\n      };\n\n    case SET_LOADING:\n      return { ...state,\n        loading: true\n      };\n\n    case SET_ERROR_MESSAGE:\n      return { ...state,\n        errorMessage: action.payload\n      };\n\n    default:\n      return state;\n  }\n}; //запись авторизация\n\nexport const setAuth = value => ({\n  type: SET_AUTH,\n  payload: value\n}); // крутилка(для ожидания загрузки)\n\nexport const setLoading = () => ({\n  type: SET_LOADING\n}); // данные об ошибки\n\nexport const setErrorMessage = data => ({\n  type: SET_ERROR_MESSAGE,\n  payload: data\n});","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/store/reducer/authReducer.ts"],"names":["SET_AUTH","SET_LOADING","SET_ERROR_MESSAGE","initialState","auth","email","token","loading","errorMessage","isAuth","authReducer","state","action","type","payload","setAuth","value","setLoading","setErrorMessage","data"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,UAAjB;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,iBAAiB,GAAG,mBAA1B,C,CAEA;AACA;;AAgCA;AAEA,MAAMC,YAA8B,GAAG;AACrCC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAD+B;AACD;AAEpCC,EAAAA,OAAO,EAAE,KAH4B;AAGrB;AAChBC,EAAAA,YAAY,EAAE,IAJuB;AAIjB;AACpBC,EAAAA,MAAM,EAAE,KAL6B,CAKtB;;AALsB,CAAvC;AAQA,OAAO,MAAMC,WAAW,GAAG,CACzBC,KAAK,GAAGR,YADiB,EAEzBS,MAFyB,KAGJ;AACrB,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKb,QAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELP,QAAAA,IAAI,EAAEQ,MAAM,CAACE,OAFR;AAGLL,QAAAA,MAAM,EAAE,IAHH;AAILD,QAAAA,YAAY,EAAE;AAJT,OAAP;;AAMF,SAAKP,WAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELJ,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF,SAAKL,iBAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELH,QAAAA,YAAY,EAAEI,MAAM,CAACE;AAFhB,OAAP;;AAKF;AACE,aAAOH,KAAP;AApBJ;AAsBD,CA1BM,C,CA4BP;;AACA,OAAO,MAAMI,OAAO,GAAIC,KAAD,KAAyC;AAC9DH,EAAAA,IAAI,EAAEb,QADwD;AAE9Dc,EAAAA,OAAO,EAAEE;AAFqD,CAAzC,CAAhB,C,CAIP;;AACA,OAAO,MAAMC,UAAU,GAAG,OAA6B;AACrDJ,EAAAA,IAAI,EAAEZ;AAD+C,CAA7B,CAAnB,C,CAGP;;AACA,OAAO,MAAMiB,eAAe,GAAIC,IAAD,KAA8C;AAC3EN,EAAAA,IAAI,EAAEX,iBADqE;AAE3EY,EAAAA,OAAO,EAAEK;AAFkE,CAA9C,CAAxB","sourcesContent":["const SET_AUTH = 'SET_AUTH';\r\nconst SET_LOADING = 'SET_LOADING';\r\nconst SET_ERROR_MESSAGE = 'SET_ERROR_MESSAGE';\r\n\r\n// типизация--------------------------------\r\n// типизация стейта\r\nexport type AuthType = {\r\n  email: string | null;\r\n  token: string | null;\r\n};\r\n\r\nexport type InitialStateType = {\r\n  auth: AuthType;\r\n  isAuth: boolean;\r\n  loading: boolean;\r\n  errorMessage: string | null;\r\n};\r\n\r\n// типизация экшена\r\nexport type SetAuthActionType = {\r\n  type: typeof SET_AUTH;\r\n  payload: AuthType;\r\n};\r\n\r\nexport type SetLoadingActionType = {\r\n  type: typeof SET_LOADING;\r\n};\r\nexport type SetErrorMessageActionType = {\r\n  type: typeof SET_ERROR_MESSAGE;\r\n  payload: string;\r\n};\r\n\r\nexport type SetActionType =\r\n  | SetAuthActionType\r\n  | SetLoadingActionType\r\n  | SetErrorMessageActionType;\r\n\r\n//-------------------------------------------\r\n\r\nconst initialState: InitialStateType = {\r\n  auth: { email: null, token: null }, //авторизация\r\n\r\n  loading: false, //крутилка\r\n  errorMessage: null, // ошибка авторизации\r\n  isAuth: false, // булевое значение для аторизации\r\n};\r\n\r\nexport const authReducer = (\r\n  state = initialState,\r\n  action: SetActionType\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case SET_AUTH:\r\n      return {\r\n        ...state,\r\n        auth: action.payload,\r\n        isAuth: true,\r\n        errorMessage: null,\r\n      };\r\n    case SET_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case SET_ERROR_MESSAGE:\r\n      return {\r\n        ...state,\r\n        errorMessage: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//запись авторизация\r\nexport const setAuth = (value: AuthType): SetAuthActionType => ({\r\n  type: SET_AUTH,\r\n  payload: value,\r\n});\r\n// крутилка(для ожидания загрузки)\r\nexport const setLoading = (): SetLoadingActionType => ({\r\n  type: SET_LOADING,\r\n});\r\n// данные об ошибки\r\nexport const setErrorMessage = (data: string): SetErrorMessageActionType => ({\r\n  type: SET_ERROR_MESSAGE,\r\n  payload: data,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}