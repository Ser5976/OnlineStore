{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\components\\\\DeviceData.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport { MenuItem } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport ArrowForwardSharpIcon from '@material-ui/icons/ArrowForwardSharp';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//схема валидации---------------------\nconst schema = yup.object().shape({\n  typeId: yup.string().required('Пожалуйста, выберите тип'),\n  brandId: yup.string().required('Пожалуйста, выберите брэнд'),\n  name: yup.string().required('Поле обязательное для заполнения'),\n  price: yup.string().required('Поле обязательное для заполнения')\n}); //-----------------------------------------\n// типизация пропсов\n\n//--------------------------------------------\nconst useStyles = makeStyles(theme => ({\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(1)\n  },\n  button: {\n    margin: '15px 15x'\n  },\n  buttons: {\n    display: 'flex',\n    justifyContent: 'flex-end'\n  }\n}));\n\nconst DeviceData = ({\n  types,\n  //типы устройств\n  brands,\n  // брэнды\n  addedDevice,\n  //добавленное устройство\n  setAddedDevice,\n  //запись добавленного устройства в стейт\n  handleNext,\n  // вперёд на следующий степ\n  handleOpenType,\n  //открытие модального окна типа\n  handleOpenBrand //открытие модального окна брэнда\n\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    handleSubmit,\n    control,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(schema),\n    mode: 'onBlur'\n  }); // получаем данных из формы,создаём копию объекта добавленного устройства,изменяем данные, которые получем из формы, и записываем в стейт\n\n  const onSubmit = data => {\n    //console.log('Отправлено:', data);\n    const copyAddedDevice = { ...addedDevice,\n      name: data.name,\n      price: data.price,\n      typeId: data.typeId,\n      brandId: data.brandId\n    };\n    setAddedDevice(copyAddedDevice);\n    handleNext();\n  }; // console.log('Ошибка:', errors);\n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    noValidate: true,\n    className: classes.form,\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      component: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        component: \"main\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          style: {\n            padding: '5px 5px'\n          },\n          children: /*#__PURE__*/_jsxDEV(Controller, {\n            name: \"typeId\",\n            control: control,\n            defaultValue: addedDevice.typeId,\n            render: ({\n              field\n            }) => {\n              var _errors$typeId;\n\n              return /*#__PURE__*/_jsxDEV(TextField, { ...field,\n                //  variant=\"outlined\"\n                margin: \"normal\",\n                fullWidth: true,\n                label: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0442\\u0438\\u043F\",\n                InputProps: {\n                  startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                    position: \"start\",\n                    children: /*#__PURE__*/_jsxDEV(IconButton, {\n                      onClick: handleOpenType,\n                      children: /*#__PURE__*/_jsxDEV(AddCircleOutlineIcon, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 108,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 107,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 106,\n                    columnNumber: 23\n                  }, this)\n                },\n                error: !!errors.typeId,\n                select: true,\n                helperText: errors.typeId ? (_errors$typeId = errors.typeId) === null || _errors$typeId === void 0 ? void 0 : _errors$typeId.message : null,\n                children: types.map((item, index) => {\n                  return /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: item._id,\n                    children: item.name\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 119,\n                    columnNumber: 23\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 17\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          style: {\n            padding: '5px 5px'\n          },\n          children: /*#__PURE__*/_jsxDEV(Controller, {\n            name: \"brandId\",\n            control: control,\n            defaultValue: addedDevice.brandId,\n            render: ({\n              field\n            }) => {\n              var _errors$brandId;\n\n              return /*#__PURE__*/_jsxDEV(TextField, { ...field,\n                // variant=\"outlined\"\n                margin: \"normal\",\n                required: true,\n                fullWidth: true,\n                label: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0431\\u0440\\u044D\\u043D\\u0434\",\n                InputProps: {\n                  startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                    position: \"start\",\n                    children: /*#__PURE__*/_jsxDEV(IconButton, {\n                      onClick: handleOpenBrand,\n                      children: /*#__PURE__*/_jsxDEV(AddCircleOutlineIcon, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 146,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 145,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 144,\n                    columnNumber: 23\n                  }, this)\n                },\n                error: !!errors.brandId,\n                select: true,\n                helperText: errors.brandId ? (_errors$brandId = errors.brandId) === null || _errors$brandId === void 0 ? void 0 : _errors$brandId.message : null,\n                children: brands.map((item, index) => {\n                  return /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: item._id,\n                    children: item.name\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 157,\n                    columnNumber: 23\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 17\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"name\",\n        control: control,\n        defaultValue: addedDevice.name,\n        render: ({\n          field\n        }) => {\n          var _errors$name;\n\n          return /*#__PURE__*/_jsxDEV(TextField, { ...field,\n            // variant=\"outlined\"\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            label: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0443\\u0441\\u0442\\u0440\\u043E\\u0439\\u0441\\u0442\\u0432\\u0430\",\n            error: !!errors.name,\n            helperText: errors.name ? (_errors$name = errors.name) === null || _errors$name === void 0 ? void 0 : _errors$name.message : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"price\",\n        control: control,\n        defaultValue: addedDevice.price,\n        render: ({\n          field\n        }) => {\n          var _errors$price;\n\n          return /*#__PURE__*/_jsxDEV(TextField, { ...field,\n            //variant=\"outlined\"\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            label: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0441\\u0442\\u043E\\u0438\\u043C\\u043E\\u0441\\u0442\\u044C \\u0443\\u0441\\u0442\\u0440\\u043E\\u0439\\u0441\\u0442\\u0432\\u0430\",\n            error: !!errors.price,\n            helperText: errors.price ? (_errors$price = errors.price) === null || _errors$price === void 0 ? void 0 : _errors$price.message : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.buttons,\n      children: /*#__PURE__*/_jsxDEV(IconButton, {\n        type: \"submit\",\n        style: {\n          color: '#3f51b5'\n        },\n        children: /*#__PURE__*/_jsxDEV(ArrowForwardSharpIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DeviceData, \"oq2ykN0sRHtlaTwkxo2o+HBEj+Q=\", false, function () {\n  return [useStyles, useForm];\n});\n\n_c = DeviceData;\nexport default DeviceData;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeviceData\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/components/DeviceData.tsx"],"names":["React","useForm","Controller","yupResolver","yup","InputAdornment","TextField","MenuItem","IconButton","AddCircleOutlineIcon","ArrowForwardSharpIcon","Grid","makeStyles","schema","object","shape","typeId","string","required","brandId","name","price","useStyles","theme","form","width","marginTop","spacing","button","margin","buttons","display","justifyContent","DeviceData","types","brands","addedDevice","setAddedDevice","handleNext","handleOpenType","handleOpenBrand","classes","handleSubmit","control","formState","errors","resolver","mode","onSubmit","data","copyAddedDevice","padding","field","startAdornment","message","map","item","index","_id","color"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useForm, SubmitHandler, Controller } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { MenuItem } from '@material-ui/core';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport ArrowForwardSharpIcon from '@material-ui/icons/ArrowForwardSharp';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  TypeDeviceType, //типизация типов\r\n  BrandType, //типизация брэндов\r\n  addedDeviceType, //типизация добавленного устройства\r\n  setAddedDeviceActionType, //типизация экшена\r\n} from '../store/reducer/deviceReducer';\r\n\r\n//схема валидации---------------------\r\nconst schema = yup.object().shape({\r\n  typeId: yup.string().required('Пожалуйста, выберите тип'),\r\n  brandId: yup.string().required('Пожалуйста, выберите брэнд'),\r\n  name: yup.string().required('Поле обязательное для заполнения'),\r\n  price: yup.string().required('Поле обязательное для заполнения'),\r\n});\r\n//-----------------------------------------\r\n// типизация пропсов\r\ntype PropsType = {\r\n  types: TypeDeviceType[];\r\n  brands: BrandType[];\r\n  addedDevice: addedDeviceType;\r\n  setAddedDevice: (data: addedDeviceType) => setAddedDeviceActionType;\r\n  handleNext: () => void;\r\n  handleOpenType: () => void;\r\n  handleOpenBrand: () => void;\r\n};\r\n//--------------------------------------------\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  form: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  button: {\r\n    margin: '15px 15x',\r\n  },\r\n  buttons: {\r\n    display: 'flex',\r\n    justifyContent: 'flex-end',\r\n  },\r\n}));\r\n\r\nconst DeviceData: React.FC<PropsType> = ({\r\n  types, //типы устройств\r\n  brands, // брэнды\r\n  addedDevice, //добавленное устройство\r\n  setAddedDevice, //запись добавленного устройства в стейт\r\n  handleNext, // вперёд на следующий степ\r\n  handleOpenType, //открытие модального окна типа\r\n  handleOpenBrand, //открытие модального окна брэнда\r\n}) => {\r\n  const classes = useStyles();\r\n  const {\r\n    handleSubmit,\r\n    control,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n    mode: 'onBlur',\r\n  });\r\n  // получаем данных из формы,создаём копию объекта добавленного устройства,изменяем данные, которые получем из формы, и записываем в стейт\r\n  const onSubmit: SubmitHandler<addedDeviceType> = (\r\n    data: addedDeviceType\r\n  ): void => {\r\n    //console.log('Отправлено:', data);\r\n    const copyAddedDevice: addedDeviceType = {\r\n      ...addedDevice,\r\n      name: data.name,\r\n      price: data.price,\r\n      typeId: data.typeId,\r\n      brandId: data.brandId,\r\n    };\r\n    setAddedDevice(copyAddedDevice);\r\n    handleNext();\r\n  };\r\n  // console.log('Ошибка:', errors);\r\n  return (\r\n    <form noValidate className={classes.form} onSubmit={handleSubmit(onSubmit)}>\r\n      <Grid container component=\"main\">\r\n        <Grid container component=\"main\">\r\n          <Grid item xs={12} sm={6} style={{ padding: '5px 5px' }}>\r\n            <Controller\r\n              name=\"typeId\"\r\n              control={control}\r\n              defaultValue={addedDevice.typeId}\r\n              render={({ field }) => (\r\n                <TextField\r\n                  {...field}\r\n                  //  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  fullWidth\r\n                  label=\"Выберите тип\"\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <IconButton onClick={handleOpenType}>\r\n                          <AddCircleOutlineIcon />\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  error={!!errors.typeId}\r\n                  select\r\n                  helperText={errors.typeId ? errors.typeId?.message : null}\r\n                >\r\n                  {types.map((item, index) => {\r\n                    return (\r\n                      <MenuItem value={item._id} key={index}>\r\n                        {item.name}\r\n                      </MenuItem>\r\n                    );\r\n                  })}\r\n                </TextField>\r\n              )}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={6} style={{ padding: '5px 5px' }}>\r\n            <Controller\r\n              name=\"brandId\"\r\n              control={control}\r\n              defaultValue={addedDevice.brandId}\r\n              render={({ field }) => (\r\n                <TextField\r\n                  {...field}\r\n                  // variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  label=\"Выберите брэнд\"\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <IconButton onClick={handleOpenBrand}>\r\n                          <AddCircleOutlineIcon />\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  error={!!errors.brandId}\r\n                  select\r\n                  helperText={errors.brandId ? errors.brandId?.message : null}\r\n                >\r\n                  {brands.map((item, index) => {\r\n                    return (\r\n                      <MenuItem value={item._id} key={index}>\r\n                        {item.name}\r\n                      </MenuItem>\r\n                    );\r\n                  })}\r\n                </TextField>\r\n              )}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Controller\r\n          name=\"name\"\r\n          control={control}\r\n          defaultValue={addedDevice.name}\r\n          render={({ field }) => (\r\n            <TextField\r\n              {...field}\r\n              // variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              label=\"Введите название устройства\"\r\n              error={!!errors.name}\r\n              helperText={errors.name ? errors.name?.message : null}\r\n            />\r\n          )}\r\n        />\r\n        <Controller\r\n          name=\"price\"\r\n          control={control}\r\n          defaultValue={addedDevice.price}\r\n          render={({ field }) => (\r\n            <TextField\r\n              {...field}\r\n              //variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              label=\"Введите стоимость устройства\"\r\n              error={!!errors.price}\r\n              helperText={errors.price ? errors.price?.message : null}\r\n            />\r\n          )}\r\n        />\r\n      </Grid>\r\n      <div className={classes.buttons}>\r\n        <IconButton type=\"submit\" style={{ color: '#3f51b5' }}>\r\n          <ArrowForwardSharpIcon />\r\n        </IconButton>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nexport default DeviceData;\r\n"]},"metadata":{},"sourceType":"module"}