{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\pages\\\\ProfileType.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { Box, Container } from '@material-ui/core';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport { useLocation, useHistory, useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport Pagination from '@material-ui/lab/Pagination';\nimport PaginationItem from '@material-ui/lab/PaginationItem';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { ROOT_URL } from '../constants/url';\nimport ActiveLastBreadcrumb from '../components/ActiveLastBreadcrumb';\n//типизиция всего стора\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport { setTypeId, //запись выбранного типа устройства\nsetBrandId //типизация данных\n} from '../store/reducer/deviceReducer';\nimport { getDevices, //запрос на получение устройств\ngetSelectedType //запрос на получение выбранного типа устройства\n} from '../action/deviceAction';\nimport { connect } from 'react-redux'; //типизация--------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n//-----------------------------------------\nconst useStyles = makeStyles(theme => createStyles({\n  breadcrumb: {\n    marginTop: 15\n  },\n  pagination: {\n    '& > *': {\n      marginTop: theme.spacing(7)\n    },\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginBottom: theme.spacing(7)\n  },\n  textTitle: {\n    margin: '25px',\n    cursor: 'pointer'\n  },\n\n  /* root: {\r\n    maxWidth: 'auto',\r\n  },\r\n  media: {\r\n    height: 200,\r\n    width: 'auto',\r\n    padding: 15,\r\n    cursor: 'pointer',\r\n  },\r\n  cardActions: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n  }, */\n  root: {\n    maxWidth: 'auto',\n    '&:hover': {\n      boxShadow: '0 3px 10px rgb(0 0 0/0.2)'\n    }\n  },\n  media: {\n    height: 150,\n    padding: 15,\n    cursor: 'pointer'\n  }\n}));\n\nconst ProfileType = ({\n  getDevices,\n  getSelectedType,\n  setTypeId,\n  setBrandId,\n  devices,\n  selectedType,\n  pageQty,\n  limit,\n  typeId,\n  brandId,\n  isLoadinDevice,\n  isFetchErrorDevice,\n  isLoadinTypes,\n  isFetchErrorTypes\n}) => {\n  _s();\n\n  var _location$search;\n\n  const classes = useStyles();\n  const {\n    id\n  } = useParams(); //  хук роутера ,который помогает получить значение params(это выбранный typeId)\n\n  const history = useHistory(); //для изменения строки запроса\n\n  const location = useLocation(); // для получения строки запроса\n\n  const searchPage = parseInt(((_location$search = location.search) === null || _location$search === void 0 ? void 0 : _location$search.split('=')[1]) || '1'); // получаем число страницы из строки запроса\n  //console.log(search);\n  // пагинация, данные о текущей странице( по умолчанию: 1 или, если есть ,информация о текущей странице в адресной строке )\n\n  const [page, setPage] = useState(searchPage); // изменения текущей страницы\n\n  const handleChange = (event, value) => {\n    setPage(value);\n  }; // запрос на сервак для получения устройств(фильтруем устройства по типу и бренду,а также пагинация)\n\n\n  useEffect(() => {\n    setPage(searchPage); //костыль,чтобы синхронизировать пагинацию и строку запроса\n\n    getDevices(typeId, brandId, limit, page, setPage, history); // eslint-disable-next-line\n  }, [typeId, brandId, page]); // запрос на сервак для получения выбранного типа с брэндами\n\n  useEffect(() => {\n    getSelectedType(id);\n    setTypeId(id);\n    setBrandId(null);\n    console.log('id:', id); // eslint-disable-next-line\n  }, [id]); //удаление выбранного брэнда\n\n  const removeBrand = () => {\n    setBrandId(null);\n  }; //console.log(selectedType);\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        className: classes.breadcrumb,\n        children: /*#__PURE__*/_jsxDEV(ActiveLastBreadcrumb, {\n          name: selectedType.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        align: \"center\",\n        className: classes.textTitle,\n        onClick: removeBrand,\n        children: selectedType.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 7,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 3,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            children: \"\\u041F\\u0440\\u043E\\u0438\\u0437\\u0432\\u043E\\u0434\\u0438\\u0442\\u0435\\u043B\\u0438\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(List, {\n            component: \"nav\",\n            children: selectedType.brands && selectedType.brands.map(brand => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(ListItem, {\n                  button: true,\n                  onClick: () => setBrandId(brand._id),\n                  children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                    primary: brand.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 194,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 193,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 23\n                }, this)]\n              }, brand._id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          container: true,\n          xs: 12,\n          spacing: 2,\n          sm: 9,\n          children: isFetchErrorDevice ? /*#__PURE__*/_jsxDEV(Typography, {\n            align: \"center\",\n            color: \"error\",\n            style: {\n              marginTop: '25px'\n            },\n            children: \"\\u0427\\u0442\\u043E-\\u0442\\u043E \\u043F\\u043E\\u0448\\u043B\\u043E \\u043D\\u0435 \\u0442\\u0430\\u043A!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }, this) : isLoadinDevice ? /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            style: {\n              height: window.innerHeight - 65.6\n            },\n            children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }, this) : devices.length === 0 ? /*#__PURE__*/_jsxDEV(Typography, {\n            align: \"center\",\n            className: classes.textTitle,\n            children: \"\\u041F\\u043E\\u043A\\u0430 \\u0442\\u043E\\u0432\\u0430\\u0440\\u043E\\u0432 \\u043D\\u0435\\u0442!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: devices && devices.map(item => {\n              return /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 4,\n                children: /*#__PURE__*/_jsxDEV(Card, {\n                  elevation: 0,\n                  className: classes.root,\n                  children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n                    children: /*#__PURE__*/_jsxDEV(\"img\", {\n                      src: `${ROOT_URL}/${item.picture[0]}`,\n                      style: {\n                        height: '150px',\n                        width: 'auto'\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 234,\n                      columnNumber: 31\n                    }, this),\n                    className: classes.media,\n                    title: item.name,\n                    onClick: () => {\n                      history.push(`/profileDevice/${item._id}`);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 232,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(CardHeader, {\n                    title: `${item.price} p`,\n                    subheader: item.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 245,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 231,\n                  columnNumber: 25\n                }, this)\n              }, item._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 23\n              }, this);\n            })\n          }, void 0, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), !!pageQty && /*#__PURE__*/_jsxDEV(Pagination, {\n        className: classes.pagination,\n        count: pageQty,\n        page: page,\n        showFirstButton: true,\n        showLastButton: true,\n        onChange: handleChange // интегрируем роутер\n        ,\n        renderItem: item => /*#__PURE__*/_jsxDEV(PaginationItem, {\n          component: Link,\n          to: `/profileType/${id}?page=${item.page}`,\n          ...item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ProfileType, \"TtDKfFQSkHglIdD9Mg2tG+mP3NI=\", false, function () {\n  return [useStyles, useParams, useHistory, useLocation];\n});\n\n_c = ProfileType;\n\nconst mapStateToProps = state => {\n  return {\n    devices: state.devices.devices,\n    //устройства\n    selectedType: state.devices.selectedType,\n    //выбранный тип устройства\n    pageQty: state.devices.pageQty,\n    //количества страниц\n    limit: state.devices.limit,\n    //сколько устройств на странице\n    typeId: state.devices.typeId,\n    // айдишник типа\n    brandId: state.devices.brandId,\n    // айдишник брэнда\n    isLoadinDevice: state.devices.isLoadinDevice,\n    //крутилка у стройств\n    isLoadinTypes: state.devices.isLoadinTypes,\n    //крутилка типов\n    isFetchErrorDevice: state.devices.isFetchErrorDevice,\n    //ошибка устройств\n    isFetchErrorTypes: state.devices.isFetchErrorTypes //ошибка типов\n\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getDevices,\n  getSelectedType,\n  setTypeId,\n  setBrandId\n})(ProfileType);\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileType\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/pages/ProfileType.tsx"],"names":["React","useEffect","useState","Grid","Typography","Box","Container","List","ListItem","ListItemText","Divider","makeStyles","createStyles","useLocation","useHistory","useParams","Link","Pagination","PaginationItem","CircularProgress","ROOT_URL","ActiveLastBreadcrumb","Card","CardHeader","CardMedia","setTypeId","setBrandId","getDevices","getSelectedType","connect","useStyles","theme","breadcrumb","marginTop","pagination","spacing","display","flexDirection","justifyContent","marginBottom","textTitle","margin","cursor","root","maxWidth","boxShadow","media","height","padding","ProfileType","devices","selectedType","pageQty","limit","typeId","brandId","isLoadinDevice","isFetchErrorDevice","isLoadinTypes","isFetchErrorTypes","classes","id","history","location","searchPage","parseInt","search","split","page","setPage","handleChange","event","value","console","log","removeBrand","name","brands","map","brand","_id","window","innerHeight","length","item","picture","width","push","price","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Box, Container } from '@material-ui/core';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\nimport { useLocation, useHistory, useParams } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport PaginationItem from '@material-ui/lab/PaginationItem';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { ROOT_URL } from '../constants/url';\r\nimport ActiveLastBreadcrumb from '../components/ActiveLastBreadcrumb';\r\nimport { RootStateType } from '../store/store'; //типизиция всего стора\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\n\r\nimport {\r\n  setTypeId, //запись выбранного типа устройства\r\n  setBrandId, //запись выбранного  брэнда устройства\r\n  setTypeIdActionType, // типизация экшенов\r\n  setBrandIdActionType,\r\n  DeviceType,\r\n  TypeDeviceType,\r\n  BrandType, //типизация данных\r\n} from '../store/reducer/deviceReducer';\r\nimport {\r\n  getDevices, //запрос на получение устройств\r\n  getSelectedType, //запрос на получение выбранного типа устройства\r\n} from '../action/deviceAction';\r\nimport { connect } from 'react-redux';\r\n\r\n//типизация--------------------------------\r\ntype MapStateToPropsType = {\r\n  devices: DeviceType[];\r\n  selectedType: TypeDeviceType;\r\n  pageQty: number;\r\n  limit: number;\r\n  typeId: string | null;\r\n  brandId: string | null;\r\n  isLoadinDevice: boolean;\r\n  isFetchErrorDevice: boolean;\r\n  isLoadinTypes: boolean;\r\n  isFetchErrorTypes: boolean;\r\n};\r\ntype MapDispathPropsType = {\r\n  getDevices: (\r\n    typeId: string | null,\r\n    brandId: string | null,\r\n    limit: number,\r\n    page: number,\r\n    setPage: React.Dispatch<React.SetStateAction<number>>,\r\n    history: any\r\n  ) => void;\r\n  getSelectedType: (id: string) => void;\r\n  setTypeId: (data: string | null) => setTypeIdActionType;\r\n  setBrandId: (data: string | null) => setBrandIdActionType;\r\n};\r\n\r\ntype PropsType = MapDispathPropsType & MapStateToPropsType;\r\ntype ParamsType = {\r\n  id: string;\r\n};\r\n//-----------------------------------------\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    breadcrumb: {\r\n      marginTop: 15,\r\n    },\r\n    pagination: {\r\n      '& > *': {\r\n        marginTop: theme.spacing(7),\r\n      },\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      justifyContent: 'center',\r\n      marginBottom: theme.spacing(7),\r\n    },\r\n\r\n    textTitle: {\r\n      margin: '25px',\r\n      cursor: 'pointer',\r\n    },\r\n\r\n    /* root: {\r\n      maxWidth: 'auto',\r\n    },\r\n    media: {\r\n      height: 200,\r\n      width: 'auto',\r\n      padding: 15,\r\n      cursor: 'pointer',\r\n    },\r\n    cardActions: {\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n    }, */\r\n\r\n    root: {\r\n      maxWidth: 'auto',\r\n      '&:hover': {\r\n        boxShadow: '0 3px 10px rgb(0 0 0/0.2)',\r\n      },\r\n    },\r\n\r\n    media: {\r\n      height: 150,\r\n\r\n      padding: 15,\r\n      cursor: 'pointer',\r\n    },\r\n  })\r\n);\r\n\r\nconst ProfileType: React.FC<PropsType> = ({\r\n  getDevices,\r\n  getSelectedType,\r\n  setTypeId,\r\n  setBrandId,\r\n  devices,\r\n  selectedType,\r\n  pageQty,\r\n  limit,\r\n  typeId,\r\n  brandId,\r\n  isLoadinDevice,\r\n  isFetchErrorDevice,\r\n  isLoadinTypes,\r\n  isFetchErrorTypes,\r\n}) => {\r\n  const classes = useStyles();\r\n  const { id } = useParams<ParamsType>(); //  хук роутера ,который помогает получить значение params(это выбранный typeId)\r\n  const history = useHistory(); //для изменения строки запроса\r\n  const location = useLocation(); // для получения строки запроса\r\n  const searchPage = parseInt(location.search?.split('=')[1] || '1'); // получаем число страницы из строки запроса\r\n\r\n  //console.log(search);\r\n  // пагинация, данные о текущей странице( по умолчанию: 1 или, если есть ,информация о текущей странице в адресной строке )\r\n  const [page, setPage] = useState(searchPage);\r\n  // изменения текущей страницы\r\n  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n    setPage(value);\r\n  };\r\n  // запрос на сервак для получения устройств(фильтруем устройства по типу и бренду,а также пагинация)\r\n  useEffect(() => {\r\n    setPage(searchPage); //костыль,чтобы синхронизировать пагинацию и строку запроса\r\n    getDevices(typeId, brandId, limit, page, setPage, history);\r\n    // eslint-disable-next-line\r\n  }, [typeId, brandId, page]);\r\n  // запрос на сервак для получения выбранного типа с брэндами\r\n  useEffect(() => {\r\n    getSelectedType(id);\r\n    setTypeId(id);\r\n    setBrandId(null);\r\n    console.log('id:', id);\r\n    // eslint-disable-next-line\r\n  }, [id]);\r\n  //удаление выбранного брэнда\r\n  const removeBrand = () => {\r\n    setBrandId(null);\r\n  };\r\n\r\n  //console.log(selectedType);\r\n\r\n  return (\r\n    <>\r\n      <Container maxWidth=\"lg\">\r\n        <Box className={classes.breadcrumb}>\r\n          <ActiveLastBreadcrumb name={selectedType.name} />\r\n        </Box>\r\n      </Container>\r\n      <Container maxWidth=\"lg\">\r\n        <Typography\r\n          variant=\"h3\"\r\n          align=\"center\"\r\n          className={classes.textTitle}\r\n          onClick={removeBrand}\r\n        >\r\n          {selectedType.name}\r\n        </Typography>\r\n        <Grid container spacing={7}>\r\n          <Grid item xs={12} sm={3}>\r\n            <Typography variant=\"h5\">Производители</Typography>\r\n            <List component=\"nav\">\r\n              {selectedType.brands &&\r\n                selectedType.brands.map((brand) => {\r\n                  return (\r\n                    <div key={brand._id}>\r\n                      <ListItem button onClick={() => setBrandId(brand._id)}>\r\n                        <ListItemText primary={brand.name} />\r\n                      </ListItem>\r\n                      <Divider />\r\n                    </div>\r\n                  );\r\n                })}\r\n            </List>\r\n          </Grid>\r\n\r\n          <Grid item container xs={12} spacing={2} sm={9}>\r\n            {isFetchErrorDevice ? (\r\n              <Typography\r\n                align=\"center\"\r\n                color=\"error\"\r\n                style={{ marginTop: '25px' }}\r\n              >\r\n                Что-то пошло не так!\r\n              </Typography>\r\n            ) : isLoadinDevice ? (\r\n              <Box\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                style={{ height: window.innerHeight - 65.6 }}\r\n              >\r\n                <CircularProgress />\r\n              </Box>\r\n            ) : devices.length === 0 ? (\r\n              <Typography align=\"center\" className={classes.textTitle}>\r\n                Пока товаров нет!\r\n              </Typography>\r\n            ) : (\r\n              <>\r\n                {devices &&\r\n                  devices.map((item) => {\r\n                    return (\r\n                      <Grid item xs={12} sm={4} key={item._id}>\r\n                        <Card elevation={0} className={classes.root}>\r\n                          <CardMedia\r\n                            children={\r\n                              <img\r\n                                src={`${ROOT_URL}/${item.picture[0]}`}\r\n                                style={{ height: '150px', width: 'auto' }}\r\n                              />\r\n                            }\r\n                            className={classes.media}\r\n                            title={item.name}\r\n                            onClick={() => {\r\n                              history.push(`/profileDevice/${item._id}`);\r\n                            }}\r\n                          />\r\n                          <CardHeader\r\n                            title={`${item.price} p`}\r\n                            subheader={item.name}\r\n                          />\r\n                        </Card>\r\n                      </Grid>\r\n                    );\r\n                  })}\r\n              </>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {!!pageQty && (\r\n          <Pagination\r\n            className={classes.pagination}\r\n            count={pageQty}\r\n            page={page}\r\n            showFirstButton\r\n            showLastButton\r\n            onChange={handleChange}\r\n            // интегрируем роутер\r\n            renderItem={(item) => (\r\n              <PaginationItem\r\n                component={Link}\r\n                to={`/profileType/${id}?page=${item.page}`}\r\n                {...item}\r\n              />\r\n            )}\r\n          />\r\n        )}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n  return {\r\n    devices: state.devices.devices, //устройства\r\n    selectedType: state.devices.selectedType, //выбранный тип устройства\r\n    pageQty: state.devices.pageQty, //количества страниц\r\n    limit: state.devices.limit, //сколько устройств на странице\r\n    typeId: state.devices.typeId, // айдишник типа\r\n    brandId: state.devices.brandId, // айдишник брэнда\r\n    isLoadinDevice: state.devices.isLoadinDevice, //крутилка у стройств\r\n    isLoadinTypes: state.devices.isLoadinTypes, //крутилка типов\r\n    isFetchErrorDevice: state.devices.isFetchErrorDevice, //ошибка устройств\r\n    isFetchErrorTypes: state.devices.isFetchErrorTypes, //ошибка типов\r\n  };\r\n};\r\nexport default connect<\r\n  MapStateToPropsType,\r\n  MapDispathPropsType,\r\n  unknown, // личные пропсы\r\n  RootStateType\r\n>(mapStateToProps, {\r\n  getDevices,\r\n  getSelectedType,\r\n  setTypeId,\r\n  setBrandId,\r\n})(ProfileType);\r\n"]},"metadata":{},"sourceType":"module"}