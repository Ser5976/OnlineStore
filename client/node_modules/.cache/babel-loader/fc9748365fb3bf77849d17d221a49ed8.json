{"ast":null,"code":"const SET_DEVICES = 'SET_DEVICES';\nconst SET_SELECTED_DEVICE = 'SET_SELECTED_DEVICE';\nconst SET_TYPES = 'SET_TYPES';\nconst SET_SELECTED_TYPE = 'SET_SELECTED_TYPE';\nconst SET_BRANDS = 'SET_BRANDS';\nconst SET_PAGE_QTY = 'SET_PAGE_QTY';\nconst SET_TYPE_ID = 'SET_TYPE_ID';\nconst SET_BRAND_ID = 'SET_BRAND_ID';\nconst IS_LOADIN_DEVICES = 'IS_LOADIN_DEVICES';\nconst IS_LOADIN_SELECTED_DEVICE = 'IS_LOADIN_SELECTED_DEVICE';\nconst IS_LOADIN_TYPES = 'IS_LOADIN_TYPES';\nconst IS_LOADIN_SELECTED_TYPE = 'IS_LOADIN_SELECTED_TYPE';\nconst SET_FETCH_ERROR_DEVICE = 'SET_FETCH_ERROR_DEVICE';\nconst SET_FETCH_ERROR_SELECTED_DEVICE = 'SET_FETCH_ERROR_SELECTED_DEVICE';\nconst SET_FETCH_ERROR_TYPES = 'SET_FETCH_ERROR_TYPES';\nconst SET_FETCH_ERROR_SELECTED_TYPE = 'SET_FETCH_ERROR_SELECTED_TYPE';\nconst SET_ADDED_DEVICE = 'SET_ADDED_DEVICE';\nconst SET_ADDED_DEVICE_ERROR = 'SET_ADDED_DEVICE_ERROR';\nconst SET_ALERT_MESSAGE = 'SET_ALERT_MESSAGE'; //типизация--------------------------------\n//----------стейта-------------------------\n\n//-----------------------------------------\nconst initialState = {\n  devices: [],\n  //массив устройств\n  selectedDevice: {},\n  //выбранное устройство\n  selectedType: {},\n  //выбранный тип устройства\n  types: [],\n  //массив типов устройств\n  brands: [],\n  // массив брэндов устройств\n  //---пагинация----\n  pageQty: 0,\n  // общее количество страниц(для пагинации)\n  limit: 10,\n  // количество устройств на станице\n  //----для фильтрации---\n  typeId: null,\n  // выбранный тип устройства\n  brandId: null,\n  // выбранный брэнд устройства\n  //------загрузка и ошибки-----\n  isLoadinDevice: true,\n  isLoadinSelectedDevice: true,\n  isLoadinTypes: true,\n  isLoadinSelectedType: true,\n  isFetchErrorDevice: false,\n  isFetchErrorSelectedDevice: false,\n  isFetchErrorTypes: false,\n  isFetchErrorSelectedType: false,\n  //------добавленное устройство\n  addedDevice: {\n    name: '',\n    price: '',\n    picture: [],\n    info: [],\n    typeId: '',\n    brandId: ''\n  },\n  addedDeviceError: false,\n  //ошибка при добавлении устройства в базу данных\n  alertMessage: null // маркер получения сообщения о невозможности удаления типа/брэнда устройства\n\n};\nexport const deviceReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_DEVICES:\n      return { ...state,\n        devices: action.payload,\n        isLoadinDevice: false\n      };\n\n    case SET_SELECTED_DEVICE:\n      return { ...state,\n        selectedDevice: action.payload,\n        isLoadinSelectedDevice: false\n      };\n\n    case SET_TYPES:\n      return { ...state,\n        types: action.payload,\n        isLoadinTypes: false\n      };\n\n    case SET_SELECTED_TYPE:\n      return { ...state,\n        selectedType: action.payload,\n        isLoadinSelectedType: false\n      };\n\n    case SET_BRANDS:\n      return { ...state,\n        brands: action.payload\n      };\n\n    case SET_PAGE_QTY:\n      return { ...state,\n        pageQty: action.payload\n      };\n\n    case SET_TYPE_ID:\n      return { ...state,\n        typeId: action.payload\n      };\n\n    case SET_BRAND_ID:\n      return { ...state,\n        brandId: action.payload\n      };\n\n    case IS_LOADIN_DEVICES:\n      return { ...state,\n        isLoadinDevice: action.payload\n      };\n\n    case IS_LOADIN_SELECTED_DEVICE:\n      return { ...state,\n        isLoadinSelectedDevice: action.payload\n      };\n\n    case SET_FETCH_ERROR_DEVICE:\n      return { ...state,\n        isFetchErrorDevice: action.payload\n      };\n\n    case SET_FETCH_ERROR_SELECTED_DEVICE:\n      return { ...state,\n        isFetchErrorSelectedDevice: action.payload\n      };\n\n    case IS_LOADIN_TYPES:\n      return { ...state,\n        isLoadinTypes: action.payload\n      };\n\n    case IS_LOADIN_SELECTED_TYPE:\n      return { ...state,\n        isLoadinSelectedType: action.payload\n      };\n\n    case SET_FETCH_ERROR_TYPES:\n      return { ...state,\n        isFetchErrorTypes: action.payload\n      };\n\n    case SET_FETCH_ERROR_SELECTED_TYPE:\n      return { ...state,\n        isFetchErrorSelectedType: action.payload\n      };\n\n    case SET_ADDED_DEVICE:\n      return { ...state,\n        addedDevice: action.payload\n      };\n\n    case SET_ADDED_DEVICE_ERROR:\n      return { ...state,\n        addedDeviceError: action.payload\n      };\n\n    case SET_ALERT_MESSAGE:\n      return { ...state,\n        alertMessage: action.payload\n      };\n\n    default:\n      return state;\n  }\n}; // записывает устройства\n\nexport const setDevices = data => ({\n  type: SET_DEVICES,\n  payload: data\n}); // записываем общее количество страниц (вычисляем на бэке,для пагинации)\n\nexport const setPageQty = data => ({\n  type: SET_PAGE_QTY,\n  payload: data\n}); // записывает выбранное устройство\n\nexport const setSelectedDevice = data => ({\n  type: SET_SELECTED_DEVICE,\n  payload: data\n}); // записываем типы устройств\n\nexport const setTypes = data => ({\n  type: SET_TYPES,\n  payload: data\n}); // записывает выбранный тип устройства\n\nexport const setSelectedType = data => ({\n  type: SET_SELECTED_TYPE,\n  payload: data\n}); // записываем бренды устройств\n\nexport const setBrands = data => ({\n  type: SET_BRANDS,\n  payload: data\n}); // записываем выбранный тип\n\nexport const setTypeId = data => ({\n  type: SET_TYPE_ID,\n  payload: data\n}); // записываем выбранный брэнд\n\nexport const setBrandId = data => ({\n  type: SET_BRAND_ID,\n  payload: data\n}); // записываем крутилки и ошибки  в стейт\n\nexport const setIsLoadinDevice = bul => ({\n  type: IS_LOADIN_DEVICES,\n  payload: bul\n});\nexport const setIsLoadinSelectedDevice = bul => ({\n  type: IS_LOADIN_SELECTED_DEVICE,\n  payload: bul\n});\nexport const setFetchErrorDevice = bul => ({\n  type: SET_FETCH_ERROR_DEVICE,\n  payload: bul\n});\nexport const setFetchErrorSelectedDevice = bul => ({\n  type: SET_FETCH_ERROR_SELECTED_DEVICE,\n  payload: bul\n});\nexport const setIsLoadinTypes = bul => ({\n  type: IS_LOADIN_TYPES,\n  payload: bul\n});\nexport const setIsLoadinSelectedType = bul => ({\n  type: IS_LOADIN_SELECTED_TYPE,\n  payload: bul\n});\nexport const setFetchErrorTypes = bul => ({\n  type: SET_FETCH_ERROR_TYPES,\n  payload: bul\n});\nexport const setFetchErrorSelectedType = bul => ({\n  type: SET_FETCH_ERROR_SELECTED_TYPE,\n  payload: bul\n}); //запись добавленного девайса в стейт\n\nexport const setAddedDevice = data => ({\n  type: SET_ADDED_DEVICE,\n  payload: data\n}); //ошибка добавленного устройтсва\n\nexport const setAddedDeviceError = data => ({\n  type: SET_ADDED_DEVICE_ERROR,\n  payload: data\n}); // изменения маркера получения сообщения о невозможности удаления типа устройства\n\nexport const setAlertMessage = data => ({\n  type: SET_ALERT_MESSAGE,\n  payload: data\n});","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/store/reducer/deviceReducer.ts"],"names":["SET_DEVICES","SET_SELECTED_DEVICE","SET_TYPES","SET_SELECTED_TYPE","SET_BRANDS","SET_PAGE_QTY","SET_TYPE_ID","SET_BRAND_ID","IS_LOADIN_DEVICES","IS_LOADIN_SELECTED_DEVICE","IS_LOADIN_TYPES","IS_LOADIN_SELECTED_TYPE","SET_FETCH_ERROR_DEVICE","SET_FETCH_ERROR_SELECTED_DEVICE","SET_FETCH_ERROR_TYPES","SET_FETCH_ERROR_SELECTED_TYPE","SET_ADDED_DEVICE","SET_ADDED_DEVICE_ERROR","SET_ALERT_MESSAGE","initialState","devices","selectedDevice","selectedType","types","brands","pageQty","limit","typeId","brandId","isLoadinDevice","isLoadinSelectedDevice","isLoadinTypes","isLoadinSelectedType","isFetchErrorDevice","isFetchErrorSelectedDevice","isFetchErrorTypes","isFetchErrorSelectedType","addedDevice","name","price","picture","info","addedDeviceError","alertMessage","deviceReducer","state","action","type","payload","setDevices","data","setPageQty","setSelectedDevice","setTypes","setSelectedType","setBrands","setTypeId","setBrandId","setIsLoadinDevice","bul","setIsLoadinSelectedDevice","setFetchErrorDevice","setFetchErrorSelectedDevice","setIsLoadinTypes","setIsLoadinSelectedType","setFetchErrorTypes","setFetchErrorSelectedType","setAddedDevice","setAddedDeviceError","setAlertMessage"],"mappings":"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","sourcesContent":["const SET_DEVICES = 'SET_DEVICES';\r\nconst SET_SELECTED_DEVICE = 'SET_SELECTED_DEVICE';\r\nconst SET_TYPES = 'SET_TYPES';\r\nconst SET_SELECTED_TYPE = 'SET_SELECTED_TYPE';\r\nconst SET_BRANDS = 'SET_BRANDS';\r\nconst SET_PAGE_QTY = 'SET_PAGE_QTY';\r\nconst SET_TYPE_ID = 'SET_TYPE_ID';\r\nconst SET_BRAND_ID = 'SET_BRAND_ID';\r\n\r\nconst IS_LOADIN_DEVICES = 'IS_LOADIN_DEVICES';\r\nconst IS_LOADIN_SELECTED_DEVICE = 'IS_LOADIN_SELECTED_DEVICE';\r\nconst IS_LOADIN_TYPES = 'IS_LOADIN_TYPES';\r\nconst IS_LOADIN_SELECTED_TYPE = 'IS_LOADIN_SELECTED_TYPE';\r\n\r\nconst SET_FETCH_ERROR_DEVICE = 'SET_FETCH_ERROR_DEVICE';\r\nconst SET_FETCH_ERROR_SELECTED_DEVICE = 'SET_FETCH_ERROR_SELECTED_DEVICE';\r\nconst SET_FETCH_ERROR_TYPES = 'SET_FETCH_ERROR_TYPES';\r\nconst SET_FETCH_ERROR_SELECTED_TYPE = 'SET_FETCH_ERROR_SELECTED_TYPE';\r\n\r\nconst SET_ADDED_DEVICE = 'SET_ADDED_DEVICE';\r\nconst SET_ADDED_DEVICE_ERROR = 'SET_ADDED_DEVICE_ERROR';\r\n\r\nconst SET_ALERT_MESSAGE = 'SET_ALERT_MESSAGE';\r\n\r\n//типизация--------------------------------\r\n//----------стейта-------------------------\r\nexport type Brands = {\r\n  _id: string;\r\n  name: string;\r\n  __v: number;\r\n};\r\nexport type TypeDeviceType = {\r\n  _id: string;\r\n  name: string;\r\n  brands: Brands[];\r\n  __v: number;\r\n};\r\nexport type InfoType = {\r\n  title: string;\r\n  description: string;\r\n};\r\n\r\nexport type DeviceType = {\r\n  _id?: string;\r\n  name: string;\r\n  price: number | null;\r\n  picture: string[] | any[];\r\n  info: any;\r\n  typeId: string;\r\n  brandId: string;\r\n  __v?: number;\r\n};\r\nexport type BrandType = {\r\n  _id: string;\r\n  name: string;\r\n  __v: number;\r\n};\r\nexport type addedDeviceType = {\r\n  name: string;\r\n  price: string;\r\n  picture: any[];\r\n  info: InfoType[];\r\n  typeId: string;\r\n  brandId: string;\r\n};\r\n\r\nexport type InitialStateType = {\r\n  devices: DeviceType[];\r\n  selectedDevice: DeviceType;\r\n  selectedType: TypeDeviceType;\r\n  brands: BrandType[];\r\n  types: TypeDeviceType[];\r\n  pageQty: number;\r\n  limit: number;\r\n  typeId: string | null;\r\n  brandId: string | null;\r\n\r\n  isLoadinDevice: boolean;\r\n  isLoadinSelectedDevice: boolean;\r\n  isLoadinTypes: boolean;\r\n  isLoadinSelectedType: boolean;\r\n\r\n  isFetchErrorDevice: boolean;\r\n  isFetchErrorTypes: boolean;\r\n  isFetchErrorSelectedType: boolean;\r\n  isFetchErrorSelectedDevice: boolean;\r\n\r\n  addedDevice: addedDeviceType;\r\n  addedDeviceError: boolean;\r\n  alertMessage: string | null;\r\n};\r\n//------- action---------------------------\r\nexport type setDevicesActionType = {\r\n  type: typeof SET_DEVICES;\r\n  payload: DeviceType[];\r\n};\r\nexport type setSelectedTypeActionType = {\r\n  type: typeof SET_SELECTED_TYPE;\r\n  payload: TypeDeviceType;\r\n};\r\nexport type setSelectedDeviceActionType = {\r\n  type: typeof SET_SELECTED_DEVICE;\r\n  payload: DeviceType;\r\n};\r\nexport type setTypesActionType = {\r\n  type: typeof SET_TYPES;\r\n  payload: TypeDeviceType[];\r\n};\r\nexport type setBrandsActionType = {\r\n  type: typeof SET_BRANDS;\r\n  payload: BrandType[];\r\n};\r\nexport type setPageQtyActionType = {\r\n  type: typeof SET_PAGE_QTY;\r\n  payload: number;\r\n};\r\nexport type setTypeIdActionType = {\r\n  type: typeof SET_TYPE_ID;\r\n  payload: string | null;\r\n};\r\nexport type setBrandIdActionType = {\r\n  type: typeof SET_BRAND_ID;\r\n  payload: string | null;\r\n};\r\nexport type setIsLoadinDeviceActionType = {\r\n  type: typeof IS_LOADIN_DEVICES;\r\n  payload: boolean;\r\n};\r\nexport type setIsLoadinSelectedDeviceActionType = {\r\n  type: typeof IS_LOADIN_SELECTED_DEVICE;\r\n  payload: boolean;\r\n};\r\nexport type setIsLoadinSelectedTypeActionType = {\r\n  type: typeof IS_LOADIN_SELECTED_TYPE;\r\n  payload: boolean;\r\n};\r\nexport type setIsLoadinTypesActionType = {\r\n  type: typeof IS_LOADIN_TYPES;\r\n  payload: boolean;\r\n};\r\nexport type setFetchErrorDeviceActionType = {\r\n  type: typeof SET_FETCH_ERROR_DEVICE;\r\n  payload: boolean;\r\n};\r\nexport type setFetchErrorSelectedDeviceActionType = {\r\n  type: typeof SET_FETCH_ERROR_SELECTED_DEVICE;\r\n  payload: boolean;\r\n};\r\nexport type setFetchErrorTypesActionType = {\r\n  type: typeof SET_FETCH_ERROR_TYPES;\r\n  payload: boolean;\r\n};\r\nexport type setFetchErrorSelectedTypeActionType = {\r\n  type: typeof SET_FETCH_ERROR_SELECTED_TYPE;\r\n  payload: boolean;\r\n};\r\nexport type setAddedDeviceActionType = {\r\n  type: typeof SET_ADDED_DEVICE;\r\n  payload: addedDeviceType;\r\n};\r\nexport type setAddedDeviceErrorActionType = {\r\n  type: typeof SET_ADDED_DEVICE_ERROR;\r\n  payload: boolean;\r\n};\r\nexport type setAlertMessageActionType = {\r\n  type: typeof SET_ALERT_MESSAGE;\r\n  payload: string | null;\r\n};\r\n\r\nexport type DeviceAtionType =\r\n  | setDevicesActionType\r\n  | setSelectedDeviceActionType\r\n  | setSelectedTypeActionType\r\n  | setTypesActionType\r\n  | setBrandsActionType\r\n  | setPageQtyActionType\r\n  | setTypeIdActionType\r\n  | setBrandIdActionType\r\n  | setIsLoadinDeviceActionType\r\n  | setFetchErrorDeviceActionType\r\n  | setIsLoadinTypesActionType\r\n  | setFetchErrorTypesActionType\r\n  | setIsLoadinSelectedDeviceActionType\r\n  | setIsLoadinSelectedTypeActionType\r\n  | setFetchErrorSelectedDeviceActionType\r\n  | setFetchErrorSelectedTypeActionType\r\n  | setAddedDeviceActionType\r\n  | setAddedDeviceErrorActionType\r\n  | setAlertMessageActionType;\r\n\r\n//-----------------------------------------\r\n\r\nconst initialState: InitialStateType = {\r\n  devices: [], //массив устройств\r\n  selectedDevice: {} as DeviceType, //выбранное устройство\r\n  selectedType: {} as TypeDeviceType, //выбранный тип устройства\r\n  types: [], //массив типов устройств\r\n  brands: [], // массив брэндов устройств\r\n  //---пагинация----\r\n  pageQty: 0, // общее количество страниц(для пагинации)\r\n  limit: 10, // количество устройств на станице\r\n  //----для фильтрации---\r\n  typeId: null, // выбранный тип устройства\r\n  brandId: null, // выбранный брэнд устройства\r\n  //------загрузка и ошибки-----\r\n  isLoadinDevice: true,\r\n  isLoadinSelectedDevice: true,\r\n  isLoadinTypes: true,\r\n  isLoadinSelectedType: true,\r\n\r\n  isFetchErrorDevice: false,\r\n  isFetchErrorSelectedDevice: false,\r\n  isFetchErrorTypes: false,\r\n  isFetchErrorSelectedType: false,\r\n  //------добавленное устройство\r\n  addedDevice: {\r\n    name: '',\r\n    price: '',\r\n    picture: [],\r\n    info: [],\r\n    typeId: '',\r\n    brandId: '',\r\n  },\r\n  addedDeviceError: false, //ошибка при добавлении устройства в базу данных\r\n  alertMessage: null, // маркер получения сообщения о невозможности удаления типа/брэнда устройства\r\n};\r\nexport const deviceReducer = (\r\n  state = initialState,\r\n  action: DeviceAtionType\r\n) => {\r\n  switch (action.type) {\r\n    case SET_DEVICES:\r\n      return {\r\n        ...state,\r\n        devices: action.payload,\r\n        isLoadinDevice: false,\r\n      };\r\n    case SET_SELECTED_DEVICE:\r\n      return {\r\n        ...state,\r\n        selectedDevice: action.payload,\r\n        isLoadinSelectedDevice: false,\r\n      };\r\n    case SET_TYPES:\r\n      return {\r\n        ...state,\r\n        types: action.payload,\r\n        isLoadinTypes: false,\r\n      };\r\n    case SET_SELECTED_TYPE:\r\n      return {\r\n        ...state,\r\n        selectedType: action.payload,\r\n        isLoadinSelectedType: false,\r\n      };\r\n    case SET_BRANDS:\r\n      return {\r\n        ...state,\r\n        brands: action.payload,\r\n      };\r\n    case SET_PAGE_QTY:\r\n      return {\r\n        ...state,\r\n        pageQty: action.payload,\r\n      };\r\n    case SET_TYPE_ID:\r\n      return {\r\n        ...state,\r\n        typeId: action.payload,\r\n      };\r\n    case SET_BRAND_ID:\r\n      return {\r\n        ...state,\r\n        brandId: action.payload,\r\n      };\r\n    case IS_LOADIN_DEVICES:\r\n      return {\r\n        ...state,\r\n        isLoadinDevice: action.payload,\r\n      };\r\n    case IS_LOADIN_SELECTED_DEVICE:\r\n      return {\r\n        ...state,\r\n        isLoadinSelectedDevice: action.payload,\r\n      };\r\n    case SET_FETCH_ERROR_DEVICE:\r\n      return {\r\n        ...state,\r\n        isFetchErrorDevice: action.payload,\r\n      };\r\n    case SET_FETCH_ERROR_SELECTED_DEVICE:\r\n      return {\r\n        ...state,\r\n        isFetchErrorSelectedDevice: action.payload,\r\n      };\r\n    case IS_LOADIN_TYPES:\r\n      return {\r\n        ...state,\r\n        isLoadinTypes: action.payload,\r\n      };\r\n    case IS_LOADIN_SELECTED_TYPE:\r\n      return {\r\n        ...state,\r\n        isLoadinSelectedType: action.payload,\r\n      };\r\n    case SET_FETCH_ERROR_TYPES:\r\n      return {\r\n        ...state,\r\n        isFetchErrorTypes: action.payload,\r\n      };\r\n    case SET_FETCH_ERROR_SELECTED_TYPE:\r\n      return {\r\n        ...state,\r\n        isFetchErrorSelectedType: action.payload,\r\n      };\r\n    case SET_ADDED_DEVICE:\r\n      return {\r\n        ...state,\r\n        addedDevice: action.payload,\r\n      };\r\n    case SET_ADDED_DEVICE_ERROR:\r\n      return {\r\n        ...state,\r\n        addedDeviceError: action.payload,\r\n      };\r\n    case SET_ALERT_MESSAGE:\r\n      return {\r\n        ...state,\r\n        alertMessage: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// записывает устройства\r\nexport const setDevices = (data: DeviceType[]): setDevicesActionType => ({\r\n  type: SET_DEVICES,\r\n  payload: data,\r\n});\r\n// записываем общее количество страниц (вычисляем на бэке,для пагинации)\r\nexport const setPageQty = (data: number): setPageQtyActionType => ({\r\n  type: SET_PAGE_QTY,\r\n  payload: data,\r\n});\r\n// записывает выбранное устройство\r\nexport const setSelectedDevice = (\r\n  data: DeviceType\r\n): setSelectedDeviceActionType => ({\r\n  type: SET_SELECTED_DEVICE,\r\n  payload: data,\r\n});\r\n// записываем типы устройств\r\nexport const setTypes = (data: TypeDeviceType[]): setTypesActionType => ({\r\n  type: SET_TYPES,\r\n  payload: data,\r\n});\r\n// записывает выбранный тип устройства\r\nexport const setSelectedType = (\r\n  data: TypeDeviceType\r\n): setSelectedTypeActionType => ({\r\n  type: SET_SELECTED_TYPE,\r\n  payload: data,\r\n});\r\n// записываем бренды устройств\r\nexport const setBrands = (data: BrandType[]): setBrandsActionType => ({\r\n  type: SET_BRANDS,\r\n  payload: data,\r\n});\r\n// записываем выбранный тип\r\nexport const setTypeId = (data: string | null): setTypeIdActionType => ({\r\n  type: SET_TYPE_ID,\r\n  payload: data,\r\n});\r\n// записываем выбранный брэнд\r\nexport const setBrandId = (data: string | null): setBrandIdActionType => ({\r\n  type: SET_BRAND_ID,\r\n  payload: data,\r\n});\r\n// записываем крутилки и ошибки  в стейт\r\nexport const setIsLoadinDevice = (\r\n  bul: boolean\r\n): setIsLoadinDeviceActionType => ({\r\n  type: IS_LOADIN_DEVICES,\r\n  payload: bul,\r\n});\r\nexport const setIsLoadinSelectedDevice = (\r\n  bul: boolean\r\n): setIsLoadinSelectedDeviceActionType => ({\r\n  type: IS_LOADIN_SELECTED_DEVICE,\r\n  payload: bul,\r\n});\r\nexport const setFetchErrorDevice = (\r\n  bul: boolean\r\n): setFetchErrorDeviceActionType => ({\r\n  type: SET_FETCH_ERROR_DEVICE,\r\n  payload: bul,\r\n});\r\nexport const setFetchErrorSelectedDevice = (\r\n  bul: boolean\r\n): setFetchErrorSelectedDeviceActionType => ({\r\n  type: SET_FETCH_ERROR_SELECTED_DEVICE,\r\n  payload: bul,\r\n});\r\nexport const setIsLoadinTypes = (bul: boolean): setIsLoadinTypesActionType => ({\r\n  type: IS_LOADIN_TYPES,\r\n  payload: bul,\r\n});\r\nexport const setIsLoadinSelectedType = (\r\n  bul: boolean\r\n): setIsLoadinSelectedTypeActionType => ({\r\n  type: IS_LOADIN_SELECTED_TYPE,\r\n  payload: bul,\r\n});\r\nexport const setFetchErrorTypes = (\r\n  bul: boolean\r\n): setFetchErrorTypesActionType => ({\r\n  type: SET_FETCH_ERROR_TYPES,\r\n  payload: bul,\r\n});\r\nexport const setFetchErrorSelectedType = (\r\n  bul: boolean\r\n): setFetchErrorSelectedTypeActionType => ({\r\n  type: SET_FETCH_ERROR_SELECTED_TYPE,\r\n  payload: bul,\r\n});\r\n\r\n//запись добавленного девайса в стейт\r\nexport const setAddedDevice = (\r\n  data: addedDeviceType\r\n): setAddedDeviceActionType => ({\r\n  type: SET_ADDED_DEVICE,\r\n  payload: data,\r\n});\r\n//ошибка добавленного устройтсва\r\nexport const setAddedDeviceError = (\r\n  data: boolean\r\n): setAddedDeviceErrorActionType => ({\r\n  type: SET_ADDED_DEVICE_ERROR,\r\n  payload: data,\r\n});\r\n// изменения маркера получения сообщения о невозможности удаления типа устройства\r\nexport const setAlertMessage = (\r\n  data: string | null\r\n): setAlertMessageActionType => ({\r\n  type: SET_ALERT_MESSAGE,\r\n  payload: data,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}