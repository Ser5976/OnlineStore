{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\components\\\\TypeBar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  /*  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  }, */\n\n  /* nested: {\r\n    paddingLeft: theme.spacing(4),\r\n  }, */\n}));\n\nconst TypeBar = () => {\n  _s();\n\n  const classes = useStyles();\n  const [open, setOpen] = useState(false); // для вложенного списа\n\n  const [indexActiv, setIndexActiv] = useState(null); //чтобы не раскрывался весь список\n\n  const handleClick = index => {\n    setOpen(!open);\n    setIndexActiv(index);\n  }; // управление вложенным списком\n\n\n  console.log(indexActiv);\n  const brand = ['Samsung', 'Lenovo', 'Acer'];\n  const device = ['Смартфоны', 'Планшеты', 'Ноутбуки'];\n  return /*#__PURE__*/_jsxDEV(List, {\n    dense: true // component=\"nav\"\n    // subheader={<ListSubheader component=\"div\">Device List</ListSubheader>}\n    ,\n    children: device.map((element, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(ListItem, {\n          button: true,\n          onClick: () => handleClick(index),\n          children: /*#__PURE__*/_jsxDEV(ListItemText, {\n            inset: true,\n            disableTypography: false,\n            primary: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              style: {\n                color: '#ff6f00'\n              },\n              children: element\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n          in: indexActiv === index && open,\n          timeout: \"auto\",\n          unmountOnExit: true,\n          children: /*#__PURE__*/_jsxDEV(List, {\n            component: \"div\",\n            children: brand.map(el => {\n              return /*#__PURE__*/_jsxDEV(ListItem, {\n                button: true,\n                children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                  inset: true,\n                  primary: el\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 64,\n                  columnNumber: 23\n                }, this)\n              }, el, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)]\n      }, element, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TypeBar, \"oc4jZmA0ge7Njxw6FWQQLOyh1RE=\", false, function () {\n  return [useStyles];\n});\n\n_c = TypeBar;\nexport default TypeBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"TypeBar\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/components/TypeBar.tsx"],"names":["React","useState","makeStyles","List","Typography","ListItem","ListItemText","Collapse","useStyles","theme","TypeBar","classes","open","setOpen","indexActiv","setIndexActiv","handleClick","index","console","log","brand","device","map","element","color","el"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAAkC,0BAAlC;AAEA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AAEA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,QAAP,MAAqB,4BAArB;;AAEA,MAAMC,SAAS,GAAGN,UAAU,CAAEO,KAAD,KAAmB;AAC9C;AACF;AACA;AACA;AACA;;AACE;AACF;AACA;AARgD,CAAnB,CAAD,CAA5B;;AAWA,MAAMC,OAAiB,GAAG,MAAM;AAAA;;AAC9B,QAAMC,OAAO,GAAGH,SAAS,EAAzB;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,KAAD,CAAhC,CAF8B,CAEW;;AACzC,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAgB,IAAhB,CAA5C,CAH8B,CAGqC;;AAEnE,QAAMe,WAAW,GAAIC,KAAD,IAA0B;AAC5CJ,IAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACAG,IAAAA,aAAa,CAACE,KAAD,CAAb;AACD,GAHD,CAL8B,CAQ3B;;;AAEHC,EAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ;AACA,QAAMM,KAAK,GAAG,CAAC,SAAD,EAAY,QAAZ,EAAsB,MAAtB,CAAd;AACA,QAAMC,MAAM,GAAG,CAAC,WAAD,EAAc,UAAd,EAA0B,UAA1B,CAAf;AACA,sBACE,QAAC,IAAD;AACE,IAAA,KAAK,EAAE,IADT,CAEE;AACA;AAHF;AAAA,cAKGA,MAAM,CAACC,GAAP,CAAW,CAACC,OAAD,EAAUN,KAAV,KAAoB;AAC9B,0BACE;AAAA,gCACE,QAAC,QAAD;AAAU,UAAA,MAAM,MAAhB;AAAiB,UAAA,OAAO,EAAE,MAAMD,WAAW,CAACC,KAAD,CAA3C;AAAA,iCACE,QAAC,YAAD;AACE,YAAA,KAAK,EAAE,IADT;AAEE,YAAA,iBAAiB,EAAE,KAFrB;AAGE,YAAA,OAAO,eACL,QAAC,UAAD;AAAY,cAAA,OAAO,EAAC,OAApB;AAA4B,cAAA,KAAK,EAAE;AAAEO,gBAAAA,KAAK,EAAE;AAAT,eAAnC;AAAA,wBACGD;AADH;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAYE,QAAC,QAAD;AACE,UAAA,EAAE,EAAET,UAAU,KAAKG,KAAf,IAAwBL,IAD9B;AAEE,UAAA,OAAO,EAAC,MAFV;AAGE,UAAA,aAAa,MAHf;AAAA,iCAKE,QAAC,IAAD;AAAM,YAAA,SAAS,EAAC,KAAhB;AAAA,sBACGQ,KAAK,CAACE,GAAN,CAAWG,EAAD,IAAQ;AACjB,kCACE,QAAC,QAAD;AAAU,gBAAA,MAAM,MAAhB;AAAA,uCACE,QAAC,YAAD;AAAc,kBAAA,KAAK,MAAnB;AAAoB,kBAAA,OAAO,EAAEA;AAA7B;AAAA;AAAA;AAAA;AAAA;AADF,iBAAsBA,EAAtB;AAAA;AAAA;AAAA;AAAA,sBADF;AAKD,aANA;AADH;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,gBAZF;AAAA,SAAUF,OAAV;AAAA;AAAA;AAAA;AAAA,cADF;AA8BD,KA/BA;AALH;AAAA;AAAA;AAAA;AAAA,UADF;AAwCD,CArDD;;GAAMb,O;UACYF,S;;;KADZE,O;AAuDN,eAAeA,OAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Collapse from '@material-ui/core/Collapse';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  /*  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  }, */\r\n  /* nested: {\r\n    paddingLeft: theme.spacing(4),\r\n  }, */\r\n}));\r\n\r\nconst TypeBar: React.FC = () => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false); // для вложенного списа\r\n  const [indexActiv, setIndexActiv] = useState<null | number>(null); //чтобы не раскрывался весь список\r\n\r\n  const handleClick = (index: number | null) => {\r\n    setOpen(!open);\r\n    setIndexActiv(index);\r\n  }; // управление вложенным списком\r\n\r\n  console.log(indexActiv);\r\n  const brand = ['Samsung', 'Lenovo', 'Acer'];\r\n  const device = ['Смартфоны', 'Планшеты', 'Ноутбуки'];\r\n  return (\r\n    <List\r\n      dense={true}\r\n      // component=\"nav\"\r\n      // subheader={<ListSubheader component=\"div\">Device List</ListSubheader>}\r\n    >\r\n      {device.map((element, index) => {\r\n        return (\r\n          <div key={element}>\r\n            <ListItem button onClick={() => handleClick(index)}>\r\n              <ListItemText\r\n                inset={true}\r\n                disableTypography={false}\r\n                primary={\r\n                  <Typography variant=\"body2\" style={{ color: '#ff6f00' }}>\r\n                    {element}\r\n                  </Typography>\r\n                }\r\n              />\r\n            </ListItem>\r\n            <Collapse\r\n              in={indexActiv === index && open}\r\n              timeout=\"auto\"\r\n              unmountOnExit\r\n            >\r\n              <List component=\"div\">\r\n                {brand.map((el) => {\r\n                  return (\r\n                    <ListItem button key={el}>\r\n                      <ListItemText inset primary={el} />\r\n                    </ListItem>\r\n                  );\r\n                })}\r\n              </List>\r\n            </Collapse>\r\n          </div>\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default TypeBar;\r\n"]},"metadata":{},"sourceType":"module"}