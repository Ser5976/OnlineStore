{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\pages\\\\ProfileType.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport { useLocation, useHistory } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport Pagination from '@material-ui/lab/Pagination';\nimport PaginationItem from '@material-ui/lab/PaginationItem';\n//типизиция всего стора\nimport { setTypeId, //запись выбранного типа устройства\nsetBrandId //запись выбранного  брэнда устройства\n} from '../store/reducer/deviceReducer';\n//типизация данных\nimport { getDevices //запрос на получение типов\n} from '../action/deviceAction';\nimport { connect } from 'react-redux'; //типизация--------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n//-----------------------------------------\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    '& > *': {\n      marginTop: theme.spacing(2)\n    },\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginBottom: theme.spacing(2)\n  },\n  grid: {\n    width: '100%',\n    height: 650,\n    overflow: 'auto'\n  },\n  textTitle: {\n    marginTop: '25px'\n  }\n}));\n\nconst ProfileType = ({\n  getDevices,\n  setTypeId,\n  setBrandId,\n  devices,\n  types,\n  brands,\n  pageQty,\n  limit,\n  typeId,\n  brandId,\n  isLoadinDevice,\n  isFetchErrorDevice,\n  isLoadinTypes,\n  isFetchErrorTypes\n}) => {\n  _s();\n\n  var _searchPage$search;\n\n  const classes = useStyles();\n  const searchPage = useLocation(); // для получения строки запроса\n\n  const history = useHistory(); //для изменения строки запроса\n  //console.log(search);\n  // пагинация, данные о текущей странице( по умолчанию: 1 или, если есть ,информация о текущей странице в адресной строке )\n\n  const [page, setPage] = useState(parseInt(((_searchPage$search = searchPage.search) === null || _searchPage$search === void 0 ? void 0 : _searchPage$search.split('=')[1]) || '1')); // изменения текущей страницы\n\n  const handleChange = (event, value) => {\n    setPage(value);\n  }; // запрос на сервак для получения устройств(фильтруем устройства по типу и бренду,а также пагинация)\n\n  /*  useEffect(() => {\r\n    getDevices(typeId, brandId, limit, page, setPage, history);\r\n    // eslint-disable-next-line\r\n  }, [typeId, brandId, page]);\r\n  // запрос на сервак для получения типов устройств\r\n  useEffect(() => {\r\n    getTypes();\r\n    // eslint-disable-next-line\r\n  }, []); */\n  // console.log(devices);\n  // console.log(info);\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u041F\\u0440\\u0438\\u0432\\u0435\\u0442!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), !!pageQty && /*#__PURE__*/_jsxDEV(Pagination, {\n      className: classes.root,\n      count: pageQty,\n      page: page,\n      showFirstButton: true,\n      showLastButton: true,\n      onChange: handleChange // интегрируем роутер\n      ,\n      renderItem: item => /*#__PURE__*/_jsxDEV(PaginationItem, {\n        component: Link,\n        to: `/?page=${item.page}`,\n        ...item\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ProfileType, \"vZx1kUcyUd1f8dpgvuh85YWrzSU=\", false, function () {\n  return [useStyles, useLocation, useHistory];\n});\n\n_c = ProfileType;\n\nconst mapStateToProps = state => {\n  return {\n    devices: state.devices.devices,\n    //устройства\n    types: state.devices.types,\n    //типы устройств\n    brands: state.devices.brands,\n    //брэнды устройств\n    pageQty: state.devices.pageQty,\n    //количества страниц\n    limit: state.devices.limit,\n    //сколько устройств на странице\n    typeId: state.devices.typeId,\n    // айдишник типа\n    brandId: state.devices.brandId,\n    // айдишник брэнда\n    isLoadinDevice: state.devices.isLoadinDevice,\n    //крутилка у стройств\n    isLoadinTypes: state.devices.isLoadinTypes,\n    //крутилка типов\n    isFetchErrorDevice: state.devices.isFetchErrorDevice,\n    //ошибка устройств\n    isFetchErrorTypes: state.devices.isFetchErrorTypes //ошибка типов\n\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getDevices,\n  setTypeId,\n  setBrandId\n})(ProfileType);\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileType\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/pages/ProfileType.tsx"],"names":["React","useState","makeStyles","createStyles","useLocation","useHistory","Link","Pagination","PaginationItem","setTypeId","setBrandId","getDevices","connect","useStyles","theme","root","marginTop","spacing","display","flexDirection","justifyContent","marginBottom","grid","width","height","overflow","textTitle","ProfileType","devices","types","brands","pageQty","limit","typeId","brandId","isLoadinDevice","isFetchErrorDevice","isLoadinTypes","isFetchErrorTypes","classes","searchPage","history","page","setPage","parseInt","search","split","handleChange","event","value","item","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Box } from '@material-ui/core';\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\nimport { useLocation, useHistory } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport PaginationItem from '@material-ui/lab/PaginationItem';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport DeviceContainer from '../components/DeviceContainer';\r\nimport { RootStateType } from '../store/store'; //типизиция всего стора\r\n\r\nimport {\r\n  setTypeId, //запись выбранного типа устройства\r\n  setBrandId, //запись выбранного  брэнда устройства\r\n} from '../store/reducer/deviceReducer';\r\nimport {\r\n  setTypeIdActionType,\r\n  setBrandIdActionType,\r\n} from '../store/reducer/deviceReducer'; // типизация экшенов\r\nimport {\r\n  DeviceType,\r\n  TypeDeviceType,\r\n  BrandType,\r\n} from '../store/reducer/deviceReducer'; //типизация данных\r\nimport {\r\n  getDevices, //запрос на получение устройств\r\n  getTypes, //запрос на получение типов\r\n} from '../action/deviceAction';\r\nimport { connect } from 'react-redux';\r\n\r\n//типизация--------------------------------\r\ntype MapStateToPropsType = {\r\n  devices: DeviceType[];\r\n  types: TypeDeviceType[];\r\n  brands: BrandType[];\r\n  pageQty: number;\r\n  limit: number;\r\n  typeId: string | null;\r\n  brandId: string | null;\r\n  isLoadinDevice: boolean;\r\n  isFetchErrorDevice: boolean;\r\n  isLoadinTypes: boolean;\r\n  isFetchErrorTypes: boolean;\r\n};\r\ntype MapDispathPropsType = {\r\n  getDevices: (\r\n    typeId: string | null,\r\n    brandId: string | null,\r\n    limit: number,\r\n    page: number,\r\n    setPage: React.Dispatch<React.SetStateAction<number>>,\r\n    history: any\r\n  ) => void;\r\n  setTypeId: (data: string | null) => setTypeIdActionType;\r\n  setBrandId: (data: string | null) => setBrandIdActionType;\r\n};\r\n\r\ntype PropsType = MapDispathPropsType & MapStateToPropsType;\r\n//-----------------------------------------\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root: {\r\n      '& > *': {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      justifyContent: 'center',\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n    grid: {\r\n      width: '100%',\r\n      height: 650,\r\n      overflow: 'auto',\r\n    },\r\n    textTitle: {\r\n      marginTop: '25px',\r\n    },\r\n  })\r\n);\r\n\r\nconst ProfileType: React.FC<PropsType> = ({\r\n  getDevices,\r\n  setTypeId,\r\n  setBrandId,\r\n\r\n  devices,\r\n  types,\r\n  brands,\r\n  pageQty,\r\n  limit,\r\n  typeId,\r\n  brandId,\r\n  isLoadinDevice,\r\n  isFetchErrorDevice,\r\n  isLoadinTypes,\r\n  isFetchErrorTypes,\r\n}) => {\r\n  const classes = useStyles();\r\n  const searchPage = useLocation(); // для получения строки запроса\r\n  const history = useHistory(); //для изменения строки запроса\r\n  //console.log(search);\r\n  // пагинация, данные о текущей странице( по умолчанию: 1 или, если есть ,информация о текущей странице в адресной строке )\r\n  const [page, setPage] = useState(\r\n    parseInt(searchPage.search?.split('=')[1] || '1')\r\n  );\r\n  // изменения текущей страницы\r\n  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n    setPage(value);\r\n  };\r\n  // запрос на сервак для получения устройств(фильтруем устройства по типу и бренду,а также пагинация)\r\n  /*  useEffect(() => {\r\n    getDevices(typeId, brandId, limit, page, setPage, history);\r\n    // eslint-disable-next-line\r\n  }, [typeId, brandId, page]);\r\n  // запрос на сервак для получения типов устройств\r\n  useEffect(() => {\r\n    getTypes();\r\n    // eslint-disable-next-line\r\n  }, []); */\r\n\r\n  // console.log(devices);\r\n\r\n  // console.log(info);\r\n  return (\r\n    <>\r\n      <div>Привет!</div>\r\n\r\n      {!!pageQty && (\r\n        <Pagination\r\n          className={classes.root}\r\n          count={pageQty}\r\n          page={page}\r\n          showFirstButton\r\n          showLastButton\r\n          onChange={handleChange}\r\n          // интегрируем роутер\r\n          renderItem={(item) => (\r\n            <PaginationItem\r\n              component={Link}\r\n              to={`/?page=${item.page}`}\r\n              {...item}\r\n            />\r\n          )}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n  return {\r\n    devices: state.devices.devices, //устройства\r\n    types: state.devices.types, //типы устройств\r\n    brands: state.devices.brands, //брэнды устройств\r\n    pageQty: state.devices.pageQty, //количества страниц\r\n    limit: state.devices.limit, //сколько устройств на странице\r\n    typeId: state.devices.typeId, // айдишник типа\r\n    brandId: state.devices.brandId, // айдишник брэнда\r\n    isLoadinDevice: state.devices.isLoadinDevice, //крутилка у стройств\r\n    isLoadinTypes: state.devices.isLoadinTypes, //крутилка типов\r\n    isFetchErrorDevice: state.devices.isFetchErrorDevice, //ошибка устройств\r\n    isFetchErrorTypes: state.devices.isFetchErrorTypes, //ошибка типов\r\n  };\r\n};\r\nexport default connect<\r\n  MapStateToPropsType,\r\n  MapDispathPropsType,\r\n  unknown, // личные пропсы\r\n  RootStateType\r\n>(mapStateToProps, {\r\n  getDevices,\r\n  setTypeId,\r\n  setBrandId,\r\n})(ProfileType);\r\n"]},"metadata":{},"sourceType":"module"}