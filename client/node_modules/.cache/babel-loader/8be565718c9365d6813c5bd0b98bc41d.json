{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\components\\\\Header.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport SupervisorAccountOutlinedIcon from '@material-ui/icons/SupervisorAccountOutlined';\nimport PersonAddOutlinedIcon from '@material-ui/icons/PersonAddOutlined';\nimport Badge from '@material-ui/core/Badge';\nimport Button from '@material-ui/core/Button';\nimport ShoppingCartOutlinedIcon from '@material-ui/icons/ShoppingCartOutlined';\nimport Logout from './Logout';\nimport { setAuth, //записть авторизации в стор\nsetIsAuth, // маркер авторизации\nsetLogout // типизация экшена маркера типизации\n} from '../store/reducer/authReducer';\nimport { getBrands, getTypes } from '../action/deviceAction'; //запрос на получениe типов устройств\n\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Box } from '@material-ui/core'; //типизация--------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n//-----------------------------------------\nconst useStyles = makeStyles(theme => ({\n  title: {\n    flexGrow: 1,\n    backgroundImage: \"url('/images/logo3.png')\",\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: 'left'\n  }\n}));\n\nconst Header = ({\n  auth,\n  isAuth,\n  setAuth,\n  setLogout,\n  setIsAuth,\n  getTypes,\n  getBrands\n}) => {\n  _s();\n\n  const history = useHistory();\n  const classes = useStyles();\n  useEffect(() => {\n    setIsAuth(!!sessionStorage.getItem('token')); //берём токен из sessionStorage и приводим его к булевому значению\n\n    const authorizationData = {\n      //берём данные из sessionStorage и записываем в стор\n      token: sessionStorage.getItem('token'),\n      email: sessionStorage.getItem('email'),\n      role: sessionStorage.getItem('role')\n    };\n    setAuth(authorizationData); // загрузка типов устройств\n\n    getTypes(); // загрузка брендов\n\n    getBrands(); // eslint-disable-next-line\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AppBar, {\n    position: \"static\",\n    style: {\n      background: '#7a7a7a',\n      padding: '0'\n    },\n    children: /*#__PURE__*/_jsxDEV(Toolbar, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        py: {\n          xs: 12,\n          sm: 7\n        },\n        className: classes.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), isAuth && auth.role === 'ADMIN' && /*#__PURE__*/_jsxDEV(Button, {\n        color: \"inherit\",\n        onClick: () => {\n          history.push('/addDevicesContainer');\n        },\n        children: /*#__PURE__*/_jsxDEV(SupervisorAccountOutlinedIcon, {\n          style: {\n            fontSize: '35px',\n            color: 'white'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), isAuth ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          color: \"inherit\",\n          children: /*#__PURE__*/_jsxDEV(Badge, {\n            badgeContent: 3,\n            color: \"secondary\",\n            children: /*#__PURE__*/_jsxDEV(ShoppingCartOutlinedIcon, {\n              style: {\n                fontSize: '35px',\n                color: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Logout, {\n          setLogout: setLogout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: () => history.push('/login'),\n        children: /*#__PURE__*/_jsxDEV(PersonAddOutlinedIcon, {\n          style: {\n            fontSize: '35px',\n            color: 'white'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Header, \"a770Wo9grBp66oG4IhbrG9riUrM=\", false, function () {\n  return [useHistory, useStyles];\n});\n\n_c = Header;\n\nconst mapStateToProps = state => {\n  return {\n    isAuth: state.auth.isAuth,\n    //  маркер авторизации\n    auth: state.auth.auth //авторизация для role\n\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setAuth,\n  setLogout,\n  setIsAuth,\n  getTypes,\n  getBrands\n})(Header);\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/components/Header.tsx"],"names":["React","useEffect","makeStyles","AppBar","Toolbar","IconButton","SupervisorAccountOutlinedIcon","PersonAddOutlinedIcon","Badge","Button","ShoppingCartOutlinedIcon","Logout","setAuth","setIsAuth","setLogout","getBrands","getTypes","useHistory","connect","Box","useStyles","theme","title","flexGrow","backgroundImage","backgroundRepeat","backgroundPosition","Header","auth","isAuth","history","classes","sessionStorage","getItem","authorizationData","token","email","role","background","padding","xs","sm","push","fontSize","color","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SupervisorAccountOutlinedIcon from '@material-ui/icons/SupervisorAccountOutlined';\r\nimport PersonAddOutlinedIcon from '@material-ui/icons/PersonAddOutlined';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Button from '@material-ui/core/Button';\r\nimport ShoppingCartOutlinedIcon from '@material-ui/icons/ShoppingCartOutlined';\r\nimport ShoppingCart from '@material-ui/icons/ShoppingCart';\r\nimport AddShoppingCart from '@material-ui/icons/AddShoppingCart';\r\nimport Logout from './Logout';\r\nimport {\r\n  setAuth, //записть авторизации в стор\r\n  setIsAuth, // маркер авторизации\r\n  setLogout, // выход из авторизации\r\n  AuthReducerType, //типизация авторизации\r\n  SetAuthActionType, // типизация экшена авторизации\r\n  SetLogoutActionType, // типизация экшена выхода из авторизации\r\n  SetIsAuthActionType, // типизация экшена маркера типизации\r\n} from '../store/reducer/authReducer';\r\nimport { getBrands, getTypes } from '../action/deviceAction'; //запрос на получениe типов устройств\r\nimport { RootStateType } from '../store/store';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { Box } from '@material-ui/core';\r\n\r\n//типизация--------------------------------\r\ntype MapStateToPropsType = { isAuth: boolean; auth: AuthReducerType };\r\ntype MapDispathPropsType = {\r\n  setAuth: (value: AuthReducerType) => SetAuthActionType;\r\n  setIsAuth: (value: boolean) => SetIsAuthActionType;\r\n  setLogout: () => SetLogoutActionType;\r\n  getTypes: () => void;\r\n  getBrands: () => void;\r\n};\r\ntype PropsType = MapDispathPropsType & MapStateToPropsType;\r\n//-----------------------------------------\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  title: {\r\n    flexGrow: 1,\r\n    backgroundImage: \"url('/images/logo3.png')\",\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundPosition: 'left',\r\n  },\r\n}));\r\n\r\nconst Header: React.FC<PropsType> = ({\r\n  auth,\r\n  isAuth,\r\n  setAuth,\r\n  setLogout,\r\n  setIsAuth,\r\n  getTypes,\r\n  getBrands,\r\n}) => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  useEffect(() => {\r\n    setIsAuth(!!sessionStorage.getItem('token')); //берём токен из sessionStorage и приводим его к булевому значению\r\n\r\n    const authorizationData: AuthReducerType = {\r\n      //берём данные из sessionStorage и записываем в стор\r\n      token: sessionStorage.getItem('token'),\r\n      email: sessionStorage.getItem('email'),\r\n      role: sessionStorage.getItem('role'),\r\n    };\r\n    setAuth(authorizationData);\r\n    // загрузка типов устройств\r\n    getTypes();\r\n    // загрузка брендов\r\n    getBrands();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <AppBar position=\"static\" style={{ background: '#7a7a7a', padding: '0' }}>\r\n      <Toolbar>\r\n        {/*  <div style={{ flexGrow: 1 }}>\r\n          <img\r\n            src=\"images/logo3.png\"\r\n            style={{ height: '112px', width: 'auto' }}\r\n          />\r\n        </div> */}\r\n\r\n        <Box py={{ xs: 12, sm: 7 }} className={classes.title}></Box>\r\n\r\n        {isAuth && auth.role === 'ADMIN' && (\r\n          <Button\r\n            color=\"inherit\"\r\n            onClick={() => {\r\n              history.push('/addDevicesContainer');\r\n            }}\r\n          >\r\n            <SupervisorAccountOutlinedIcon\r\n              style={{ fontSize: '35px', color: 'white' }}\r\n            />\r\n          </Button>\r\n        )}\r\n        {isAuth ? (\r\n          <>\r\n            <IconButton color=\"inherit\">\r\n              <Badge badgeContent={3} color=\"secondary\">\r\n                <ShoppingCartOutlinedIcon\r\n                  style={{ fontSize: '35px', color: 'white' }}\r\n                />\r\n              </Badge>\r\n            </IconButton>\r\n            <Logout setLogout={setLogout} />\r\n          </>\r\n        ) : (\r\n          <IconButton onClick={() => history.push('/login')}>\r\n            <PersonAddOutlinedIcon\r\n              style={{ fontSize: '35px', color: 'white' }}\r\n            />\r\n          </IconButton>\r\n        )}\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n  return {\r\n    isAuth: state.auth.isAuth, //  маркер авторизации\r\n    auth: state.auth.auth, //авторизация для role\r\n  };\r\n};\r\nexport default connect<\r\n  MapStateToPropsType,\r\n  MapDispathPropsType,\r\n  unknown, // личные пропсы\r\n  RootStateType\r\n>(mapStateToProps, { setAuth, setLogout, setIsAuth, getTypes, getBrands })(\r\n  Header\r\n);\r\n"]},"metadata":{},"sourceType":"module"}