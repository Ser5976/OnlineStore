{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\pages\\\\ProfileDevice.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\n// типизация всего стейта( для типизации state)\nimport Grid from '@material-ui/core/Grid';\nimport { Box } from '@material-ui/core';\nimport { getSelectedDevice } from '../action/deviceAction';\nimport { ROOT_URL } from '../constants/url';\nimport { connect } from 'react-redux'; //типизация---------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//-----------------------------------------------------------------\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(7)\n  },\n  listImage: {\n    display: 'flex',\n    flexWrap: 'nowrap',\n    overflow: 'auto',\n    backgroundColor: theme.palette.background.paper,\n    marginTop: 5,\n    padding: 5\n  },\n  image: {\n    height: 50,\n    width: 'auto',\n    margin: 5,\n    cursor: 'pointer'\n  }\n}));\n\nconst ProfileDevice = ({\n  getSelectedDevice,\n  selectedDevice\n}) => {\n  _s();\n\n  const [index, setIndex] = useState(0); //для выбора картинки\n\n  const classes = useStyles();\n  const {\n    id\n  } = useParams(); //  хук роутера ,который помогает получить значение params\n\n  console.log(selectedDevice);\n  useEffect(() => {\n    getSelectedDevice(id); // eslint-disable-next-line\n  }, []);\n  const {\n    name,\n    picture,\n    price,\n    info\n  } = selectedDevice;\n  let params;\n  info ? params = [...info] : params = [];\n  console.log(params[0]);\n  let image;\n  picture ? image = [...picture] : image = [];\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 2,\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        children: [' ', /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `${ROOT_URL}/${image[index]}`,\n          style: {\n            height: '250px',\n            width: 'auto'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), ' ', /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.listImage,\n          children: image.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `${ROOT_URL}/${item}`,\n              alt: \"\\u043A\\u0430\\u0440\\u0442\\u0438\\u043D\\u043A\\u0430\",\n              className: classes.image,\n              onClick: () => {\n                setIndex(index);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this)\n          }, item, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProfileDevice, \"ClcKQ9QAqXe+h5r+G05WYLCQMSQ=\", false, function () {\n  return [useStyles, useParams];\n});\n\n_c = ProfileDevice;\n\nconst mapStateToProps = state => {\n  return {\n    selectedDevice: state.devices.selectedDevice\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getSelectedDevice\n})(ProfileDevice);\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileDevice\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/pages/ProfileDevice.tsx"],"names":["React","useEffect","useState","useParams","makeStyles","Grid","Box","getSelectedDevice","ROOT_URL","connect","useStyles","theme","root","padding","spacing","listImage","display","flexWrap","overflow","backgroundColor","palette","background","paper","marginTop","image","height","width","margin","cursor","ProfileDevice","selectedDevice","index","setIndex","classes","id","console","log","name","picture","price","info","params","map","item","mapStateToProps","state","devices"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { RootStateType } from '../store/store'; // типизация всего стейта( для типизации state)\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Box } from '@material-ui/core';\r\nimport { getSelectedDevice } from '../action/deviceAction';\r\nimport { DeviceType, InfoType } from '../store/reducer/deviceReducer';\r\nimport { ROOT_URL } from '../constants/url';\r\nimport LineImageList from '../components/LineImageList';\r\nimport { connect } from 'react-redux';\r\n\r\n//типизация---------------------------------------------------------------------\r\ntype MapStateToPropsType = {\r\n  selectedDevice: DeviceType;\r\n};\r\ntype MapDispathPropsType = {\r\n  getSelectedDevice: (id: string) => void;\r\n};\r\ntype PropsType = MapStateToPropsType & MapDispathPropsType;\r\ntype ParamsType = {\r\n  id: string;\r\n};\r\n//-----------------------------------------------------------------\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(7),\r\n  },\r\n  listImage: {\r\n    display: 'flex',\r\n    flexWrap: 'nowrap',\r\n    overflow: 'auto',\r\n    backgroundColor: theme.palette.background.paper,\r\n    marginTop: 5,\r\n    padding: 5,\r\n  },\r\n  image: {\r\n    height: 50,\r\n    width: 'auto',\r\n    margin: 5,\r\n    cursor: 'pointer',\r\n  },\r\n}));\r\n\r\nconst ProfileDevice: React.FC<PropsType> = ({\r\n  getSelectedDevice,\r\n  selectedDevice,\r\n}) => {\r\n  const [index, setIndex] = useState(0); //для выбора картинки\r\n  const classes = useStyles();\r\n  const { id } = useParams<ParamsType>(); //  хук роутера ,который помогает получить значение params\r\n  console.log(selectedDevice);\r\n  useEffect(() => {\r\n    getSelectedDevice(id);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  const { name, picture, price, info } = selectedDevice;\r\n\r\n  let params: InfoType[];\r\n  info ? (params = [...info]) : (params = []);\r\n  console.log(params[0]);\r\n  let image: string[];\r\n  picture ? (image = [...picture]) : (image = []);\r\n  return (\r\n    <Grid container spacing={2} className={classes.root}>\r\n      <Grid item xs={12} sm={4}>\r\n        <Box>\r\n          {' '}\r\n          <img\r\n            src={`${ROOT_URL}/${image[index]}`}\r\n            style={{ height: '250px', width: 'auto' }}\r\n          />{' '}\r\n          <div className={classes.listImage}>\r\n            {image.map((item, index) => (\r\n              <div key={item}>\r\n                <img\r\n                  src={`${ROOT_URL}/${item}`}\r\n                  alt=\"картинка\"\r\n                  className={classes.image}\r\n                  onClick={() => {\r\n                    setIndex(index);\r\n                  }}\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </Box>\r\n      </Grid>\r\n      <Grid item xs={12} sm={5}></Grid>\r\n      <Grid item xs={12} sm={2}></Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n  return {\r\n    selectedDevice: state.devices.selectedDevice,\r\n  };\r\n};\r\nexport default connect<\r\n  MapStateToPropsType,\r\n  MapDispathPropsType,\r\n  unknown, // первичные пропсы\r\n  RootStateType\r\n>(mapStateToProps, { getSelectedDevice })(ProfileDevice);\r\n"]},"metadata":{},"sourceType":"module"}