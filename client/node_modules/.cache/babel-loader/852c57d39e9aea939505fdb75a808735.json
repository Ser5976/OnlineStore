{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\components\\\\Step3.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm, useFieldArray, Controller } from 'react-hook-form';\nimport IconButton from '@material-ui/core/IconButton';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport TextField from '@material-ui/core/TextField';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport Grid from '@material-ui/core/Grid'; //схема валидации---------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schema = yup.object().shape({\n  test: yup.string().required('Поле обязательное для заполнения') // description: yup.string().required('Поле обязательное для заполнения'),\n\n}); //-----------------------------------------\n\nconst Step3 = () => {\n  _s();\n\n  const {\n    control,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm({\n    defaultValues: {\n      test: [{\n        title: '',\n        description: ''\n      }]\n    },\n    resolver: yupResolver(schema),\n    mode: 'onBlur'\n  });\n  const {\n    fields,\n    append,\n    remove\n  } = useFieldArray({\n    control,\n    name: 'test'\n  });\n\n  const onSubmit = data => console.log('data', data); // if you want to control your fields with watch\n  // const watchResult = watch(\"test\");\n  // console.log(watchResult);\n  // The following is useWatch example\n  // console.log(useWatch({ name: \"test\", control }));\n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    children: [fields.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 3,\n          children: /*#__PURE__*/_jsxDEV(Controller, {\n            name: `test.${index}.title`,\n            control: control,\n            render: ({\n              field\n            }) => {\n              var _errors$test, _errors$test$index, _errors$test$index$ti;\n\n              return /*#__PURE__*/_jsxDEV(TextField, {\n                fullWidth: true,\n                label: \" \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \",\n                ...field,\n                error: !!errors.test,\n                helperText: (errors === null || errors === void 0 ? void 0 : (_errors$test = errors.test) === null || _errors$test === void 0 ? void 0 : (_errors$test$index = _errors$test[index]) === null || _errors$test$index === void 0 ? void 0 : _errors$test$index.title) ? (_errors$test$index$ti = errors.test[index].title) === null || _errors$test$index$ti === void 0 ? void 0 : _errors$test$index$ti.message : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 19\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 7,\n          children: /*#__PURE__*/_jsxDEV(Controller, {\n            name: `test.${index}.description`,\n            control: control,\n            render: ({\n              field\n            }) => {\n              var _errors$test2, _errors$test$index$de;\n\n              return /*#__PURE__*/_jsxDEV(TextField, { ...field,\n                multiline: true,\n                fullWidth: true,\n                label: \" \\u043E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435 \",\n                error: !!errors.test,\n                helperText: (errors === null || errors === void 0 ? void 0 : (_errors$test2 = errors.test) === null || _errors$test2 === void 0 ? void 0 : _errors$test2[index].description) ? (_errors$test$index$de = errors.test[index].description) === null || _errors$test$index$de === void 0 ? void 0 : _errors$test$index$de.message : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 19\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 2,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: () => remove(index),\n            children: /*#__PURE__*/_jsxDEV(HighlightOffIcon, {\n              style: {\n                fontSize: 30\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => {\n        append({\n          title: 'appendBill',\n          description: 'appendLuo'\n        });\n      },\n      children: \"append\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Step3, \"Yr7h8dMF9h1QbhbDxQVlyozbAyc=\", false, function () {\n  return [useForm, useFieldArray];\n});\n\n_c = Step3;\nexport default Step3;\n{\n  /* <Grid item xs={12} sm={3}>\r\n                    <Controller\r\n                    name={`test.${index}.title` as const}\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                  <TextField fullWidth label=\" название \" {...field} />\r\n                )}\r\n                />\r\n              <Grid/>\r\n              \r\n              <Grid item xs={12} sm={7}>\r\n                  <Controller\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    multiline\r\n                    fullWidth\r\n                    label=\" описание \"\r\n                  />\r\n                )}\r\n                name={`test.${index}.description`}\r\n                control={control}\r\n              />\r\n              </Grid>\r\n              <Grid item xs={12} sm={2}><button type=\"button\" onClick={() => remove(index)}>\r\n                Delete\r\n              </button>\r\n              <Grid/>  */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Step3\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/components/Step3.tsx"],"names":["React","useForm","useFieldArray","Controller","IconButton","HighlightOffIcon","TextField","yupResolver","yup","Grid","schema","object","shape","test","string","required","Step3","control","handleSubmit","formState","errors","defaultValues","title","description","resolver","mode","fields","append","remove","name","onSubmit","data","console","log","map","item","index","field","message","fontSize","id"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useForm, useFieldArray, Controller, useWatch } from 'react-hook-form';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n//схема валидации---------------------\r\nconst schema = yup.object().shape({\r\n  test: yup.string().required('Поле обязательное для заполнения'),\r\n  // description: yup.string().required('Поле обязательное для заполнения'),\r\n});\r\n//-----------------------------------------\r\n\r\nconst Step3 = () => {\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm({\r\n    defaultValues: {\r\n      test: [{ title: '', description: '' }],\r\n    },\r\n    resolver: yupResolver(schema),\r\n    mode: 'onBlur',\r\n  });\r\n  const { fields, append, remove } = useFieldArray({\r\n    control,\r\n    name: 'test',\r\n  });\r\n\r\n  const onSubmit = (data: any) => console.log('data', data);\r\n\r\n  // if you want to control your fields with watch\r\n  // const watchResult = watch(\"test\");\r\n  // console.log(watchResult);\r\n\r\n  // The following is useWatch example\r\n  // console.log(useWatch({ name: \"test\", control }));\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      {fields.map((item, index) => {\r\n        return (\r\n          <Grid container spacing={3} key={item.id}>\r\n            <Grid item xs={12} sm={3}>\r\n              <Controller\r\n                name={`test.${index}.title` as const}\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\" название \"\r\n                    {...field}\r\n                    error={!!errors.test}\r\n                    helperText={\r\n                      errors?.test?.[index]?.title\r\n                        ? errors.test[index].title?.message\r\n                        : null\r\n                    }\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={7}>\r\n              <Controller\r\n                name={`test.${index}.description`}\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    multiline\r\n                    fullWidth\r\n                    label=\" описание \"\r\n                    error={!!errors.test}\r\n                    helperText={\r\n                      errors?.test?.[index].description\r\n                        ? errors.test[index].description?.message\r\n                        : null\r\n                    }\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={2}>\r\n              <IconButton onClick={() => remove(index)}>\r\n                <HighlightOffIcon style={{ fontSize: 30 }} />\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n      })}\r\n\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          append({ title: 'appendBill', description: 'appendLuo' });\r\n        }}\r\n      >\r\n        append\r\n      </button>\r\n\r\n      <input type=\"submit\" />\r\n    </form>\r\n  );\r\n};\r\nexport default Step3;\r\n\r\n{\r\n  /* <Grid item xs={12} sm={3}>\r\n                    <Controller\r\n                    name={`test.${index}.title` as const}\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                  <TextField fullWidth label=\" название \" {...field} />\r\n                )}\r\n                />\r\n              <Grid/>\r\n              \r\n              <Grid item xs={12} sm={7}>\r\n                  <Controller\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    multiline\r\n                    fullWidth\r\n                    label=\" описание \"\r\n                  />\r\n                )}\r\n                name={`test.${index}.description`}\r\n                control={control}\r\n              />\r\n              </Grid>\r\n              <Grid item xs={12} sm={2}><button type=\"button\" onClick={() => remove(index)}>\r\n                Delete\r\n              </button>\r\n              <Grid/>  */\r\n}\r\n"]},"metadata":{},"sourceType":"module"}