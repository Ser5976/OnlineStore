{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\components\\\\FormDevice.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { MenuItem } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//схема валидации---------------------\nconst schema = yup.object().shape({}); //-----------------------------------------\n// типизация пропсов\n\n//--------------------------------------------\nconst useStyles = makeStyles(theme => ({\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(1)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  },\n  link: {\n    pointerEvents: 'none'\n  }\n}));\n\nconst FormDevice = ({\n  types,\n  brands\n}) => {\n  _s();\n\n  const history = useHistory();\n  const classes = useStyles();\n  const {\n    handleSubmit,\n    control,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(schema),\n    mode: 'onChange'\n  }); // получение данных из формы и отправка на сервак(авторизация или регистрация)\n\n  const onSubmit = data => {\n    console.log('Отправлено:', data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    noValidate: true,\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      component: \"main\",\n      justifyContent: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 3,\n        children: /*#__PURE__*/_jsxDEV(Controller, {\n          name: \"types\",\n          control: control,\n          defaultValue: \"\",\n          render: ({\n            field\n          }) => {\n            var _errors$types;\n\n            return /*#__PURE__*/_jsxDEV(TextField, { ...field,\n              fullWidth: true,\n              error: !!errors.types,\n              select: true,\n              margin: \"normal\",\n              label: \"\\u0422\\u0438\\u043F\\u044B \",\n              variant: \"outlined\",\n              helperText: errors.types ? (_errors$types = errors.types) === null || _errors$types === void 0 ? void 0 : _errors$types.message : null,\n              children: types.map((item, index) => {\n                return /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: item._id,\n                  children: item.name\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 91,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 15\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: false,\n        sm: 6\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 3,\n        children: /*#__PURE__*/_jsxDEV(Controller, {\n          name: \"brands\",\n          control: control,\n          defaultValue: \"\",\n          render: ({\n            field\n          }) => {\n            var _errors$brands;\n\n            return /*#__PURE__*/_jsxDEV(TextField, { ...field,\n              error: !!errors.brands,\n              fullWidth: true,\n              select: true,\n              margin: \"normal\",\n              label: \"\\u0411\\u0440\\u044D\\u043D\\u0434\\u044B \",\n              variant: \"outlined\",\n              helperText: errors.brands ? (_errors$brands = errors.brands) === null || _errors$brands === void 0 ? void 0 : _errors$brands.message : null,\n              children: brands.map((item, index) => {\n                return /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: item._id,\n                  children: item.name\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: classes.submit,\n      variant: \"contained\",\n      color: \"primary\",\n      fullWidth: true,\n      type: \"submit\" // disabled={!isValid || !isDirty}\n      ,\n      children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FormDevice, \"KGe7YBJ7JGZw3p2a3kR+lbmR1Sw=\", false, function () {\n  return [useHistory, useStyles, useForm];\n});\n\n_c = FormDevice;\nexport default FormDevice;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormDevice\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/components/FormDevice.tsx"],"names":["React","useForm","Controller","yupResolver","yup","Button","TextField","MenuItem","Grid","makeStyles","useHistory","schema","object","shape","useStyles","theme","form","width","marginTop","spacing","submit","margin","link","pointerEvents","FormDevice","types","brands","history","classes","handleSubmit","control","formState","errors","resolver","mode","onSubmit","data","console","log","field","message","map","item","index","_id","name"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useForm, SubmitHandler, Controller } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { MenuItem } from '@material-ui/core';\r\nimport { InputLabel } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { TypeDeviceType, BrandType } from '../store/reducer/deviceReducer';\r\n\r\n//типизация данных\r\ntype InfoType = {\r\n  title: string;\r\n  discription: string;\r\n};\r\n\r\ntype DataDeviceType = {\r\n  name: string;\r\n  price: number;\r\n  picture: any;\r\n  info: InfoType[];\r\n  typeId: string;\r\n  brandId: string;\r\n};\r\n\r\n//схема валидации---------------------\r\nconst schema = yup.object().shape({});\r\n//-----------------------------------------\r\n// типизация пропсов\r\ntype PropsType = {\r\n  types: TypeDeviceType[];\r\n  brands: BrandType[];\r\n};\r\n//--------------------------------------------\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  form: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  link: {\r\n    pointerEvents: 'none',\r\n  },\r\n}));\r\n\r\nconst FormDevice: React.FC<PropsType> = ({ types, brands }) => {\r\n  const history: any = useHistory();\r\n  const classes = useStyles();\r\n  const {\r\n    handleSubmit,\r\n    control,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n    mode: 'onChange',\r\n  });\r\n  // получение данных из формы и отправка на сервак(авторизация или регистрация)\r\n  const onSubmit: SubmitHandler<DataDeviceType> = (\r\n    data: DataDeviceType\r\n  ): void => {\r\n    console.log('Отправлено:', data);\r\n  };\r\n\r\n  return (\r\n    <form className={classes.form} noValidate onSubmit={handleSubmit(onSubmit)}>\r\n      <Grid container component=\"main\" justifyContent=\"center\">\r\n        <Grid item xs={12} sm={3}>\r\n          <Controller\r\n            name=\"types\"\r\n            control={control}\r\n            defaultValue=\"\"\r\n            render={({ field }) => (\r\n              <TextField\r\n                {...field}\r\n                fullWidth\r\n                error={!!errors.types}\r\n                select\r\n                margin=\"normal\"\r\n                label=\"Типы \"\r\n                variant=\"outlined\"\r\n                helperText={errors.types ? errors.types?.message : null}\r\n              >\r\n                {types.map((item, index) => {\r\n                  return (\r\n                    <MenuItem value={item._id} key={index}>\r\n                      {item.name}\r\n                    </MenuItem>\r\n                  );\r\n                })}\r\n              </TextField>\r\n            )}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={false} sm={6}></Grid>\r\n        <Grid item xs={12} sm={3}>\r\n          <Controller\r\n            name=\"brands\"\r\n            control={control}\r\n            defaultValue=\"\"\r\n            render={({ field }) => (\r\n              <TextField\r\n                {...field}\r\n                error={!!errors.brands}\r\n                fullWidth\r\n                select\r\n                margin=\"normal\"\r\n                label=\"Брэнды \"\r\n                variant=\"outlined\"\r\n                helperText={errors.brands ? errors.brands?.message : null}\r\n              >\r\n                {brands.map((item, index) => {\r\n                  return (\r\n                    <MenuItem value={item._id} key={index}>\r\n                      {item.name}\r\n                    </MenuItem>\r\n                  );\r\n                })}\r\n              </TextField>\r\n            )}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Button\r\n        className={classes.submit}\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        fullWidth\r\n        type=\"submit\"\r\n        // disabled={!isValid || !isDirty}\r\n      >\r\n        Отправить\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\nexport default FormDevice;\r\n"]},"metadata":{},"sourceType":"module"}