{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fullstack\\\\online-store\\\\client\\\\src\\\\components\\\\DeviceProperty.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm, Controller, useFieldArray } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport Button from '@material-ui/core/Button'; //типизация данных\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//схема валидации---------------------\nconst schema = yup.object().shape({\n  title: yup.string().required('Поле обязательное для заполнения'),\n  description: yup.string().required('Поле обязательное для заполнения')\n}); //-----------------------------------------\n\nconst DeviceProperty = () => {\n  _s();\n\n  /*  const [info, setInfo] = useState<InfoType[]>([]);\r\n    const addInfo = (): void => {\r\n    setInfo([...info, { title: '', description: '', id: Date.now() }]);\r\n  };\r\n    const removeInfo = (id: number | undefined): void => {\r\n    setInfo(info.filter((item) => item.id !== id));\r\n  }; */\n  const {\n    handleSubmit,\n    control,\n    watch,\n    formState: {\n      errors\n    },\n    register,\n    reset,\n    trigger\n  } = useForm({\n    resolver: yupResolver(schema),\n    mode: 'onBlur'\n  }); // получение данных из формы и отправка на сервак(авторизация или регистрация)\n\n  const onSubmit = data => {\n    console.log('Отправлено:', data);\n  };\n  /*  const changeInfo = (\r\n    key: string,\r\n    id: number | undefined,\r\n    value: any\r\n  ): void => {\r\n    console.log(key);\r\n    console.log(watch('title'));\r\n    setInfo(info.map((i) => (i.id === id ? { ...i, [key]: value } : i)));\r\n  };\r\n  const onCl = (): void => {\r\n    console.log(info);\r\n  };\r\n  const title = watch('title');\r\n  const description = watch('description'); */\n\n\n  const {\n    fields,\n    append,\n    remove\n  } = useFieldArray({\n    control,\n    name: 'test'\n  });\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      style: {\n        marginBottom: 15\n      } //  onClick={addInfo}\n      //className={classes.button}\n      ,\n      children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u043D\\u043E\\u0432\\u043E\\u0435 \\u0441\\u0432\\u043E\\u0439\\u0441\\u0442\\u0432\\u043E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      noValidate: true,\n      onSubmit: handleSubmit(onSubmit),\n      children: [fields.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 3,\n            children: /*#__PURE__*/_jsxDEV(Controller, {\n              name: `test.${index}.title`,\n              control: control,\n              defaultValue: \"\",\n              render: ({\n                field\n              }) => {\n                var _errors$title;\n\n                return /*#__PURE__*/_jsxDEV(TextField, { ...field,\n                  required: true,\n                  fullWidth: true,\n                  id: \"title\",\n                  label: \" \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \",\n                  autoFocus: true,\n                  error: !!errors.title,\n                  helperText: errors.title ? (_errors$title = errors.title) === null || _errors$title === void 0 ? void 0 : _errors$title.message : null\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 21\n                }, this);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 7,\n            children: /*#__PURE__*/_jsxDEV(Controller, {\n              name: `test.${index}.description`,\n              control: control,\n              defaultValue: \"\",\n              render: ({\n                field\n              }) => {\n                var _errors$description;\n\n                return /*#__PURE__*/_jsxDEV(TextField, { ...field,\n                  required: true,\n                  fullWidth: true,\n                  id: \"description\",\n                  label: \" \\u043E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435 \",\n                  multiline: true,\n                  error: !!errors.description,\n                  helperText: errors.description ? (_errors$description = errors.description) === null || _errors$description === void 0 ? void 0 : _errors$description.message : null\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 21\n                }, this);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 2,\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => () => remove(index),\n              children: /*#__PURE__*/_jsxDEV(HighlightOffIcon, {\n                style: {\n                  fontSize: 30\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this)]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => append({\n          title: '',\n          description: ''\n        }),\n        children: \"append\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DeviceProperty, \"EzZkPOVm1tiUteCTtz7M/fwgoUE=\", false, function () {\n  return [useForm, useFieldArray];\n});\n\n_c = DeviceProperty;\nexport default DeviceProperty;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeviceProperty\");","map":{"version":3,"sources":["D:/Fullstack/online-store/client/src/components/DeviceProperty.tsx"],"names":["React","useForm","Controller","useFieldArray","yupResolver","yup","Grid","TextField","IconButton","HighlightOffIcon","Button","schema","object","shape","title","string","required","description","DeviceProperty","handleSubmit","control","watch","formState","errors","register","reset","trigger","resolver","mode","onSubmit","data","console","log","fields","append","remove","name","marginBottom","map","item","index","field","message","fontSize","id"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  useForm,\r\n  SubmitHandler,\r\n  Controller,\r\n  useFieldArray,\r\n} from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n//типизация данных\r\ntype InfoType = {\r\n  title: string;\r\n  description: string;\r\n  id?: number;\r\n};\r\n\r\n//схема валидации---------------------\r\nconst schema = yup.object().shape({\r\n  title: yup.string().required('Поле обязательное для заполнения'),\r\n  description: yup.string().required('Поле обязательное для заполнения'),\r\n});\r\n//-----------------------------------------\r\n\r\nconst DeviceProperty = () => {\r\n  /*  const [info, setInfo] = useState<InfoType[]>([]);\r\n\r\n  const addInfo = (): void => {\r\n    setInfo([...info, { title: '', description: '', id: Date.now() }]);\r\n  };\r\n\r\n  const removeInfo = (id: number | undefined): void => {\r\n    setInfo(info.filter((item) => item.id !== id));\r\n  }; */\r\n\r\n  const {\r\n    handleSubmit,\r\n    control,\r\n    watch,\r\n    formState: { errors },\r\n    register,\r\n    reset,\r\n    trigger,\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n    mode: 'onBlur',\r\n  });\r\n  // получение данных из формы и отправка на сервак(авторизация или регистрация)\r\n  const onSubmit: SubmitHandler<InfoType[]> = (data: InfoType[]): void => {\r\n    console.log('Отправлено:', data);\r\n  };\r\n  /*  const changeInfo = (\r\n    key: string,\r\n    id: number | undefined,\r\n    value: any\r\n  ): void => {\r\n    console.log(key);\r\n    console.log(watch('title'));\r\n    setInfo(info.map((i) => (i.id === id ? { ...i, [key]: value } : i)));\r\n  };\r\n  const onCl = (): void => {\r\n    console.log(info);\r\n  };\r\n  const title = watch('title');\r\n  const description = watch('description'); */\r\n\r\n  const { fields, append, remove } = useFieldArray({\r\n    control,\r\n    name: 'test',\r\n  });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        color=\"primary\"\r\n        style={{ marginBottom: 15 }}\r\n        //  onClick={addInfo}\r\n        //className={classes.button}\r\n      >\r\n        Добавить новое свойство\r\n      </Button>\r\n      <form noValidate onSubmit={handleSubmit(onSubmit)}>\r\n        {fields.map((item, index) => {\r\n          return (\r\n            <Grid container spacing={3} key={item.id}>\r\n              <Grid item xs={12} sm={3}>\r\n                <Controller\r\n                  name={`test.${index}.title`}\r\n                  control={control}\r\n                  defaultValue=\"\"\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      required\r\n                      fullWidth\r\n                      id=\"title\"\r\n                      label=\" название \"\r\n                      autoFocus\r\n                      error={!!errors.title}\r\n                      helperText={errors.title ? errors.title?.message : null}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={7}>\r\n                <Controller\r\n                  name={`test.${index}.description`}\r\n                  control={control}\r\n                  defaultValue=\"\"\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      required\r\n                      fullWidth\r\n                      id=\"description\"\r\n                      label=\" описание \"\r\n                      multiline\r\n                      error={!!errors.description}\r\n                      helperText={\r\n                        errors.description ? errors.description?.message : null\r\n                      }\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={2}>\r\n                <IconButton onClick={() => () => remove(index)}>\r\n                  <HighlightOffIcon style={{ fontSize: 30 }} />\r\n                </IconButton>\r\n              </Grid>\r\n            </Grid>\r\n          );\r\n        })}\r\n        {/*  <Button onClick={onCl}>Отправить</Button> */}\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => append({ title: '', description: '' })}\r\n        >\r\n          append\r\n        </button>\r\n        <input type=\"submit\" />\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default DeviceProperty;\r\n"]},"metadata":{},"sourceType":"module"}